import { MoveableManagerState, ResizableProps, MoveableManagerInterface, OnTransformEvent, OnTransformStartEvent, DraggableProps } from "../types";
export declare function caculatePointerDist(moveable: MoveableManagerInterface, e: any): number[];
export declare function setDragStart(moveable: MoveableManagerInterface<any>, { datas }: any): void;
export declare function resolveTransformEvent(event: any, functionName: string): void;
export declare function convertTransformFormat(datas: any, value: any, dist: any): string;
export declare function getTransformDist({ datas, distX, distY }: any): number[];
export declare function getTransfromMatrix(datas: any, targetMatrix: number[], isAfter?: boolean): number[];
export declare function getBeforeDragDist({ datas, distX, distY }: any): number[];
export declare function getDragDist({ datas, distX, distY }: any, isBefore?: boolean): number[];
export declare function getInverseDragDist({ datas, distX, distY }: any, isBefore?: boolean): number[];
export declare function caculateTransformOrigin(transformOrigin: string[], width: number, height: number, prevWidth?: number, prevHeight?: number, prevOrigin?: number[]): number[];
export declare function getPosIndexesByDirection(direction: number[]): number[];
export declare function getPosesByDirection(poses: number[][], direction: number[]): number[][];
export declare function getPosByDirection(poses: number[][], direction: number[]): number[];
export declare function getPosByReverseDirection(poses: number[][], direction: number[]): number[];
export declare function getNextMatrix(offsetMatrix: number[], targetMatrix: number[], origin: number[], n: number): number[];
export declare function getNextTransformMatrix(state: MoveableManagerState<any>, datas: any, transform: string): number[];
export declare function scaleMatrix(state: MoveableManagerState<any>, scale: number[]): number[];
export declare function getScaleDelta(moveable: MoveableManagerInterface<any>, scale: number[], direction: number[], fixedPosition: number[]): number[];
export declare function fillTransformStartEvent(e: any): OnTransformStartEvent;
export declare function setDefaultTransformIndex(e: any): void;
export declare function setTransformIndex(e: any, index: number): void;
export declare function fillOriginalTransform(e: any, transform: string): void;
export declare function fillTransformEvent(moveable: MoveableManagerInterface<DraggableProps>, nextTransform: string, delta: number[], isPinch: boolean, e: any): OnTransformEvent;
export declare function getTranslateDist(moveable: MoveableManagerInterface<any>, transform: string, fixedPosition: number[], fixedDirection: number[], datas: any): number[];
export declare function getScaleDist(moveable: MoveableManagerInterface<any>, scaleDist: number[], direction: number[], fixedPosition: number[], datas: any): number[];
export declare function getOriginDirection(moveable: MoveableManagerInterface<any>): number[];
export declare function getDirectionOffset(moveable: MoveableManagerInterface, direction: number[], nextMatrix?: number[]): number[];
export declare function getRotateDist(moveable: MoveableManagerInterface<any>, rotateDist: number, fixedPosition: number[], datas: any): number[];
export declare function getResizeDist(moveable: MoveableManagerInterface<any>, width: number, height: number, direction: number[], fixedPosition: number[], transformOrigin: string[]): number[];
export declare function getStartDirection(moveable: MoveableManagerInterface<ResizableProps>, direction: number[]): number[];
export declare function getAbsoluteFixedPosition(moveable: MoveableManagerInterface<ResizableProps>, direction: number[]): number[];
