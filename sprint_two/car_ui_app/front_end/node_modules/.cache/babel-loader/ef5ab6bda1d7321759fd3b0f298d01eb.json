{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-css-styled\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/css-styled/tree/master/packages/react-css-styled\nversion: 1.0.0\n*/\nimport cssStyled from 'css-styled';\nimport { createElement, Component } from 'react';\nimport { ref } from 'framework-utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar StyledElement = /*#__PURE__*/function (_super) {\n  __extends(StyledElement, _super);\n\n  function StyledElement() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.injectResult = null;\n    _this.tag = \"div\";\n    return _this;\n  }\n\n  var __proto = StyledElement.prototype;\n\n  __proto.render = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        cspNonce = _a.cspNonce,\n        attributes = __rest(_a, [\"className\", \"cspNonce\"]);\n\n    var cssId = this.injector.className;\n    var Tag = this.tag;\n    return createElement(Tag, __assign({\n      \"ref\": ref(this, \"element\"),\n      \"data-styled-id\": cssId,\n      \"className\": className + \" \" + cssId\n    }, attributes));\n  };\n\n  __proto.componentDidMount = function () {\n    this.injectResult = this.injector.inject(this.element, {\n      nonce: this.props.cspNonce\n    });\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.injectResult.destroy();\n    this.injectResult = null;\n  };\n\n  __proto.getElement = function () {\n    return this.element;\n  };\n\n  return StyledElement;\n}(Component);\n\nfunction styled(tag, css) {\n  var injector = cssStyled(css);\n  return /*#__PURE__*/function (_super) {\n    __extends(Styled, _super);\n\n    function Styled() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.injector = injector;\n      _this.tag = tag;\n      return _this;\n    }\n\n    return Styled;\n  }(StyledElement);\n}\n\nexport default styled;\nexport { StyledElement };","map":{"version":3,"sources":["../src/react-css-styled/StyledElement.tsx","../src/react-css-styled/styled.tsx"],"names":["tslib_1","_this","_a","_b","cspNonce","attributes","cssId","Tag","createElement","ref","className","nonce","styled","tag","css","injector","cssStyled"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKqFA,EAAAA,SAAAA,CAAAA,aAAAA,EAAAA,MAAAA,CAAAA;;WAArF,a,GAAA;oEAAA,I;;AAGWC,IAAAA,KAAAA,CAAAA,YAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,GAAAA,GAAAA,KAAAA;;;;;;UACA,M,GAAP,YAAA;QACUC,EAAAA,GAAAA,KAAN,K;QACIC,EAAAA,GAAAA,EAAAA,CADJ,S;QACIA,SAAAA,GAAAA,EAAAA,KAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GADJ,E;QAEIC,QAAAA,GAAAA,EAAAA,CAFJ,Q;QAGIC,UAAAA,GAAAA,MAAAA,CAAAA,EAAAA,EAAAA,CAAAA,WAAAA,EAHJ,UAGIA,CAAAA,C;;QAEEC,KAAK,GAAG,KAAA,QAAA,CAAd,S;QACMC,GAAG,GAAG,KAAZ,G;WACOC,aAAa,CAAA,GAAA,EAAA,QAAA,CAAA;aACTC,GAAG,CAAA,IAAA,EAAA,SAAA,CADM;wBAEEH,KAFF;mBAGAI,SAAS,GAATA,GAAAA,GAAaJ;AAHb,KAAA,EAApB,UAAoB,CAAA,C;AARjB,G;;UAeA,iB,GAAP,YAAA;SACI,Y,GAAoB,KAAA,QAAA,CAAA,MAAA,CAAsB,KAAtB,OAAA,EAAqC;AACrDK,MAAAA,KAAK,EAAE,KAAA,KAAA,CAAWP;AADmC,KAArC,C;AADjB,G;;UAKA,oB,GAAP,YAAA;SACI,Y,CAAA,O;SACA,Y,GAAA,I;AAFG,G;;UAIA,U,GAAP,YAAA;WACW,KAAP,O;AADG,G;;SAGX,a;EAhCA,S;;SCFwBQ,M,CACpBC,G,EAAaC,G,EAAAA;MACPC,QAAQ,GAAGC,SAAS,CAA1B,GAA0B,C;;AAEEhB,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;;aAArB,M,GAAA;sEAAA,I;;AACIC,MAAAA,KAAAA,CAAAA,QAAAA,GAAAA,QAAAA;AACAA,MAAAA,KAAAA,CAAAA,GAAAA,GAAAA,GAAAA;;;;WACX,M;IAH4BD,a","sourcesContent":["import { Component, createElement } from \"react\";\nimport { IObject } from \"@daybrush/utils\";\nimport { StyledInjector, InjectResult } from \"css-styled\";\nimport { ref } from \"framework-utils\";\n\nexport class StyledElement<T extends HTMLElement | SVGElement = HTMLElement> extends Component<IObject<any>> {\n    public injector!: StyledInjector;\n    public element!: T;\n    public injectResult: InjectResult | null = null;\n    public tag: string = \"div\";\n    public render(): any {\n        const {\n            className = \"\",\n            cspNonce,\n            ...attributes\n        } = this.props;\n        const cssId = this.injector!.className;\n        const Tag = this.tag;\n        return createElement(Tag, {\n            \"ref\": ref(this, \"element\"),\n            \"data-styled-id\": cssId,\n            \"className\": `${className} ${cssId}`,\n            ...attributes,\n        });\n    }\n    public componentDidMount() {\n        this.injectResult = this.injector!.inject(this.element!, {\n            nonce: this.props.cspNonce,\n        });\n    }\n    public componentWillUnmount() {\n        this.injectResult!.destroy();\n        this.injectResult = null;\n    }\n    public getElement() {\n        return this.element;\n    }\n}\n","import cssStyled from \"css-styled\";\nimport { StyledElement } from \"./StyledElement\";\n\nexport default function styled<T extends HTMLElement | SVGElement = HTMLElement>(\n    tag: string, css: string): typeof StyledElement & (new (...args: any[]) => StyledElement<T>) {\n    const injector = cssStyled(css);\n\n    return class Styled extends StyledElement<T> {\n        public injector = injector;\n        public tag = tag;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}