{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: css-to-mat\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/css-to-mat.git\nversion: 0.1.6\n*/\nimport { mat4 } from 'gl-matrix';\nimport { splitBracket, splitComma, splitUnit, isArray, splitSpace } from '@daybrush/utils';\n\nfunction createMatrix() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\nfunction parseMat(transform) {\n  return toMat(parse(transform));\n}\n\nfunction getElementMatrix(el) {\n  return parseMat(getComputedStyle(el).transform);\n}\n\nfunction caculateMatrixDist(matrix, pos) {\n  var res = mat4.multiply(createMatrix(), matrix, [pos[0], pos[1] || 0, pos[2] || 0, 1]);\n  var w = res[3] || 1;\n  return [res[0] / w, res[1] / w, res[2] / w];\n}\n\nfunction getDistElementMatrix(el, container) {\n  if (container === void 0) {\n    container = document.body;\n  }\n\n  var target = el;\n  var matrix = createMatrix();\n\n  while (target) {\n    var transform = getComputedStyle(target).transform;\n    mat4.multiply(matrix, parseMat(transform), matrix);\n\n    if (target === container) {\n      break;\n    }\n\n    target = target.parentElement;\n  }\n\n  mat4.invert(matrix, matrix);\n  matrix[12] = 0;\n  matrix[13] = 0;\n  matrix[14] = 0;\n  return matrix;\n}\n\nfunction toMat(matrixInfos) {\n  var target = createMatrix();\n  matrixInfos.forEach(function (info) {\n    var functionName = info.functionName,\n        functionValue = info.functionValue;\n\n    if (!functionName) {\n      return;\n    }\n\n    mat4[functionName](target, target, functionValue);\n  });\n  return target;\n}\n\nfunction parse(transform) {\n  var transforms = isArray(transform) ? transform : splitSpace(transform);\n  return transforms.map(function (t) {\n    var _a = splitBracket(t),\n        name = _a.prefix,\n        value = _a.value;\n\n    var functionName = \"\";\n    var functionValue = \"\";\n\n    if (name === \"translate\" || name === \"translateX\" || name === \"translate3d\") {\n      var _b = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      }),\n          posX = _b[0],\n          _c = _b[1],\n          posY = _c === void 0 ? 0 : _c,\n          _d = _b[2],\n          posZ = _d === void 0 ? 0 : _d;\n\n      functionName = \"translate\";\n      functionValue = [posX, posY, posZ];\n    } else if (name === \"translateY\") {\n      var posY = parseFloat(value);\n      functionName = \"translate\";\n      functionValue = [0, posY, 0];\n    } else if (name === \"translateZ\") {\n      var posZ = parseFloat(value);\n      functionName = \"translate\";\n      functionValue = [0, 0, posZ];\n    } else if (name === \"scale\" || name === \"scale3d\") {\n      var _e = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      }),\n          sx = _e[0],\n          _f = _e[1],\n          sy = _f === void 0 ? sx : _f,\n          _g = _e[2],\n          sz = _g === void 0 ? 1 : _g;\n\n      functionName = \"scale\";\n      functionValue = [sx, sy, sz];\n    } else if (name === \"scaleX\") {\n      var sx = parseFloat(value);\n      functionName = \"scale\";\n      functionValue = [sx, 1, 1];\n    } else if (name === \"scaleY\") {\n      var sy = parseFloat(value);\n      functionName = \"scale\";\n      functionValue = [1, sy, 1];\n    } else if (name === \"scaleZ\") {\n      var sz = parseFloat(value);\n      functionName = \"scale\";\n      functionValue = [1, 1, sz];\n    } else if (name === \"rotate\" || name === \"rotateZ\" || name === \"rotateX\" || name === \"rotateY\") {\n      var _h = splitUnit(value),\n          unit = _h.unit,\n          unitValue = _h.value;\n\n      var rad = unit === \"rad\" ? unitValue : unitValue * Math.PI / 180;\n      functionName = name === \"rotate\" ? \"rotateZ\" : name;\n      functionValue = rad;\n    } else if (name === \"matrix3d\") {\n      functionName = \"multiply\";\n      functionValue = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      });\n    } else if (name === \"matrix\") {\n      var m = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      });\n      functionName = \"multiply\";\n      functionValue = [m[0], m[1], 0, 0, m[2], m[3], 0, 0, 0, 0, 1, 0, m[4], m[5], 0, 1];\n    }\n\n    return {\n      name: name,\n      value: value,\n      functionName: functionName,\n      functionValue: functionValue\n    };\n  });\n}\n\nexport { caculateMatrixDist, createMatrix, getDistElementMatrix, getElementMatrix, parse, parseMat, toMat };","map":{"version":3,"sources":["../src/CSSToMatrix.ts"],"names":["createMatrix","parseMat","transform","toMat","parse","getElementMatrix","el","getComputedStyle","caculateMatrixDist","matrix","pos","res","mat4","w","getDistElementMatrix","container","document","target","matrixInfos","functionName","functionValue","transforms","isArray","splitSpace","_a","name","value","posX","_c","_d","posY","parseFloat","posZ","sx","_f","_g","sy","sz","_h","unit","unitValue","rad","Math","m"],"mappings":"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","sourcesContent":["import { mat4 } from \"gl-matrix\";\nimport { splitComma, splitBracket, splitUnit, splitSpace, isArray } from \"@daybrush/utils\";\nimport { MatrixInfo } from \"./types\";\n\nexport function createMatrix() {\n    return [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1,\n    ];\n}\nexport function parseMat(transform: string | string[]): number[] {\n    return toMat(parse(transform));\n}\nexport function getElementMatrix(el: HTMLElement) {\n    return parseMat(getComputedStyle(el).transform!);\n}\nexport function caculateMatrixDist(matrix: number[], pos: number[]) {\n    const res = mat4.multiply(createMatrix() as any, matrix as any, [pos[0], pos[1] || 0, pos[2] || 0, 1] as any);\n    const w = res[3] || 1;\n\n    return [\n        res[0] / w,\n        res[1] / w,\n        res[2] / w,\n    ];\n}\nexport function getDistElementMatrix(el: HTMLElement, container = document.body): number[] {\n    let target: HTMLElement | null = el;\n    const matrix = createMatrix() as any;\n\n    while (target) {\n        const transform = getComputedStyle(target).transform!;\n        mat4.multiply(matrix, parseMat(transform) as mat4, matrix);\n\n        if (target === container) {\n            break;\n        }\n        target = target.parentElement;\n    }\n    mat4.invert(matrix, matrix);\n\n    matrix[12] = 0;\n    matrix[13] = 0;\n    matrix[14] = 0;\n\n    return matrix;\n}\n\nexport function toMat(matrixInfos: MatrixInfo[]): number[] {\n    const target = createMatrix();\n\n    matrixInfos.forEach(info => {\n        const {\n            functionName,\n            functionValue,\n        } = info;\n\n        if (!functionName) {\n            return;\n        }\n        (mat4 as any)[functionName](target, target, functionValue);\n    });\n    return target;\n}\nexport function parse(transform: string | string[]): MatrixInfo[] {\n    const transforms = isArray(transform) ? transform : splitSpace(transform);\n\n    return transforms.map(t => {\n        const { prefix: name, value } = splitBracket(t);\n\n        let functionName: keyof typeof mat4 | \"\" = \"\";\n        let functionValue: any = \"\";\n\n        if (name === \"translate\" || name === \"translateX\" || name === \"translate3d\") {\n            const [posX, posY = 0, posZ = 0] = splitComma(value!).map(v => parseFloat(v));\n\n            functionName = \"translate\";\n            functionValue = [posX, posY, posZ];\n        } else if (name === \"translateY\") {\n            const posY = parseFloat(value!);\n\n            functionName = \"translate\";\n            functionValue = [0, posY, 0];\n        } else if (name === \"translateZ\") {\n            const posZ = parseFloat(value!);\n\n            functionName = \"translate\";\n            functionValue = [0, 0, posZ];\n        } else if (name === \"scale\" || name === \"scale3d\") {\n            const [sx, sy = sx, sz = 1] = splitComma(value!).map(v => parseFloat(v)) as number[];\n\n            functionName = \"scale\";\n            functionValue = [sx, sy, sz];\n        } else if (name === \"scaleX\") {\n            const sx = parseFloat(value!);\n\n            functionName = \"scale\";\n            functionValue = [sx, 1, 1];\n        } else if (name === \"scaleY\") {\n            const sy = parseFloat(value!);\n\n            functionName = \"scale\";\n            functionValue = [1, sy, 1];\n        } else if (name === \"scaleZ\") {\n            const sz = parseFloat(value!);\n            functionName = \"scale\";\n            functionValue = [1, 1, sz];\n        } else if (name === \"rotate\" || name === \"rotateZ\" || name === \"rotateX\" || name === \"rotateY\") {\n            const { unit, value: unitValue } = splitUnit(value!);\n            const rad = unit === \"rad\" ? unitValue : unitValue * Math.PI / 180;\n\n            functionName = name === \"rotate\" ? \"rotateZ\" : name;\n            functionValue = rad;\n        } else if (name === \"matrix3d\") {\n            functionName = \"multiply\";\n            functionValue = splitComma(value!).map(v => parseFloat(v));\n        } else if (name === \"matrix\") {\n            const m = splitComma(value!).map(v => parseFloat(v));\n            functionName = \"multiply\";\n            functionValue = [\n                m[0], m[1], 0, 0,\n                m[2], m[3], 0, 0,\n                0, 0, 1, 0,\n                m[4], m[5], 0, 1,\n            ];\n        }\n        return {\n            name: name!,\n            value: value!,\n            functionName,\n            functionValue,\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module"}