{"ast":null,"code":"/*\nCopyright (c) 2017 NAVER Corp.\n@egjs/component project is licensed under the MIT license\n\n@egjs/component JavaScript library\nhttps://naver.github.io/egjs-component\n\n@version 2.1.2\n*/\n\n/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n * @alias eg.Component\n */\n\n\nvar Component = /*#__PURE__*/function () {\n  var Component = /*#__PURE__*/function () {\n    /**\n    * Version info string\n    * @ko 버전정보 문자열\n    * @name VERSION\n    * @static\n    * @type {String}\n    * @example\n    * eg.Component.VERSION;  // ex) 2.0.0\n    * @memberof eg.Component\n    */\n\n    /**\n     * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n     */\n    function Component() {\n      this._eventHandler = {};\n      this.options = {};\n    }\n    /**\n     * Triggers a custom event.\n     * @ko 커스텀 이벤트를 발생시킨다\n     * @param {String} eventName The name of the custom event to be triggered <ko>발생할 커스텀 이벤트의 이름</ko>\n     * @param {Object} customEvent Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n     * @return {Boolean} Indicates whether the event has occurred. If the stop() method is called by a custom event handler, it will return false and prevent the event from occurring. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">Ref</a> <ko>이벤트 발생 여부. 커스텀 이벤트 핸들러에서 stop() 메서드를 호출하면 'false'를 반환하고 이벤트 발생을 중단한다. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">참고</a></ko>\n     * @example\n    class Some extends eg.Component {\n     some(){\n     \tif(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n    \tthis.trigger(\"hi\");// fire hi event.\n     \t}\n     }\n    }\n    const some = new Some();\n    some.on(\"beforeHi\", (e) => {\n    if(condition){\n    \te.stop(); // When event call to stop, `hi` event not call.\n    }\n    });\n    some.on(\"hi\", (e) => {\n    // `currentTarget` is component instance.\n    console.log(some === e.currentTarget); // true\n    });\n    // If you want to more know event design. You can see article.\n    // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n     */\n\n\n    var _proto = Component.prototype;\n\n    _proto.trigger = function trigger(eventName, customEvent) {\n      if (customEvent === void 0) {\n        customEvent = {};\n      }\n\n      var handlerList = this._eventHandler[eventName] || [];\n      var hasHandlerList = handlerList.length > 0;\n\n      if (!hasHandlerList) {\n        return true;\n      } // If detach method call in handler in first time then handler list calls.\n\n\n      handlerList = handlerList.concat();\n      customEvent.eventType = eventName;\n      var isCanceled = false;\n      var arg = [customEvent];\n      var i = 0;\n\n      customEvent.stop = function () {\n        isCanceled = true;\n      };\n\n      customEvent.currentTarget = this;\n\n      for (var _len = arguments.length, restParam = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        restParam[_key - 2] = arguments[_key];\n      }\n\n      if (restParam.length >= 1) {\n        arg = arg.concat(restParam);\n      }\n\n      for (i = 0; handlerList[i]; i++) {\n        handlerList[i].apply(this, arg);\n      }\n\n      return !isCanceled;\n    };\n    /**\n     * Executed event just one time.\n     * @ko 이벤트가 한번만 실행된다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       alert(\"hi\");\n     }\n     thing() {\n       this.once(\"hi\", this.hi);\n     }\n    }\n    var some = new Some();\n    some.thing();\n    some.trigger(\"hi\");\n    // fire alert(\"hi\");\n    some.trigger(\"hi\");\n    // Nothing happens\n     */\n\n\n    _proto.once = function once(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var i;\n\n        for (i in eventHash) {\n          this.once(i, eventHash[i]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var self = this;\n        this.on(eventName, function listener() {\n          for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            arg[_key2] = arguments[_key2];\n          }\n\n          handlerToAttach.apply(self, arg);\n          self.off(eventName, listener);\n        });\n      }\n\n      return this;\n    };\n    /**\n     * Checks whether an event has been attached to a component.\n     * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n     * @param {String} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n     * @return {Boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n     * @example\n    class Some extends eg.Component {\n     some() {\n       this.hasOn(\"hi\");// check hi event.\n     }\n    }\n     */\n\n\n    _proto.hasOn = function hasOn(eventName) {\n      return !!this._eventHandler[eventName];\n    };\n    /**\n     * Attaches an event to a component.\n     * @ko 컴포넌트에 이벤트를 등록한다.\n     * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n     * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.on(\"hi\",this.hi); //attach event\n     }\n    }\n    */\n\n\n    _proto.on = function on(eventName, handlerToAttach) {\n      if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n        var eventHash = eventName;\n        var name;\n\n        for (name in eventHash) {\n          this.on(name, eventHash[name]);\n        }\n\n        return this;\n      } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n        var handlerList = this._eventHandler[eventName];\n\n        if (isUndefined(handlerList)) {\n          this._eventHandler[eventName] = [];\n          handlerList = this._eventHandler[eventName];\n        }\n\n        handlerList.push(handlerToAttach);\n      }\n\n      return this;\n    };\n    /**\n     * Detaches an event from the component.\n     * @ko 컴포넌트에 등록된 이벤트를 해제한다\n     * @param {eventName} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n     * @param {Function} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n     * @return {eg.Component} An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n     * @example\n    class Some extends eg.Component {\n     hi() {\n       console.log(\"hi\");\n     }\n     some() {\n       this.off(\"hi\",this.hi); //detach event\n     }\n    }\n     */\n\n\n    _proto.off = function off(eventName, handlerToDetach) {\n      // All event detach.\n      if (isUndefined(eventName)) {\n        this._eventHandler = {};\n        return this;\n      } // All handler of specific event detach.\n\n\n      if (isUndefined(handlerToDetach)) {\n        if (typeof eventName === \"string\") {\n          this._eventHandler[eventName] = undefined;\n          return this;\n        } else {\n          var eventHash = eventName;\n          var name;\n\n          for (name in eventHash) {\n            this.off(name, eventHash[name]);\n          }\n\n          return this;\n        }\n      } // The handler of specific event detach.\n\n\n      var handlerList = this._eventHandler[eventName];\n\n      if (handlerList) {\n        var k;\n        var handlerFunction;\n\n        for (k = 0; (handlerFunction = handlerList[k]) !== undefined; k++) {\n          if (handlerFunction === handlerToDetach) {\n            handlerList = handlerList.splice(k, 1);\n            break;\n          }\n        }\n      }\n\n      return this;\n    };\n\n    return Component;\n  }();\n\n  Component.VERSION = \"2.1.2\";\n  return Component;\n}();\n\nexport default Component;","map":{"version":3,"sources":["../src/Component.js"],"names":["Component","VERSION","trigger","eventName","customEvent","restParam","handlerList","hasHandlerList","isCanceled","arg","i","once","handlerToAttach","isUndefined","eventHash","self","hasOn","on","off","handlerToDetach","k","handlerFunction"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n\nfunction isUndefined(value) {\n\treturn typeof value === \"undefined\";\n}\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n * @alias eg.Component\n */\nclass Component {\n\t/**\n * Version info string\n * @ko 버전정보 문자열\n * @name VERSION\n * @static\n * @type {String}\n * @example\n * eg.Component.VERSION;  // ex) 2.0.0\n * @memberof eg.Component\n */\n\tstatic VERSION = \"#__VERSION__#\";\n\t/**\n\t * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n\t */\n\tconstructor() {\n\t\tthis._eventHandler = {};\n\t\tthis.options = {};\n\t}\n\t/**\n\t * Triggers a custom event.\n\t * @ko 커스텀 이벤트를 발생시킨다\n\t * @param {String} eventName The name of the custom event to be triggered <ko>발생할 커스텀 이벤트의 이름</ko>\n\t * @param {Object} customEvent Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n\t * @return {Boolean} Indicates whether the event has occurred. If the stop() method is called by a custom event handler, it will return false and prevent the event from occurring. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">Ref</a> <ko>이벤트 발생 여부. 커스텀 이벤트 핸들러에서 stop() 메서드를 호출하면 'false'를 반환하고 이벤트 발생을 중단한다. <a href=\"https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\">참고</a></ko>\n\t * @example\n\nclass Some extends eg.Component {\n  some(){\n  \tif(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n\t\tthis.trigger(\"hi\");// fire hi event.\n  \t}\n  }\n}\n\nconst some = new Some();\nsome.on(\"beforeHi\", (e) => {\n\tif(condition){\n\t\te.stop(); // When event call to stop, `hi` event not call.\n\t}\n});\nsome.on(\"hi\", (e) => {\n\t// `currentTarget` is component instance.\n\tconsole.log(some === e.currentTarget); // true\n});\n// If you want to more know event design. You can see article.\n// https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n\t */\n\ttrigger(eventName, customEvent = {}, ...restParam) {\n\t\tlet handlerList = this._eventHandler[eventName] || [];\n\t\tconst hasHandlerList = handlerList.length > 0;\n\n\t\tif (!hasHandlerList) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If detach method call in handler in first time then handler list calls.\n\t\thandlerList = handlerList.concat();\n\n\t\tcustomEvent.eventType = eventName;\n\n\t\tlet isCanceled = false;\n\t\tlet arg = [customEvent];\n\t\tlet i = 0;\n\n\t\tcustomEvent.stop = () => { isCanceled = true; };\n\t\tcustomEvent.currentTarget = this;\n\n\t\tif (restParam.length >= 1) {\n\t\t\targ = arg.concat(restParam);\n\t\t}\n\n\t\tfor (i = 0; handlerList[i]; i++) {\n\t\t\thandlerList[i].apply(this, arg);\n\t\t}\n\n\t\treturn !isCanceled;\n\t}\n\t/**\n\t * Executed event just one time.\n\t * @ko 이벤트가 한번만 실행된다.\n\t * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n\t * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n\t * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n\t * @example\nclass Some extends eg.Component {\n  hi() {\n    alert(\"hi\");\n  }\n  thing() {\n    this.once(\"hi\", this.hi);\n  }\n}\n\nvar some = new Some();\nsome.thing();\nsome.trigger(\"hi\");\n// fire alert(\"hi\");\nsome.trigger(\"hi\");\n// Nothing happens\n\t */\n\tonce(eventName, handlerToAttach) {\n\t\tif (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n\t\t\tconst eventHash = eventName;\n\t\t\tlet i;\n\n\t\t\tfor (i in eventHash) {\n\t\t\t\tthis.once(i, eventHash[i]);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else if (typeof eventName === \"string\" &&\n\t\t\ttypeof handlerToAttach === \"function\") {\n\t\t\tconst self = this;\n\n\t\t\tthis.on(eventName, function listener(...arg) {\n\t\t\t\thandlerToAttach.apply(self, arg);\n\t\t\t\tself.off(eventName, listener);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks whether an event has been attached to a component.\n\t * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n\t * @param {String} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n\t * @return {Boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n\t * @example\nclass Some extends eg.Component {\n  some() {\n    this.hasOn(\"hi\");// check hi event.\n  }\n}\n\t */\n\thasOn(eventName) {\n\t\treturn !!this._eventHandler[eventName];\n\t}\n\n\t/**\n\t * Attaches an event to a component.\n\t * @ko 컴포넌트에 이벤트를 등록한다.\n\t * @param {eventName} eventName The name of the event to be attached <ko>등록할 이벤트의 이름</ko>\n\t * @param {Function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n\t * @return {eg.Component} An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n\t * @example\nclass Some extends eg.Component {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.on(\"hi\",this.hi); //attach event\n  }\n}\n*/\n\ton(eventName, handlerToAttach) {\n\t\tif (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n\t\t\tconst eventHash = eventName;\n\t\t\tlet name;\n\n\t\t\tfor (name in eventHash) {\n\t\t\t\tthis.on(name, eventHash[name]);\n\t\t\t}\n\t\t\treturn this;\n\t\t} else if (typeof eventName === \"string\" &&\n\t\t\ttypeof handlerToAttach === \"function\") {\n\t\t\tlet handlerList = this._eventHandler[eventName];\n\n\t\t\tif (isUndefined(handlerList)) {\n\t\t\t\tthis._eventHandler[eventName] = [];\n\t\t\t\thandlerList = this._eventHandler[eventName];\n\t\t\t}\n\n\t\t\thandlerList.push(handlerToAttach);\n\t\t}\n\n\t\treturn this;\n\t}\n\t/**\n\t * Detaches an event from the component.\n\t * @ko 컴포넌트에 등록된 이벤트를 해제한다\n\t * @param {eventName} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n\t * @param {Function} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n\t * @return {eg.Component} An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n\t * @example\nclass Some extends eg.Component {\n  hi() {\n    console.log(\"hi\");\n  }\n  some() {\n    this.off(\"hi\",this.hi); //detach event\n  }\n}\n\t */\n\toff(eventName, handlerToDetach) {\n\t\t// All event detach.\n\t\tif (isUndefined(eventName)) {\n\t\t\tthis._eventHandler = {};\n\t\t\treturn this;\n\t\t}\n\n\t\t// All handler of specific event detach.\n\t\tif (isUndefined(handlerToDetach)) {\n\t\t\tif (typeof eventName === \"string\") {\n\t\t\t\tthis._eventHandler[eventName] = undefined;\n\t\t\t\treturn this;\n\t\t\t} else {\n\t\t\t\tconst eventHash = eventName;\n\t\t\t\tlet name;\n\n\t\t\t\tfor (name in eventHash) {\n\t\t\t\t\tthis.off(name, eventHash[name]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\n\t\t// The handler of specific event detach.\n\t\tlet handlerList = this._eventHandler[eventName];\n\n\t\tif (handlerList) {\n\t\t\tlet k;\n\t\t\tlet handlerFunction;\n\n\t\t\tfor (k = 0; (handlerFunction = handlerList[k]) !== undefined; k++) {\n\t\t\t\tif (handlerFunction === handlerToDetach) {\n\t\t\t\t\thandlerList = handlerList.splice(k, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\nexport default Component;\n"]},"metadata":{},"sourceType":"module"}