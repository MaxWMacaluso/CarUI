{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: @scena/event-emitter\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/gesture.git\nversion: 1.0.4\n*/\nimport { isObject, findIndex } from '@daybrush/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n/**\n * Implement EventEmitter on object or component.\n */\n\n\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    this._events = {};\n  }\n  /**\n   * Add a listener to the registered event.\n   * @param - Name of the event to be added\n   * @param - listener function of the event to be added\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Add listener in \"a\" event\n   * emitter.on(\"a\", () => {\n   * });\n   * // Add listeners\n   * emitter.on({\n   *  a: () => {},\n   *  b: () => {},\n   * });\n   */\n\n\n  var __proto = EventEmitter.prototype;\n\n  __proto.on = function (eventName, listener) {\n    if (isObject(eventName)) {\n      for (var name in eventName) {\n        this.on(name, eventName[name]);\n      }\n    } else {\n      this._addEvent(eventName, listener, {});\n    }\n\n    return this;\n  };\n  /**\n   * Remove listeners registered in the event target.\n   * @param - Name of the event to be removed\n   * @param - listener function of the event to be removed\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Remove all listeners.\n   * emitter.off();\n   *\n   * // Remove all listeners in \"A\" event.\n   * emitter.off(\"a\");\n   *\n   *\n   * // Remove \"listener\" listener in \"a\" event.\n   * emitter.off(\"a\", listener);\n   */\n\n\n  __proto.off = function (eventName, listener) {\n    if (!eventName) {\n      this._events = {};\n    } else if (isObject(eventName)) {\n      for (var name in eventName) {\n        this.off(name);\n      }\n    } else if (!listener) {\n      this._events[eventName] = [];\n    } else {\n      var events = this._events[eventName];\n\n      if (events) {\n        var index = findIndex(events, function (e) {\n          return e.listener === listener;\n        });\n\n        if (index > -1) {\n          events.splice(index, 1);\n        }\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Add a disposable listener and Use promise to the registered event.\n   * @param - Name of the event to be added\n   * @param - disposable listener function of the event to be added\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Add a disposable listener in \"a\" event\n   * emitter.once(\"a\", () => {\n   * });\n   *\n   * // Use Promise\n   * emitter.once(\"a\").then(e => {\n   * });\n   */\n\n\n  __proto.once = function (eventName, listener) {\n    var _this = this;\n\n    if (listener) {\n      this._addEvent(eventName, listener, {\n        once: true\n      });\n    }\n\n    return new Promise(function (resolve) {\n      _this._addEvent(eventName, resolve, {\n        once: true\n      });\n    });\n  };\n  /**\n   * Fires an event to call listeners.\n   * @param - Event name\n   * @param - Event parameter\n   * @return If false, stop the event.\n   * @example\n   *\n   * import EventEmitter from \"@scena/event-emitter\";\n   *\n   *\n   * const emitter = new EventEmitter();\n   *\n   * emitter.on(\"a\", e => {\n   * });\n   *\n   *\n   * emitter.emit(\"a\", {\n   *   a: 1,\n   * });\n   */\n\n\n  __proto.emit = function (eventName, param) {\n    var _this = this;\n\n    if (param === void 0) {\n      param = {};\n    }\n\n    var events = this._events[eventName];\n\n    if (!eventName || !events) {\n      return true;\n    }\n\n    var isStop = false;\n    param.eventType = eventName;\n\n    param.stop = function () {\n      isStop = true;\n    };\n\n    param.currentTarget = this;\n\n    __spreadArrays(events).forEach(function (info) {\n      info.listener(param);\n\n      if (info.once) {\n        _this.off(eventName, info.listener);\n      }\n    });\n\n    return !isStop;\n  };\n  /**\n   * Fires an event to call listeners.\n   * @param - Event name\n   * @param - Event parameter\n   * @return If false, stop the event.\n   * @example\n   *\n   * import EventEmitter from \"@scena/event-emitter\";\n   *\n   *\n   * const emitter = new EventEmitter();\n   *\n   * emitter.on(\"a\", e => {\n   * });\n   *\n   *\n   * emitter.emit(\"a\", {\n   *   a: 1,\n   * });\n   */\n\n  /**\n  * Fires an event to call listeners.\n  * @param - Event name\n  * @param - Event parameter\n  * @return If false, stop the event.\n  * @example\n  *\n  * import EventEmitter from \"@scena/event-emitter\";\n  *\n  *\n  * const emitter = new EventEmitter();\n  *\n  * emitter.on(\"a\", e => {\n  * });\n  *\n  * // emit\n  * emitter.trigger(\"a\", {\n  *   a: 1,\n  * });\n  */\n\n\n  __proto.trigger = function (eventName, param) {\n    if (param === void 0) {\n      param = {};\n    }\n\n    return this.emit(eventName, param);\n  };\n\n  __proto._addEvent = function (eventName, listener, options) {\n    var events = this._events;\n    events[eventName] = events[eventName] || [];\n    var listeners = events[eventName];\n    listeners.push(__assign({\n      listener: listener\n    }, options));\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;","map":{"version":3,"sources":["../src/EventEmitter.ts"],"names":["isObject","eventName","events","index","findIndex","once","_this","isStop","param","__spreadArrays","info","listeners","listener"],"mappings":"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","sourcesContent":["import { findIndex, isObject } from \"@daybrush/utils\";\nimport { EventListener, EventHash, EventInfo, EventOptions, OnEvent, TargetParam } from \"./types\";\n\n/**\n * Implement EventEmitter on object or component.\n */\nclass EventEmitter<Events extends {} = { [key: string]: { [key: string]: any } }> {\n\n    private _events: {\n        [name: string]: EventInfo[],\n    } = {};\n    public on<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, listener: EventListener<Param, this>): this;\n    public on(events: EventHash<Events, this>): this;\n    /**\n     * Add a listener to the registered event.\n     * @param - Name of the event to be added\n     * @param - listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add listener in \"a\" event\n     * emitter.on(\"a\", () => {\n     * });\n     * // Add listeners\n     * emitter.on({\n     *  a: () => {},\n     *  b: () => {},\n     * });\n     */\n    public on(eventName: string | object, listener?: EventListener<Events[any], this>): this {\n        if (isObject(eventName)) {\n            for (const name in eventName) {\n                this.on<any>(name, eventName[name]);\n            }\n        } else {\n            this._addEvent(eventName, listener, {});\n        }\n        return this;\n    }\n    public off<Name extends keyof Events, Param = Events[Name]>(\n        eventName?: Name, listener?: EventListener<Param, this>): this;\n    public off(events: EventHash<Events, this>): this;\n    /**\n     * Remove listeners registered in the event target.\n     * @param - Name of the event to be removed\n     * @param - listener function of the event to be removed\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Remove all listeners.\n     * emitter.off();\n     *\n     * // Remove all listeners in \"A\" event.\n     * emitter.off(\"a\");\n     *\n     *\n     * // Remove \"listener\" listener in \"a\" event.\n     * emitter.off(\"a\", listener);\n     */\n    public off(eventName?: string | object, listener?: EventListener<Events[any], this>): this {\n        if (!eventName) {\n            this._events = {};\n        } else if(isObject(eventName)) {\n            for (const name in eventName) {\n                this.off<any>(name);\n            }\n        } else if (!listener) {\n            this._events[eventName] = [];\n        } else {\n            const events = this._events[eventName];\n\n            if (events) {\n                const index = findIndex(events, e => e.listener === listener);\n\n                if (index > -1) {\n                    events.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Add a disposable listener and Use promise to the registered event.\n     * @param - Name of the event to be added\n     * @param - disposable listener function of the event to be added\n     * @example\n     * import EventEmitter from \"@scena/event-emitter\";\n     * cosnt emitter = new EventEmitter();\n     *\n     * // Add a disposable listener in \"a\" event\n     * emitter.once(\"a\", () => {\n     * });\n     *\n     * // Use Promise\n     * emitter.once(\"a\").then(e => {\n     * });\n     */\n    public once<Name extends keyof Events & string, Param = Events[Name]>(\n        eventName: Name, listener?: EventListener<Param, this>): Promise<OnEvent<Param, this>> {\n        if (listener) {\n            this._addEvent(eventName, listener, { once: true });\n        }\n        return new Promise<OnEvent<Param, this>>(resolve => {\n            this._addEvent(eventName, resolve, { once: true });\n        });\n    }\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: {} extends Param ? Name : never): boolean;\n    public emit<Name extends keyof Events, Param = Events[Name]>(\n        eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public emit(eventName: string, param: TargetParam<any> = {}): boolean {\n        const events = this._events[eventName];\n\n        if (!eventName || !events) {\n            return true;\n        }\n        let isStop = false;\n\n        param.eventType = eventName;\n        param.stop = () => {\n            isStop = true;\n        };\n        param.currentTarget = this;\n\n\n        [...events].forEach(info => {\n            info.listener(param);\n            if (info.once) {\n                this.off<any>(eventName, info.listener);\n            }\n        });\n\n        return !isStop;\n    }\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends Param ? Name : never): boolean;\n    public trigger<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;\n    /**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     *\n     * emitter.emit(\"a\", {\n     *   a: 1,\n     * });\n     *//**\n     * Fires an event to call listeners.\n     * @param - Event name\n     * @param - Event parameter\n     * @return If false, stop the event.\n     * @example\n     *\n     * import EventEmitter from \"@scena/event-emitter\";\n     *\n     *\n     * const emitter = new EventEmitter();\n     *\n     * emitter.on(\"a\", e => {\n     * });\n     *\n     * // emit\n     * emitter.trigger(\"a\", {\n     *   a: 1,\n     * });\n     */\n    public trigger<Name extends keyof Events>(eventName: Name, param: TargetParam<any>= {}): boolean {\n        return this.emit<any>(eventName, param);\n    }\n\n    private _addEvent(eventName: string, listener: EventListener<Events[any], this>, options: Partial<EventOptions>) {\n        const events = this._events;\n\n        events[eventName] = events[eventName] || [];\n\n        const listeners = events[eventName];\n\n        listeners.push({ listener, ...options });\n    }\n}\n\nexport default EventEmitter;\n"]},"metadata":{},"sourceType":"module"}