{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-moveable\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/moveable/blob/master/packages/react-moveable\nversion: 0.22.6\n*/\nimport getAgent from '@egjs/agent';\nimport { prefixNames, ref, refs, withMethods, prefixCSS } from 'framework-utils';\nimport { isUndefined, isObject, hasClass, isString, isArray, splitBracket, splitUnit, splitSpace, find, findIndex, dot, addClass, removeClass, convertUnitSize, splitComma, getKeys } from '@daybrush/utils';\nimport { toMat, parse, parseMat } from 'css-to-mat';\nimport DragScroll from '@scena/dragscroll';\nimport { createElement, PureComponent } from 'react';\nimport Gesto from 'gesto';\nimport ChildrenDiffer from '@egjs/children-differ';\nimport styled from 'react-css-styled';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n\nfunction getSVGCursor(scale, degree) {\n  return \"data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\" + 32 * scale + \"px\\\" height=\\\"\" + 32 * scale + \"px\\\" viewBox=\\\"0 0 32 32\\\" ><path d=\\\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"1.2\\\" fill=\\\"black\\\" stroke=\\\"white\\\" style=\\\"transform:rotate(\" + degree + \"deg);transform-origin: 16px 16px\\\"></path></svg>\";\n}\n\nfunction getCursorCSS(degree) {\n  var x1 = getSVGCursor(1, degree);\n  var x2 = getSVGCursor(2, degree);\n  var degree45 = Math.round(degree / 45) * 45 % 180;\n  var defaultCursor = degree45 === 135 ? \"nwse-resize\" : degree45 === 45 ? \"nesw-resize\" : degree45 === 90 ? \"ew-resize\" : \"ns-resize\"; // 135\n  // tslint:disable-next-line: max-line-length\n\n  return \"cursor:\" + defaultCursor + \";cursor: url('\" + x1 + \"') 16 16, \" + defaultCursor + \";cursor: -webkit-image-set(url('\" + x1 + \"') 1x, url('\" + x2 + \"') 2x) 16 16, \" + defaultCursor + \";\";\n}\n\nvar agent = getAgent();\nvar IS_WEBKIT = agent.browser.webkit;\nvar PREFIX = \"moveable-\";\nvar MOVEABLE_CSS = \"\\n{\\n\\tposition: fixed;\\n\\twidth: 1px;\\n\\theight: 1px;\\n\\tleft: 0;\\n\\ttop: 0;\\n    z-index: 3000;\\n    --zoom: 1;\\n    --zoompx: 1px;\\n}\\n.control-box {\\n    z-index: 0;\\n}\\n.line, .control {\\n\\tleft: 0;\\n    top: 0;\\n    will-change: transform;\\n}\\n.control {\\n\\tposition: absolute;\\n\\twidth: 14px;\\n\\theight: 14px;\\n\\tborder-radius: 50%;\\n\\tborder: 2px solid #fff;\\n\\tbox-sizing: border-box;\\n\\tbackground: #4af;\\n\\tmargin-top: -7px;\\n    margin-left: -7px;\\n    width: calc(14 * var(--zoompx));\\n    height: calc(14 * var(--zoompx));\\n    margin-top: calc(-7 * var(--zoompx));\\n    margin-left: calc(-7 * var(--zoompx));\\n    border: calc(2 * var(--zoompx)) solid #fff;\\n    z-index: 10;\\n}\\n.padding {\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    width: 100px;\\n    height: 100px;\\n    transform-origin: 0 0;\\n}\\n.line {\\n\\tposition: absolute;\\n\\twidth: 1px;\\n    height: 1px;\\n    width: var(--zoompx);\\n    height: var(--zoompx);\\n\\tbackground: #4af;\\n\\ttransform-origin: 0px 50%;\\n}\\n.line.dashed {\\n    box-sizing: border-box;\\n    background: transparent;\\n}\\n.line.dashed.horizontal {\\n    border-top: 1px dashed #4af;\\n    border-top: var(--zoompx) dashed #4af;\\n}\\n.line.dashed.vertical {\\n    border-left: 1px dashed #4af;\\n    border-left: var(--zoompx) dashed #4af;\\n}\\n.line.dashed:before {\\n    position: absolute;\\n    content: attr(data-size);\\n    color: #4af;\\n    font-size: 12px;\\n    font-weight: bold;\\n}\\n.line.dashed.horizontal:before, .line.gap.horizontal:before {\\n    left: 50%;\\n    transform: translateX(-50%);\\n    bottom: 5px;\\n}\\n.line.dashed.vertical:before, .line.gap.vertical:before {\\n    top: 50%;\\n    transform: translateY(-50%);\\n    left: 5px;\\n}\\n.line.rotation-line {\\n\\theight: 40px;\\n    width: 1px;\\n    transform-origin: 50% calc(100% - 0.5px);\\n    top: -40px;\\n    width: var(--zoompx);\\n    height: calc(40 * var(--zoompx));\\n    top: calc(-40 * var(--zoompx));\\n    transform-origin: 50% calc(100% - 0.5 * var(--zoompx));\\n}\\n.line.rotation-line .control {\\n\\tborder-color: #4af;\\n\\tbackground:#fff;\\n    cursor: alias;\\n    left: 50%;\\n}\\n.line.vertical {\\n    transform: translateX(-50%);\\n}\\n.line.horizontal {\\n    transform: translateY(-50%);\\n}\\n.line.vertical.bold {\\n    width: 2px;\\n    width: calc(2 * var(--zoompx));\\n}\\n.line.horizontal.bold {\\n    height: 2px;\\n    height: calc(2 * var(--zoompx));\\n}\\n\\n.line.gap {\\n    background: #f55;\\n}\\n.line.gap:before {\\n    position: absolute;\\n    content: attr(data-size);\\n    color: #f55;\\n    font-size: 12px;\\n    font-weight: bold;\\n}\\n.control.origin {\\n\\tborder-color: #f55;\\n\\tbackground: #fff;\\n\\twidth: 12px;\\n\\theight: 12px;\\n\\tmargin-top: -6px;\\n    margin-left: -6px;\\n    width: calc(12 * var(--zoompx));\\n    height: calc(12 * var(--zoompx));\\n    margin-top: calc(-6 * var(--zoompx));\\n    margin-left: calc(-6 * var(--zoompx));\\n\\tpointer-events: none;\\n}\\n\" + [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(function (degree) {\n  return \"\\n.direction[data-rotation=\\\"\" + degree + \"\\\"] {\\n\\t\" + getCursorCSS(degree) + \"\\n}\\n\";\n}).join(\"\\n\") + \"\\n.group {\\n    z-index: -1;\\n}\\n.area {\\n    position: absolute;\\n}\\n.area-pieces {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    display: none;\\n}\\n.area.avoid, .area.pass {\\n    pointer-events: none;\\n}\\n.area.avoid+.area-pieces {\\n    display: block;\\n}\\n.area-piece {\\n    position: absolute;\\n}\\n\\n\" + (IS_WEBKIT ? \":global svg *:before {\\n\\tcontent:\\\"\\\";\\n\\ttransform-origin: inherit;\\n}\" : \"\") + \"\\n\";\nvar NEARBY_POS = [[0, 1, 2], [1, 0, 3], [2, 0, 3], [3, 1, 2]];\nvar TINY_NUM = 0.0000001;\nvar MIN_SCALE = 0.000000001;\nvar MAX_NUM = Math.pow(10, 10);\nvar MIN_NUM = -MAX_NUM;\nvar DIRECTIONS = [\"nw\", \"ne\", \"sw\", \"se\", \"n\", \"w\", \"s\", \"e\"];\nvar DIRECTION_INDEXES = {\n  n: [0, 1],\n  s: [2, 3],\n  w: [2, 0],\n  e: [1, 3],\n  nw: [0],\n  ne: [1],\n  sw: [2],\n  se: [3]\n};\nvar DIRECTION_ROTATIONS = {\n  n: 0,\n  s: 180,\n  w: 270,\n  e: 90,\n  nw: 315,\n  ne: 45,\n  sw: 225,\n  se: 135\n};\nvar MOVEABLE_METHODS = [\"isMoveableElement\", \"updateRect\", \"updateTarget\", \"destroy\", \"dragStart\", \"isInside\", \"hitTest\", \"setState\", \"getRect\", \"request\", \"isDragging\"];\n\nfunction add(matrix, inverseMatrix, startIndex, fromIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    matrix[x] += matrix[fromX] * k;\n    inverseMatrix[x] += inverseMatrix[fromX] * k;\n  }\n}\n\nfunction swap(matrix, inverseMatrix, startIndex, fromIndex, n) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    var v = matrix[x];\n    var iv = inverseMatrix[x];\n    matrix[x] = matrix[fromX];\n    matrix[fromX] = v;\n    inverseMatrix[x] = inverseMatrix[fromX];\n    inverseMatrix[fromX] = iv;\n  }\n}\n\nfunction divide(matrix, inverseMatrix, startIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    matrix[x] /= k;\n    inverseMatrix[x] /= k;\n  }\n}\n\nfunction ignoreDimension(matrix, m, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n\n  for (var i = 0; i < n; ++i) {\n    newMatrix[i * n + m - 1] = 0;\n    newMatrix[(m - 1) * n + i] = 0;\n  }\n\n  newMatrix[(m - 1) * (n + 1)] = 1;\n  return newMatrix;\n}\n\nfunction invert(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n  var inverseMatrix = createIdentityMatrix(n);\n\n  for (var i = 0; i < n; ++i) {\n    // diagonal\n    var identityIndex = n * i + i;\n\n    if (newMatrix[identityIndex] === 0) {\n      for (var j = i + 1; j < n; ++j) {\n        if (newMatrix[n * i + j]) {\n          swap(newMatrix, inverseMatrix, i, j, n);\n          break;\n        }\n      }\n    }\n\n    if (newMatrix[identityIndex]) {\n      divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n    } else {\n      // no inverse matrix\n      return [];\n    }\n\n    for (var j = 0; j < n; ++j) {\n      var targetStartIndex = j;\n      var targetIndex = j + i * n;\n      var target = newMatrix[targetIndex];\n\n      if (target === 0 || i === j) {\n        continue;\n      }\n\n      add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n    }\n  }\n\n  return inverseMatrix;\n}\n\nfunction transpose(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = [];\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      newMatrix[j * n + i] = matrix[n * i + j];\n    }\n  }\n\n  return newMatrix;\n}\n\nfunction getRad(pos1, pos2) {\n  var distX = pos2[0] - pos1[0];\n  var distY = pos2[1] - pos1[1];\n  var rad = Math.atan2(distY, distX);\n  return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nfunction getOrigin(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var originMatrix = [];\n  var w = matrix[n * n - 1];\n\n  for (var i = 0; i < n - 1; ++i) {\n    originMatrix[i] = matrix[n * (n - 1) + i] / w;\n  }\n\n  originMatrix[n - 1] = 0;\n  return originMatrix;\n}\n\nfunction fromTranslation(pos, n) {\n  var newMatrix = createIdentityMatrix(n);\n\n  for (var i = 0; i < n - 1; ++i) {\n    newMatrix[n * (n - 1) + i] = pos[i] || 0;\n  }\n\n  return newMatrix;\n}\n\nfunction convertPositionMatrix(matrix, n) {\n  var newMatrix = matrix.slice();\n\n  for (var i = matrix.length; i < n - 1; ++i) {\n    newMatrix[i] = 0;\n  }\n\n  newMatrix[n - 1] = 1;\n  return newMatrix;\n}\n\nfunction convertDimension(matrix, n, m) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  } // n < m\n\n\n  if (n === m) {\n    return matrix;\n  }\n\n  var newMatrix = createIdentityMatrix(m);\n  var length = Math.min(n, m);\n\n  for (var i = 0; i < length - 1; ++i) {\n    for (var j = 0; j < length - 1; ++j) {\n      newMatrix[i * m + j] = matrix[i * n + j];\n    }\n\n    newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n    newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n  }\n\n  newMatrix[m * m - 1] = matrix[n * n - 1];\n  return newMatrix;\n}\n\nfunction multiplies(n) {\n  var matrixes = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    matrixes[_i - 1] = arguments[_i];\n  }\n\n  var m = createIdentityMatrix(n);\n  matrixes.forEach(function (matrix) {\n    m = multiply(m, matrix, n);\n  });\n  return m;\n}\n\nfunction multiply(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = []; // 1 y: n\n  // 1 x: m\n  // 2 x: m\n  // 2 y: k\n  // n * m X m * k\n\n  var m = matrix.length / n;\n  var k = matrix2.length / m;\n\n  if (!m) {\n    return matrix2;\n  } else if (!k) {\n    return matrix;\n  }\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < k; ++j) {\n      newMatrix[j * n + i] = 0;\n\n      for (var l = 0; l < m; ++l) {\n        // m1 x: m(l), y: n(i)\n        // m2 x: k(j):  y: m(l)\n        // nw x: n(i), y: k(j)\n        newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n      }\n    }\n  } // n * k\n\n\n  return newMatrix;\n}\n\nfunction average() {\n  var nums = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nums[_i] = arguments[_i];\n  }\n\n  var length = nums.length;\n  var total = 0;\n\n  for (var i = length - 1; i >= 0; --i) {\n    total += nums[i];\n  }\n\n  return length ? total / length : 0;\n}\n\nfunction plus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] + pos2[i];\n  }\n\n  return nextPos;\n}\n\nfunction minus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] - pos2[i];\n  }\n\n  return nextPos;\n}\n\nfunction convertCSStoMatrix(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 6;\n  }\n\n  if (is2d) {\n    return [a[0], a[1], 0, a[2], a[3], 0, a[4], a[5], 1];\n  }\n\n  return a;\n}\n\nfunction convertMatrixtoCSS(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 9;\n  }\n\n  if (is2d) {\n    return [a[0], a[1], a[3], a[4], a[6], a[7]];\n  }\n\n  return a;\n}\n\nfunction caculate(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = matrix2.length;\n  }\n\n  var result = multiply(matrix, matrix2, n);\n  var k = result[n - 1];\n  return result.map(function (v) {\n    return v / k;\n  });\n}\n\nfunction rotate(pos, rad) {\n  return caculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));\n}\n\nfunction createRotateMatrix(rad, n) {\n  var cos = Math.cos(rad);\n  var sin = Math.sin(rad);\n  var m = createIdentityMatrix(n); // cos -sin\n  // sin cos\n\n  m[0] = cos;\n  m[1] = sin;\n  m[n] = -sin;\n  m[n + 1] = cos;\n  return m;\n}\n\nfunction createIdentityMatrix(n) {\n  var length = n * n;\n  var matrix = [];\n\n  for (var i = 0; i < length; ++i) {\n    matrix[i] = i % (n + 1) ? 0 : 1;\n  }\n\n  return matrix;\n}\n\nfunction createScaleMatrix(scale, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(scale.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[(n + 1) * i] = scale[i];\n  }\n\n  return m;\n}\n\nfunction createOriginMatrix(origin, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(origin.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[n * (n - 1) + i] = origin[i];\n  }\n\n  return m;\n}\n\nfunction createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {\n  var x0 = pos0[0],\n      y0 = pos0[1];\n  var x1 = pos1[0],\n      y1 = pos1[1];\n  var x2 = pos2[0],\n      y2 = pos2[1];\n  var x3 = pos3[0],\n      y3 = pos3[1];\n  var u0 = nextPos0[0],\n      v0 = nextPos0[1];\n  var u1 = nextPos1[0],\n      v1 = nextPos1[1];\n  var u2 = nextPos2[0],\n      v2 = nextPos2[1];\n  var u3 = nextPos3[0],\n      v3 = nextPos3[1];\n  var matrix = [x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3, -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3];\n  var inverseMatrix = invert(matrix, 8);\n\n  if (!inverseMatrix.length) {\n    return [];\n  }\n\n  var h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n  h[8] = 1;\n  return convertDimension(transpose(h), 3, 4);\n}\n\nfunction multiply2(pos1, pos2) {\n  return [pos1[0] * pos2[0], pos1[1] * pos2[1]];\n}\n\nfunction prefix() {\n  var classNames = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    classNames[_i] = arguments[_i];\n  }\n\n  return prefixNames.apply(void 0, __spreadArrays([PREFIX], classNames));\n}\n\nfunction getTransformMatrix(transform) {\n  if (!transform || transform === \"none\") {\n    return [1, 0, 0, 1, 0, 0];\n  }\n\n  if (isObject(transform)) {\n    return transform;\n  }\n\n  var value = splitBracket(transform).value;\n  return value.split(/s*,\\s*/g).map(function (v) {\n    return parseFloat(v);\n  });\n}\n\nfunction getAbsoluteMatrix(matrix, n, origin) {\n  return multiplies(n, createOriginMatrix(origin, n), matrix, createOriginMatrix(origin.map(function (a) {\n    return -a;\n  }), n));\n}\n\nfunction measureSVGSize(el, unit, isHorizontal) {\n  if (unit === \"%\") {\n    var viewBox = getSVGViewBox(el.ownerSVGElement);\n    return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n  }\n\n  return 1;\n}\n\nfunction getBeforeTransformOrigin(el) {\n  var relativeOrigin = getTransformOrigin(getComputedStyle$1(el, \":before\"));\n  return relativeOrigin.map(function (o, i) {\n    var _a = splitUnit(o),\n        value = _a.value,\n        unit = _a.unit;\n\n    return value * measureSVGSize(el, unit, i === 0);\n  });\n}\n\nfunction getTransformOrigin(style) {\n  var transformOrigin = style.transformOrigin;\n  return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\n\nfunction getOffsetInfo(el, lastParent, isParent) {\n  var body = document.body;\n  var target = !el || isParent ? el : el.parentElement;\n  var isEnd = false;\n  var position = \"relative\";\n\n  while (target && target !== body) {\n    if (lastParent === target) {\n      isEnd = true;\n    }\n\n    var style = getComputedStyle$1(target);\n    var transform = style.transform;\n    position = style.position;\n\n    if (position !== \"static\" || transform && transform !== \"none\") {\n      break;\n    }\n\n    target = target.parentElement;\n    position = \"relative\";\n  }\n\n  return {\n    isStatic: position === \"static\",\n    isEnd: isEnd || !target || target === body,\n    offsetParent: target || body\n  };\n}\n\nfunction getOffsetPosInfo(el, container, style, isFixed) {\n  var _a;\n\n  var tagName = el.tagName.toLowerCase();\n  var offsetLeft = el.offsetLeft;\n  var offsetTop = el.offsetTop;\n\n  if (isFixed) {\n    var containerClientRect = (container || document.documentElement).getBoundingClientRect();\n    offsetLeft -= containerClientRect.left;\n    offsetTop -= containerClientRect.top;\n  } // svg\n\n\n  var isSVG = isUndefined(offsetLeft);\n  var hasOffset = !isSVG;\n  var origin;\n  var targetOrigin; // inner svg element\n\n  if (!hasOffset && tagName !== \"svg\") {\n    origin = IS_WEBKIT ? getBeforeTransformOrigin(el) : getTransformOrigin(style).map(function (pos) {\n      return parseFloat(pos);\n    });\n    targetOrigin = origin.slice();\n    hasOffset = true;\n\n    if (tagName === \"g\") {\n      offsetLeft = 0;\n      offsetTop = 0;\n    } else {\n      _a = getSVGGraphicsOffset(el, origin), offsetLeft = _a[0], offsetTop = _a[1], origin[0] = _a[2], origin[1] = _a[3];\n    }\n  } else {\n    origin = getTransformOrigin(style).map(function (pos) {\n      return parseFloat(pos);\n    });\n    targetOrigin = origin.slice();\n  }\n\n  return {\n    isSVG: isSVG,\n    hasOffset: hasOffset,\n    offset: [offsetLeft, offsetTop],\n    origin: origin,\n    targetOrigin: targetOrigin\n  };\n}\n\nfunction getMatrixStackInfo(target, container) {\n  var el = target;\n  var matrixes = [];\n  var isEnd = false;\n  var is3d = false;\n  var n = 3;\n  var transformOrigin;\n  var targetTransformOrigin;\n  var targetMatrix;\n  var offsetContainer = getOffsetInfo(container, container, true).offsetParent; // if (prevMatrix) {\n  //     isEnd = target === container;\n  //     if (prevMatrix.length > 10) {\n  //         is3d = true;\n  //         n = 4;\n  //     }\n  //     container = target.parentElement;\n  // }\n\n  while (el && !isEnd) {\n    var style = getComputedStyle$1(el);\n    var tagName = el.tagName.toLowerCase();\n    var position = style.position;\n    var isFixed = position === \"fixed\";\n    var matrix = convertCSStoMatrix(getTransformMatrix(style.transform)); // convert 3 to 4\n\n    var length = matrix.length;\n\n    if (!is3d && length === 16) {\n      is3d = true;\n      n = 4;\n      var matrixesLength = matrixes.length;\n\n      for (var i = 0; i < matrixesLength; ++i) {\n        matrixes[i] = convertDimension(matrixes[i], 3, 4);\n      }\n    }\n\n    if (is3d && length === 9) {\n      matrix = convertDimension(matrix, 3, 4);\n    }\n\n    var _a = getOffsetPosInfo(el, container, style, isFixed),\n        hasOffset = _a.hasOffset,\n        isSVG = _a.isSVG,\n        origin = _a.origin,\n        targetOrigin = _a.targetOrigin,\n        offsetPos = _a.offset;\n\n    var offsetLeft = offsetPos[0],\n        offsetTop = offsetPos[1];\n\n    if (tagName === \"svg\" && targetMatrix) {\n      matrixes.push( // scale matrix for svg's SVGElements.\n      getSVGMatrix(el, n), createIdentityMatrix(n));\n    }\n\n    var _b = getOffsetInfo(el, container),\n        offsetParent = _b.offsetParent,\n        isOffsetEnd = _b.isEnd,\n        isStatic = _b.isStatic;\n\n    if (IS_WEBKIT && hasOffset && !isSVG && isStatic && (position === \"relative\" || position === \"static\")) {\n      offsetLeft -= offsetParent.offsetLeft;\n      offsetTop -= offsetParent.offsetTop;\n      isEnd = isEnd || isOffsetEnd;\n    }\n\n    var parentClientLeft = 0;\n    var parentClientTop = 0;\n\n    if (hasOffset && offsetContainer !== offsetParent) {\n      // border\n      parentClientLeft = offsetParent.clientLeft;\n      parentClientTop = offsetParent.clientTop;\n    }\n\n    matrixes.push( // absolute matrix\n    getAbsoluteMatrix(matrix, n, origin), // offset matrix (offsetPos + clientPos(border))\n    createOriginMatrix(hasOffset ? [offsetLeft - el.scrollLeft + parentClientLeft, offsetTop - el.scrollTop + parentClientTop] : [el, origin], n));\n\n    if (!targetMatrix) {\n      targetMatrix = matrix;\n    }\n\n    if (!transformOrigin) {\n      transformOrigin = origin;\n    }\n\n    if (!targetTransformOrigin) {\n      targetTransformOrigin = targetOrigin;\n    }\n\n    if (isEnd || isFixed) {\n      break;\n    } else {\n      el = offsetParent;\n      isEnd = isOffsetEnd;\n    }\n  }\n\n  if (!targetMatrix) {\n    targetMatrix = createIdentityMatrix(n);\n  }\n\n  if (!transformOrigin) {\n    transformOrigin = [0, 0];\n  }\n\n  if (!targetTransformOrigin) {\n    targetTransformOrigin = [0, 0];\n  }\n\n  return {\n    offsetContainer: offsetContainer,\n    matrixes: matrixes,\n    targetMatrix: targetMatrix,\n    transformOrigin: transformOrigin,\n    targetOrigin: targetTransformOrigin,\n    is3d: is3d\n  };\n}\n\nfunction cacaulateElementInfo(target, container, rootContainer, isAbsolute3d, state) {\n  var _a;\n\n  if (rootContainer === void 0) {\n    rootContainer = container;\n  } // const prevMatrix = state ? state.beforeMatrix : undefined;\n  // const prevRootMatrix = state ? state.rootMatrix : undefined;\n  // const prevN = state ? (state.is3d ? 4 : 3) : undefined;\n\n\n  var width = 0;\n  var height = 0;\n  var rotation = 0;\n  var allResult = {};\n\n  if (state) {\n    width = state.width;\n    height = state.height;\n  } else if (target) {\n    var style = getComputedStyle$1(target);\n    width = target.offsetWidth;\n    height = target.offsetHeight;\n\n    if (isUndefined(width)) {\n      _a = getSize(target, style, true), width = _a[0], height = _a[1];\n    }\n  }\n\n  if (target) {\n    var result = caculateMatrixStack(target, container, rootContainer, isAbsolute3d);\n    var position = caculateMoveablePosition(result.allMatrix, result.transformOrigin, width, height);\n    allResult = __assign(__assign({}, result), position);\n    rotation = getRotationRad([position.pos1, position.pos2], position.direction);\n  }\n\n  var n = isAbsolute3d ? 4 : 3;\n  return __assign({\n    width: width,\n    height: height,\n    rotation: rotation,\n    // rootMatrix: number[];\n    // beforeMatrix: number[];\n    // offsetMatrix: number[];\n    // allMatrix: number[];\n    // targetMatrix: number[];\n    // targetTransform: string;\n    // transformOrigin: number[];\n    // targetOrigin: number[];\n    // is3d: boolean;\n    rootMatrix: createIdentityMatrix(n),\n    beforeMatrix: createIdentityMatrix(n),\n    offsetMatrix: createIdentityMatrix(n),\n    allMatrix: createIdentityMatrix(n),\n    targetMatrix: createIdentityMatrix(n),\n    targetTransform: \"\",\n    transformOrigin: [0, 0],\n    targetOrigin: [0, 0],\n    is3d: !!isAbsolute3d,\n    // left: number;\n    // top: number;\n    // right: number;\n    // bottom: number;\n    // origin: number[];\n    // pos1: number[];\n    // pos2: number[];\n    // pos3: number[];\n    // pos4: number[];\n    // direction: 1 | -1;\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    origin: [0, 0],\n    pos1: [0, 0],\n    pos2: [0, 0],\n    pos3: [0, 0],\n    pos4: [0, 0],\n    direction: 1\n  }, allResult);\n}\n\nfunction getElementInfo(target, container, rootContainer) {\n  if (rootContainer === void 0) {\n    rootContainer = container;\n  }\n\n  return cacaulateElementInfo(target, container, rootContainer, true);\n}\n\nfunction caculateMatrixStack(target, container, rootContainer, isAbsolute3d) {\n  if (rootContainer === void 0) {\n    rootContainer = container;\n  }\n\n  var _a = getMatrixStackInfo(target, container),\n      matrixes = _a.matrixes,\n      is3d = _a.is3d,\n      prevTargetMatrix = _a.targetMatrix,\n      transformOrigin = _a.transformOrigin,\n      targetOrigin = _a.targetOrigin,\n      offsetContainer = _a.offsetContainer; // prevMatrix\n\n\n  var _b = getMatrixStackInfo(offsetContainer, rootContainer),\n      rootMatrixes = _b.matrixes,\n      isRoot3d = _b.is3d; // prevRootMatrix\n  // if (rootContainer === document.body) {\n  //     console.log(offsetContainer, rootContainer, rootMatrixes);\n  // }\n\n\n  var isNext3d = isAbsolute3d || isRoot3d || is3d;\n  var n = isNext3d ? 4 : 3;\n  var isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\n  var originalContainer = container || document.body;\n  var targetMatrix = prevTargetMatrix; // let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n  // let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);\n  // let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n\n  var allMatrix = createIdentityMatrix(n);\n  var rootMatrix = createIdentityMatrix(n);\n  var beforeMatrix = createIdentityMatrix(n);\n  var offsetMatrix = createIdentityMatrix(n);\n  var length = matrixes.length;\n  var endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;\n  rootMatrixes.reverse();\n  matrixes.reverse();\n\n  if (!is3d && isNext3d) {\n    targetMatrix = convertDimension(targetMatrix, 3, 4);\n    matrixes.forEach(function (matrix, i) {\n      matrixes[i] = convertDimension(matrix, 3, 4);\n    });\n  }\n\n  if (!isRoot3d && isNext3d) {\n    rootMatrixes.forEach(function (matrix, i) {\n      rootMatrixes[i] = convertDimension(matrix, 3, 4);\n    });\n  } // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\n  // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\n  // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\n  // if (!prevRootMatrix) {\n\n\n  rootMatrixes.forEach(function (matrix) {\n    rootMatrix = multiply(rootMatrix, matrix, n);\n  }); // }\n\n  matrixes.forEach(function (matrix, i) {\n    var _a;\n\n    if (length - 2 === i) {\n      // length - 3\n      beforeMatrix = allMatrix.slice();\n    }\n\n    if (length - 1 === i) {\n      // length - 2\n      offsetMatrix = allMatrix.slice();\n    } // caculate for SVGElement\n\n\n    if (isObject(matrix[n * (n - 1)])) {\n      _a = getSVGOffset(matrix[n * (n - 1)], endContainer, n, matrix[n * (n - 1) + 1], allMatrix, matrixes[i + 1]), matrix[n * (n - 1)] = _a[0], matrix[n * (n - 1) + 1] = _a[1];\n    }\n\n    allMatrix = multiply(allMatrix, matrix, n);\n  });\n  var isMatrix3d = !isSVGGraphicElement && is3d;\n\n  if (!targetMatrix) {\n    targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);\n  }\n\n  var targetTransform = makeMatrixCSS(isSVGGraphicElement && targetMatrix.length === 16 ? convertDimension(targetMatrix, 4, 3) : targetMatrix, isMatrix3d);\n  rootMatrix = ignoreDimension(rootMatrix, n, n);\n  return {\n    rootMatrix: rootMatrix,\n    beforeMatrix: beforeMatrix,\n    offsetMatrix: offsetMatrix,\n    allMatrix: allMatrix,\n    targetMatrix: targetMatrix,\n    targetTransform: targetTransform,\n    transformOrigin: transformOrigin,\n    targetOrigin: targetOrigin,\n    is3d: isNext3d\n  };\n}\n\nfunction makeMatrixCSS(matrix, is3d) {\n  if (is3d === void 0) {\n    is3d = matrix.length > 9;\n  }\n\n  return (is3d ? \"matrix3d\" : \"matrix\") + \"(\" + convertMatrixtoCSS(matrix, !is3d).join(\",\") + \")\";\n}\n\nfunction getSVGViewBox(el) {\n  var clientWidth = el.clientWidth;\n  var clientHeight = el.clientHeight;\n  var viewBox = el.viewBox;\n  var baseVal = viewBox && viewBox.baseVal || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  return {\n    x: baseVal.x,\n    y: baseVal.y,\n    width: baseVal.width || clientWidth,\n    height: baseVal.height || clientHeight\n  };\n}\n\nfunction getSVGMatrix(el, n) {\n  var clientWidth = el.clientWidth;\n  var clientHeight = el.clientHeight;\n\n  var _a = getSVGViewBox(el),\n      viewBoxWidth = _a.width,\n      viewBoxHeight = _a.height;\n\n  var scaleX = clientWidth / viewBoxWidth;\n  var scaleY = clientHeight / viewBoxHeight;\n  var preserveAspectRatio = el.preserveAspectRatio.baseVal; // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n\n  var align = preserveAspectRatio.align; // 1 : meet 2: slice\n\n  var meetOrSlice = preserveAspectRatio.meetOrSlice;\n  var svgOrigin = [0, 0];\n  var scale = [scaleX, scaleY];\n  var translate = [0, 0];\n\n  if (align !== 1) {\n    var xAlign = (align - 2) % 3;\n    var yAlign = Math.floor((align - 2) / 3);\n    svgOrigin[0] = viewBoxWidth * xAlign / 2;\n    svgOrigin[1] = viewBoxHeight * yAlign / 2;\n    var scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n    scale[0] = scaleDimension;\n    scale[1] = scaleDimension;\n    translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n    translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n  }\n\n  var scaleMatrix = createScaleMatrix(scale, n);\n  scaleMatrix[n * (n - 1)] = translate[0], scaleMatrix[n * (n - 1) + 1] = translate[1];\n  return getAbsoluteMatrix(scaleMatrix, n, svgOrigin);\n}\n\nfunction getSVGGraphicsOffset(el, origin) {\n  if (!el.getBBox) {\n    return [0, 0];\n  }\n\n  var bbox = el.getBBox();\n  var viewBox = getSVGViewBox(el.ownerSVGElement);\n  var left = bbox.x - viewBox.x;\n  var top = bbox.y - viewBox.y;\n  return [left, top, origin[0] - left, origin[1] - top];\n}\n\nfunction caculatePosition(matrix, pos, n) {\n  return caculate(matrix, convertPositionMatrix(pos, n), n);\n}\n\nfunction caculatePoses(matrix, width, height, n) {\n  return [[0, 0], [width, 0], [0, height], [width, height]].map(function (pos) {\n    return caculatePosition(matrix, pos, n);\n  });\n}\n\nfunction getRect(poses) {\n  var posesX = poses.map(function (pos) {\n    return pos[0];\n  });\n  var posesY = poses.map(function (pos) {\n    return pos[1];\n  });\n  var left = Math.min.apply(Math, posesX);\n  var top = Math.min.apply(Math, posesY);\n  var right = Math.max.apply(Math, posesX);\n  var bottom = Math.max.apply(Math, posesY);\n  var rectWidth = right - left;\n  var rectHeight = bottom - top;\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    width: rectWidth,\n    height: rectHeight\n  };\n}\n\nfunction caculateRect(matrix, width, height, n) {\n  var poses = caculatePoses(matrix, width, height, n);\n  return getRect(poses);\n}\n\nfunction getSVGOffset(el, container, n, origin, beforeMatrix, absoluteMatrix) {\n  var _a;\n\n  var _b = getSize(el, undefined, true),\n      width = _b[0],\n      height = _b[1];\n\n  var containerClientRect = container.getBoundingClientRect();\n  var rect = el.getBoundingClientRect();\n  var rectLeft = rect.left - containerClientRect.left + container.scrollLeft - (container.clientLeft || 0);\n  var rectTop = rect.top - containerClientRect.top + container.scrollTop - (container.clientTop || 0);\n  var rectWidth = rect.width;\n  var rectHeight = rect.height;\n  var mat = multiplies(n, beforeMatrix, absoluteMatrix);\n\n  var _c = caculateRect(mat, width, height, n),\n      prevLeft = _c.left,\n      prevTop = _c.top,\n      prevWidth = _c.width,\n      prevHeight = _c.height;\n\n  var posOrigin = caculatePosition(mat, origin, n);\n  var prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n  var rectOrigin = [rectLeft + prevOrigin[0] * rectWidth / prevWidth, rectTop + prevOrigin[1] * rectHeight / prevHeight];\n  var offset = [0, 0];\n  var count = 0;\n\n  while (++count < 10) {\n    var inverseBeforeMatrix = invert(beforeMatrix, n);\n    _a = minus(caculatePosition(inverseBeforeMatrix, rectOrigin, n), caculatePosition(inverseBeforeMatrix, posOrigin, n)), offset[0] = _a[0], offset[1] = _a[1];\n    var mat2 = multiplies(n, beforeMatrix, createOriginMatrix(offset, n), absoluteMatrix);\n\n    var _d = caculateRect(mat2, width, height, n),\n        nextLeft = _d.left,\n        nextTop = _d.top;\n\n    var distLeft = nextLeft - rectLeft;\n    var distTop = nextTop - rectTop;\n\n    if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {\n      break;\n    }\n\n    rectOrigin[0] -= distLeft;\n    rectOrigin[1] -= distTop;\n  }\n\n  return offset.map(function (p) {\n    return Math.round(p);\n  });\n}\n\nfunction caculateMoveablePosition(matrix, origin, width, height) {\n  var is3d = matrix.length === 16;\n  var n = is3d ? 4 : 3;\n\n  var _a = caculatePoses(matrix, width, height, n),\n      _b = _a[0],\n      x1 = _b[0],\n      y1 = _b[1],\n      _c = _a[1],\n      x2 = _c[0],\n      y2 = _c[1],\n      _d = _a[2],\n      x3 = _d[0],\n      y3 = _d[1],\n      _e = _a[3],\n      x4 = _e[0],\n      y4 = _e[1];\n\n  var _f = caculatePosition(matrix, origin, n),\n      originX = _f[0],\n      originY = _f[1];\n\n  var left = Math.min(x1, x2, x3, x4);\n  var top = Math.min(y1, y2, y3, y4);\n  var right = Math.max(x1, x2, x3, x4);\n  var bottom = Math.max(y1, y2, y3, y4);\n  x1 = x1 - left || 0;\n  x2 = x2 - left || 0;\n  x3 = x3 - left || 0;\n  x4 = x4 - left || 0;\n  y1 = y1 - top || 0;\n  y2 = y2 - top || 0;\n  y3 = y3 - top || 0;\n  y4 = y4 - top || 0;\n  originX = originX - left || 0;\n  originY = originY - top || 0;\n  var center = [(x1 + x2 + x3 + x4) / 4, (y1 + y2 + y3 + y4) / 4];\n  var pos1Rad = getRad(center, [x1, y1]);\n  var pos2Rad = getRad(center, [x2, y2]);\n  var direction = pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI || pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI ? 1 : -1;\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    origin: [originX, originY],\n    pos1: [x1, y1],\n    pos2: [x2, y2],\n    pos3: [x3, y3],\n    pos4: [x4, y4],\n    direction: direction\n  };\n}\n\nfunction getDistSize(vec) {\n  return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\n\nfunction getDiagonalSize(pos1, pos2) {\n  return getDistSize([pos2[0] - pos1[0], pos2[1] - pos1[1]]);\n}\n\nfunction getLineStyle(pos1, pos2, rad) {\n  if (rad === void 0) {\n    rad = getRad(pos1, pos2);\n  }\n\n  var width = getDiagonalSize(pos1, pos2);\n  return {\n    transform: \"translateY(-50%) translate(\" + pos1[0] + \"px, \" + pos1[1] + \"px) rotate(\" + rad + \"rad)\",\n    width: width + \"px\"\n  };\n}\n\nfunction getControlTransform(rotation) {\n  var poses = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    poses[_i - 1] = arguments[_i];\n  }\n\n  var length = poses.length;\n  var x = poses.reduce(function (prev, pos) {\n    return prev + pos[0];\n  }, 0) / length;\n  var y = poses.reduce(function (prev, pos) {\n    return prev + pos[1];\n  }, 0) / length;\n  return {\n    transform: \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"rad)\"\n  };\n}\n\nfunction getCSSSize(target) {\n  var style = window.getComputedStyle(target);\n  return [parseFloat(style.width), parseFloat(style.height)];\n}\n\nfunction getSize(target, style, isOffset, isBoxSizing) {\n  if (style === void 0) {\n    style = window.getComputedStyle(target);\n  }\n\n  if (isBoxSizing === void 0) {\n    isBoxSizing = isOffset || style.boxSizing === \"border-box\";\n  }\n\n  var width = target.offsetWidth;\n  var height = target.offsetHeight;\n  var hasOffset = !isUndefined(width);\n\n  if ((isOffset || isBoxSizing) && hasOffset) {\n    return [width, height];\n  }\n\n  if (!hasOffset && target.tagName.toLowerCase() !== \"svg\") {\n    var bbox = target.getBBox();\n    return [bbox.width, bbox.height];\n  }\n\n  width = target.clientWidth;\n  height = target.clientHeight;\n\n  if (isOffset || isBoxSizing) {\n    var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n    var borderRight = parseFloat(style.borderRightWidth) || 0;\n    var borderTop = parseFloat(style.borderTopWidth) || 0;\n    var borderBottom = parseFloat(style.borderBottomWidth) || 0;\n    return [width + borderLeft + borderRight, height + borderTop + borderBottom];\n  } else {\n    var paddingLeft = parseFloat(style.paddingLeft) || 0;\n    var paddingRight = parseFloat(style.paddingRight) || 0;\n    var paddingTop = parseFloat(style.paddingTop) || 0;\n    var paddingBottom = parseFloat(style.paddingBottom) || 0;\n    return [width - paddingLeft - paddingRight, height - paddingTop - paddingBottom];\n  }\n}\n\nfunction getRotationRad(poses, direction) {\n  return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\n\nfunction getTargetInfo(moveableElement, target, container, parentContainer, rootContainer, state) {\n  var beforeDirection = 1;\n  var beforeOrigin = [0, 0];\n  var targetClientRect = resetClientRect();\n  var containerClientRect = resetClientRect();\n  var moveableClientRect = resetClientRect();\n  var result = cacaulateElementInfo(target, container, rootContainer, false, state);\n\n  if (target) {\n    var n = result.is3d ? 4 : 3;\n    var beforePosition = caculateMoveablePosition(result.offsetMatrix, plus(result.transformOrigin, getOrigin(result.targetMatrix, n)), result.width, result.height);\n    beforeDirection = beforePosition.direction;\n    beforeOrigin = plus(beforePosition.origin, [beforePosition.left - result.left, beforePosition.top - result.top]);\n    targetClientRect = getClientRect(target);\n    containerClientRect = getClientRect(getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body, true);\n\n    if (moveableElement) {\n      moveableClientRect = getClientRect(moveableElement);\n    }\n  }\n\n  return __assign({\n    targetClientRect: targetClientRect,\n    containerClientRect: containerClientRect,\n    moveableClientRect: moveableClientRect,\n    beforeDirection: beforeDirection,\n    beforeOrigin: beforeOrigin,\n    target: target\n  }, result);\n}\n\nfunction resetClientRect() {\n  return {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    clientLeft: 0,\n    clientTop: 0,\n    clientWidth: 0,\n    clientHeight: 0,\n    scrollWidth: 0,\n    scrollHeight: 0\n  };\n}\n\nfunction getClientRect(el, isExtends) {\n  var _a = el.getBoundingClientRect(),\n      left = _a.left,\n      width = _a.width,\n      top = _a.top,\n      bottom = _a.bottom,\n      right = _a.right,\n      height = _a.height;\n\n  var rect = {\n    left: left,\n    right: right,\n    top: top,\n    bottom: bottom,\n    width: width,\n    height: height\n  };\n\n  if (isExtends) {\n    rect.clientLeft = el.clientLeft;\n    rect.clientTop = el.clientTop;\n    rect.clientWidth = el.clientWidth;\n    rect.clientHeight = el.clientHeight;\n    rect.scrollWidth = el.scrollWidth;\n    rect.scrollHeight = el.scrollHeight;\n  }\n\n  return rect;\n}\n\nfunction getDirection(target) {\n  if (!target) {\n    return;\n  }\n\n  var direciton = target.getAttribute(\"data-direction\");\n\n  if (!direciton) {\n    return;\n  }\n\n  var dir = [0, 0];\n  direciton.indexOf(\"w\") > -1 && (dir[0] = -1);\n  direciton.indexOf(\"e\") > -1 && (dir[0] = 1);\n  direciton.indexOf(\"n\") > -1 && (dir[1] = -1);\n  direciton.indexOf(\"s\") > -1 && (dir[1] = 1);\n  return dir;\n}\n\nfunction getAbsolutePoses(poses, dist) {\n  return [plus(dist, poses[0]), plus(dist, poses[1]), plus(dist, poses[2]), plus(dist, poses[3])];\n}\n\nfunction getAbsolutePosesByState(_a) {\n  var left = _a.left,\n      top = _a.top,\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n  return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\n\nfunction roundSign(num) {\n  return Math.round(num % 1 === -0.5 ? num - 1 : num);\n}\n\nfunction throttle(num, unit) {\n  if (!unit) {\n    return num;\n  }\n\n  return Math.round(num / unit) * unit;\n}\n\nfunction throttleArray(nums, unit) {\n  nums.forEach(function (_, i) {\n    nums[i] = throttle(nums[i], unit);\n  });\n  return nums;\n}\n\nfunction unset(self, name) {\n  if (self[name]) {\n    self[name].unset();\n    self[name] = null;\n  }\n}\n\nfunction getOrientationDirection(pos, pos1, pos2) {\n  return (pos[0] - pos1[0]) * (pos2[1] - pos1[1]) - (pos[1] - pos1[1]) * (pos2[0] - pos1[0]);\n}\n\nfunction isInside(pos, pos1, pos2, pos3, pos4) {\n  var k1 = getOrientationDirection(pos, pos1, pos2);\n  var k2 = getOrientationDirection(pos, pos2, pos3);\n  var k3 = getOrientationDirection(pos, pos3, pos1);\n  var k4 = getOrientationDirection(pos, pos2, pos3);\n  var k5 = getOrientationDirection(pos, pos3, pos4);\n  var k6 = getOrientationDirection(pos, pos4, pos2);\n  var signs1 = [k1, k2, k3];\n  var signs2 = [k4, k5, k6];\n\n  if (signs1.every(function (sign) {\n    return sign >= 0;\n  }) || signs1.every(function (sign) {\n    return sign <= 0;\n  }) || signs2.every(function (sign) {\n    return sign >= 0;\n  }) || signs2.every(function (sign) {\n    return sign <= 0;\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction fillParams(moveable, e, params) {\n  var datas = e.datas;\n\n  if (!datas.datas) {\n    datas.datas = {};\n  }\n\n  var nextParams = __assign(__assign({}, params), {\n    target: moveable.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: moveable,\n    datas: datas.datas\n  });\n\n  if (datas.isStartEvent) {\n    datas.lastEvent = nextParams;\n  } else {\n    datas.isStartEvent = true;\n  }\n\n  return nextParams;\n}\n\nfunction fillEndParams(moveable, e, params) {\n  var datas = e.datas;\n  var isDrag = \"isDrag\" in params ? params.isDrag : e.isDrag;\n\n  if (!datas.datas) {\n    datas.datas = {};\n  }\n\n  return __assign(__assign({\n    isDrag: isDrag\n  }, params), {\n    target: moveable.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: moveable,\n    lastEvent: datas.lastEvent,\n    isDouble: e.isDouble,\n    datas: datas.datas\n  });\n}\n\nfunction triggerEvent(moveable, name, params, isManager) {\n  return moveable.triggerEvent(name, params, isManager);\n}\n\nfunction getComputedStyle$1(el, pseudoElt) {\n  return window.getComputedStyle(el, pseudoElt);\n}\n\nfunction filterAbles(ables, methods, triggerAblesSimultaneously) {\n  var enabledAbles = {};\n  var ableGroups = {};\n  return ables.filter(function (able) {\n    var name = able.name;\n\n    if (enabledAbles[name] || !methods.some(function (method) {\n      return able[method];\n    })) {\n      return false;\n    }\n\n    if (!triggerAblesSimultaneously && able.ableGroup) {\n      if (ableGroups[able.ableGroup]) {\n        return false;\n      }\n\n      ableGroups[able.ableGroup] = true;\n    }\n\n    enabledAbles[name] = true;\n    return true;\n  });\n}\n\nfunction getKeepRatioHeight(width, isWidth, ratio) {\n  return width * (isWidth ? ratio : 1 / ratio);\n}\n\nfunction getKeepRatioWidth(height, isWidth, ratio) {\n  return height * (isWidth ? 1 / ratio : ratio);\n}\n\nfunction equals(a1, a2) {\n  return a1 === a2 || a1 == null && a2 == null;\n}\n\nfunction selectValue() {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  var length = values.length - 1;\n\n  for (var i = 0; i < length; ++i) {\n    var value = values[i];\n\n    if (!isUndefined(value)) {\n      return value;\n    }\n  }\n\n  return values[length];\n}\n\nfunction groupBy(arr, func) {\n  var groups = [];\n  var groupKeys = [];\n  arr.forEach(function (el, index) {\n    var groupKey = func(el, index, arr);\n    var keyIndex = groupKeys.indexOf(groupKey);\n    var group = groups[keyIndex] || [];\n\n    if (keyIndex === -1) {\n      groupKeys.push(groupKey);\n      groups.push(group);\n    }\n\n    group.push(el);\n  });\n  return groups;\n}\n\nfunction groupByMap(arr, func) {\n  var groups = [];\n  var groupKeys = {};\n  arr.forEach(function (el, index) {\n    var groupKey = func(el, index, arr);\n    var group = groupKeys[groupKey];\n\n    if (!group) {\n      group = [];\n      groupKeys[groupKey] = group;\n      groups.push(group);\n    }\n\n    group.push(el);\n  });\n  return groups;\n}\n\nfunction flat(arr) {\n  return arr.reduce(function (prev, cur) {\n    return prev.concat(cur);\n  }, []);\n}\n\nfunction maxOffset() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  args.sort(function (a, b) {\n    return Math.abs(b) - Math.abs(a);\n  });\n  return args[0];\n}\n\nfunction minOffset() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  args.sort(function (a, b) {\n    return Math.abs(a) - Math.abs(b);\n  });\n  return args[0];\n}\n\nfunction caculateInversePosition(matrix, pos, n) {\n  return caculate(invert(matrix, n), convertPositionMatrix(pos, n), n);\n}\n\nfunction convertDragDist(state, e) {\n  var _a;\n\n  var is3d = state.is3d,\n      rootMatrix = state.rootMatrix;\n  var n = is3d ? 4 : 3;\n  _a = caculateInversePosition(rootMatrix, [e.distX, e.distY], n), e.distX = _a[0], e.distY = _a[1];\n  return e;\n}\n\nfunction caculatePadding(matrix, pos, transformOrigin, origin, n) {\n  return minus(caculatePosition(matrix, plus(transformOrigin, pos), n), origin);\n}\n\nfunction checkSize(targetSize, compareSize, isMax) {\n  return [[compareSize[0], compareSize[0] * targetSize[1] / targetSize[0]], [compareSize[1] * targetSize[0] / targetSize[1], compareSize[1]]].filter(function (size) {\n    return size.every(function (value, i) {\n      return isMax ? value <= compareSize[i] : value >= compareSize[i];\n    });\n  })[0] || targetSize;\n}\n\nfunction caculateBoundSize(size, minSize, maxSize, keepRatio) {\n  if (!keepRatio) {\n    return size.map(function (value, i) {\n      return between(value, minSize[i], maxSize[i]);\n    });\n  }\n\n  var width = size[0],\n      height = size[1]; // width : height = minWidth : minHeight;\n\n  var _a = checkSize(size, minSize, false),\n      minWidth = _a[0],\n      minHeight = _a[1];\n\n  var _b = checkSize(size, maxSize, true),\n      maxWidth = _b[0],\n      maxHeight = _b[1];\n\n  if (width < minWidth || height < minHeight) {\n    width = minWidth;\n    height = minHeight;\n  } else if (width > maxWidth || height > maxHeight) {\n    width = maxWidth;\n    height = maxHeight;\n  }\n\n  return [width, height];\n}\n\nfunction convertCSSSize(value, size, isRelative) {\n  return isRelative ? value / size * 100 + \"%\" : value + \"px\";\n}\n\nfunction moveControlPos(controlPoses, index, dist, isRect) {\n  var _a = controlPoses[index],\n      direction = _a.direction,\n      sub = _a.sub;\n  var dists = controlPoses.map(function () {\n    return [0, 0];\n  });\n  var directions = direction ? direction.split(\"\") : [];\n\n  if (isRect && index < 8) {\n    var verticalDirection_1 = directions.filter(function (dir) {\n      return dir === \"w\" || dir === \"e\";\n    })[0];\n    var horizontalDirection_1 = directions.filter(function (dir) {\n      return dir === \"n\" || dir === \"s\";\n    })[0];\n    dists[index] = dist;\n    controlPoses.forEach(function (controlPose, i) {\n      var controlDir = controlPose.direction;\n\n      if (!controlDir) {\n        return;\n      }\n\n      if (controlDir.indexOf(verticalDirection_1) > -1) {\n        dists[i][0] = dist[0];\n      }\n\n      if (controlDir.indexOf(horizontalDirection_1) > -1) {\n        dists[i][1] = dist[1];\n      }\n    });\n\n    if (verticalDirection_1) {\n      dists[1][0] = dist[0] / 2;\n      dists[5][0] = dist[0] / 2;\n    }\n\n    if (horizontalDirection_1) {\n      dists[3][1] = dist[1] / 2;\n      dists[7][1] = dist[1] / 2;\n    }\n  } else if (direction && !sub) {\n    directions.forEach(function (dir) {\n      var isVertical = dir === \"n\" || dir === \"s\";\n      controlPoses.forEach(function (controlPose, i) {\n        var dirDir = controlPose.direction,\n            dirHorizontal = controlPose.horizontal,\n            dirVertical = controlPose.vertical;\n\n        if (!dirDir || dirDir.indexOf(dir) === -1) {\n          return;\n        }\n\n        dists[i] = [isVertical || !dirHorizontal ? 0 : dist[0], !isVertical || !dirVertical ? 0 : dist[1]];\n      });\n    });\n  } else {\n    dists[index] = dist;\n  }\n\n  return dists;\n}\n\nfunction getTinyDist(v) {\n  return Math.abs(v) <= TINY_NUM ? 0 : v;\n}\n\nfunction directionCondition(e) {\n  if (e.isRequest) {\n    if (e.requestAble === \"resizable\" || e.requestAble === \"scalable\") {\n      return e.parentDirection;\n    } else {\n      return false;\n    }\n  }\n\n  return hasClass(e.inputEvent.target, prefix(\"direction\"));\n}\n\nfunction invertObject(obj) {\n  var nextObj = {};\n\n  for (var name in obj) {\n    nextObj[obj[name]] = name;\n  }\n\n  return nextObj;\n}\n\nfunction getTransform(transforms, index) {\n  var beforeFunctionTexts = transforms.slice(0, index < 0 ? undefined : index);\n  var targetFunctionText = transforms[index] || \"\";\n  var afterFunctionTexts = index < 0 ? [] : transforms.slice(index);\n  var beforeFunctions = parse(beforeFunctionTexts);\n  var targetFunctions = parse([targetFunctionText]);\n  var afterFunctions = parse(afterFunctionTexts);\n  return {\n    transforms: transforms,\n    beforeFunctionMatrix: toMat(beforeFunctions),\n    targetFunctionMatrix: toMat(targetFunctions),\n    afterFunctionMatrix: toMat(afterFunctions),\n    beforeFunctions: beforeFunctions,\n    targetFunction: targetFunctions[0],\n    afterFunctions: afterFunctions,\n    beforeFunctionTexts: beforeFunctionTexts,\n    targetFunctionText: targetFunctionText,\n    afterFunctionTexts: afterFunctionTexts\n  };\n}\n\nfunction isArrayFormat(arr) {\n  if (!arr || !isObject(arr)) {\n    return false;\n  }\n\n  return isArray(arr) || \"length\" in arr;\n}\n\nfunction getRefTargets(targets) {\n  if (!targets) {\n    return [];\n  }\n\n  var userTargets = isArrayFormat(targets) ? [].slice.call(targets) : [targets];\n  return userTargets.map(function (target) {\n    if (!target) {\n      return null;\n    }\n\n    if (isString(target)) {\n      return target;\n    }\n\n    if (\"current\" in target) {\n      return target.current;\n    }\n\n    return target;\n  });\n}\n\nfunction getElementTargets(targets, selectorMap) {\n  var elementTargets = [];\n  targets.forEach(function (target) {\n    if (!target) {\n      return;\n    }\n\n    if (isString(target)) {\n      if (selectorMap[target]) {\n        elementTargets.push.apply(elementTargets, selectorMap[target]);\n      }\n\n      return;\n    }\n\n    elementTargets.push(target);\n  });\n  return elementTargets;\n}\n\nfunction between(value, min, max) {\n  return Math.max(min, Math.min(value, max));\n}\n/**\n * @namespace Moveable.Pinchable\n * @description Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n */\n\n\nvar Pinchable = {\n  name: \"pinchable\",\n  updateRect: true,\n  props: {\n    pinchable: Boolean\n  },\n  events: {\n    onPinchStart: \"pinchStart\",\n    onPinch: \"pinch\",\n    onPinchEnd: \"pinchEnd\",\n    onPinchGroupStart: \"pinchGroupStart\",\n    onPinchGroup: \"pinchGroup\",\n    onPinchGroupEnd: \"pinchGroupEnd\"\n  },\n  dragStart: function () {\n    return true;\n  },\n  pinchStart: function (moveable, e) {\n    var datas = e.datas,\n        targets = e.targets,\n        angle = e.angle,\n        originalDatas = e.originalDatas;\n    var _a = moveable.props,\n        pinchable = _a.pinchable,\n        ables = _a.ables;\n\n    if (!pinchable) {\n      return false;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"Start\";\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlStart\";\n    var pinchAbles = (pinchable === true ? moveable.controlAbles : ables.filter(function (able) {\n      return pinchable.indexOf(able.name) > -1;\n    })).filter(function (able) {\n      return able.canPinch && able[controlEventName];\n    });\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var result = triggerEvent(moveable, eventName, params);\n    datas.isPinch = result !== false;\n    datas.ables = pinchAbles;\n    var isPinch = datas.isPinch;\n\n    if (!isPinch) {\n      return false;\n    }\n\n    pinchAbles.forEach(function (able) {\n      originalDatas[able.name] = originalDatas[able.name] || {};\n\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      var ableEvent = __assign(__assign({}, e), {\n        datas: originalDatas[able.name],\n        parentRotate: angle,\n        isPinch: true\n      });\n\n      able[controlEventName](moveable, ableEvent);\n    });\n    moveable.state.snapRenderInfo = {\n      request: e.isRequest,\n      direction: [0, 0]\n    };\n    return isPinch;\n  },\n  pinch: function (moveable, e) {\n    var datas = e.datas,\n        pinchScale = e.scale,\n        distance = e.distance,\n        originalDatas = e.originalDatas,\n        inputEvent = e.inputEvent,\n        targets = e.targets,\n        angle = e.angle;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var parentDistance = distance * (1 - 1 / pinchScale);\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\");\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"Control\";\n    ables.forEach(function (able) {\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      able[controlEventName](moveable, __assign(__assign({}, e), {\n        datas: originalDatas[able.name],\n        inputEvent: inputEvent,\n        parentDistance: parentDistance,\n        parentRotate: angle,\n        isPinch: true\n      }));\n    });\n    return params;\n  },\n  pinchEnd: function (moveable, e) {\n    var datas = e.datas,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        targets = e.targets,\n        originalDatas = e.originalDatas;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"End\";\n    var params = fillEndParams(moveable, e, {\n      isDrag: isPinch\n    });\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlEnd\";\n    ables.forEach(function (able) {\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      able[controlEventName](moveable, __assign(__assign({}, e), {\n        isDrag: isPinch,\n        datas: originalDatas[able.name],\n        inputEvent: inputEvent,\n        isPinch: true\n      }));\n    });\n    return isPinch;\n  },\n  pinchGroupStart: function (moveable, e) {\n    return this.pinchStart(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroup: function (moveable, e) {\n    return this.pinch(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroupEnd: function (moveable, e) {\n    return this.pinchEnd(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  }\n};\n/**\n * Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n * @name Moveable.Pinchable#pinchable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.pinchable = true;\n */\n\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable.Pinchable\n * @event pinchStart\n * @param {Moveable.Pinchable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable.Pinchable\n * @event pinch\n * @param {Moveable.Pinchable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable.Pinchable\n * @event pinchEnd\n * @param {Moveable.Pinchable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When the group pinch starts, the `pinchGroupStart` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupStart\n * @param {Moveable.Pinchable.OnPinchGroupStart} - Parameters for the `pinchGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupStart\", ({ targets }) => {\n *     console.log(\"onPinchGroupStart\", targets);\n * });\n */\n\n/**\n * When the group pinch, the `pinchGroup` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroup\n * @param {Moveable.Pinchable.OnPinchGroup} - Parameters for the `pinchGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroup\", ({ targets, events }) => {\n *     console.log(\"onPinchGroup\", targets);\n * });\n */\n\n/**\n * When the group pinch finishes, the `pinchGroupEnd` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupEnd\n * @param {Moveable.Pinchable.OnPinchGroupEnd} - Parameters for the `pinchGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onPinchGroupEnd\", targets, isDrag);\n * });\n */\n\nfunction setCustomDrag(e, state, delta, isPinch, isConvert) {\n  var result = state.gesto.move(delta, e.inputEvent);\n  var datas = result.originalDatas || result.datas;\n  var draggableDatas = datas.draggable || (datas.draggable = {});\n  return __assign(__assign({}, isConvert ? convertDragDist(state, result) : result), {\n    isDrag: true,\n    isPinch: !!isPinch,\n    parentEvent: true,\n    datas: draggableDatas,\n    originalDatas: e.originalDatas\n  });\n}\n\nvar CustomGesto = /*#__PURE__*/function () {\n  function CustomGesto() {\n    this.prevX = 0;\n    this.prevY = 0;\n    this.startX = 0;\n    this.startY = 0;\n    this.isDrag = false;\n    this.isFlag = false;\n    this.datas = {\n      draggable: {}\n    };\n  }\n\n  var __proto = CustomGesto.prototype;\n\n  __proto.dragStart = function (client, e) {\n    this.isDrag = false;\n    this.isFlag = false;\n    var originalDatas = e.originalDatas;\n    this.datas = originalDatas;\n\n    if (!originalDatas.draggable) {\n      originalDatas.draggable = {};\n    }\n\n    return __assign(__assign({}, this.move(client, e.inputEvent)), {\n      type: \"dragstart\"\n    });\n  };\n\n  __proto.drag = function (client, inputEvent) {\n    return this.move([client[0] - this.prevX, client[1] - this.prevY], inputEvent);\n  };\n\n  __proto.move = function (delta, inputEvent) {\n    var clientX;\n    var clientY;\n\n    if (!this.isFlag) {\n      this.prevX = delta[0];\n      this.prevY = delta[1];\n      this.startX = delta[0];\n      this.startY = delta[1];\n      clientX = delta[0];\n      clientY = delta[1];\n      this.isFlag = true;\n    } else {\n      clientX = this.prevX + delta[0];\n      clientY = this.prevY + delta[1];\n      this.isDrag = true;\n    }\n\n    this.prevX = clientX;\n    this.prevY = clientY;\n    return {\n      type: \"drag\",\n      clientX: clientX,\n      clientY: clientY,\n      inputEvent: inputEvent,\n      isDrag: this.isDrag,\n      distX: clientX - this.startX,\n      distY: clientY - this.startY,\n      deltaX: delta[0],\n      deltaY: delta[1],\n      datas: this.datas.draggable,\n      originalDatas: this.datas,\n      parentEvent: true,\n      parentGesto: this\n    };\n  };\n\n  return CustomGesto;\n}();\n\nfunction fillChildEvents(moveable, name, e) {\n  var datas = e.originalDatas;\n  datas.groupable = datas.groupable || {};\n  var groupableDatas = datas.groupable;\n  groupableDatas.childDatas = groupableDatas.childDatas || [];\n  var childDatas = groupableDatas.childDatas;\n  var inputEvent = e.inputEvent,\n      isPinch = e.isPinch,\n      clientX = e.clientX,\n      clientY = e.clientY,\n      distX = e.distX,\n      distY = e.distY;\n  return moveable.moveables.map(function (child, i) {\n    childDatas[i] = childDatas[i] || {};\n    childDatas[i][name] = childDatas[i][name] || {};\n    return {\n      inputEvent: inputEvent,\n      datas: childDatas[i][name],\n      originalDatas: childDatas[i],\n      isPinch: isPinch,\n      clientX: clientX,\n      clientY: clientY,\n      distX: distX,\n      distY: distY\n    };\n  });\n}\n\nfunction triggerChildGesto(moveable, able, type, delta, e, isConvert) {\n  var isStart = !!type.match(/Start$/g);\n  var isEnd = !!type.match(/End$/g);\n  var isPinch = e.isPinch;\n  var datas = e.datas;\n  var events = fillChildEvents(moveable, able.name, e);\n  var moveables = moveable.moveables;\n  var childs = events.map(function (ev, i) {\n    var childMoveable = moveables[i];\n    var childEvent = ev;\n\n    if (isStart) {\n      childEvent = new CustomGesto().dragStart(delta, ev);\n    } else {\n      if (!childMoveable.state.gesto) {\n        childMoveable.state.gesto = datas.childGestos[i];\n      }\n\n      childEvent = setCustomDrag(ev, childMoveable.state, delta, isPinch, isConvert);\n    }\n\n    var result = able[type](childMoveable, __assign(__assign({}, childEvent), {\n      parentFlag: true\n    }));\n\n    if (isEnd) {\n      childMoveable.state.gesto = null;\n    }\n\n    return result;\n  });\n\n  if (isStart) {\n    datas.childGestos = moveables.map(function (child) {\n      return child.state.gesto;\n    });\n  }\n\n  return childs;\n}\n\nfunction triggerChildAble(moveable, able, type, e, eachEvent, callback) {\n  if (eachEvent === void 0) {\n    eachEvent = function (_, ev) {\n      return ev;\n    };\n  }\n\n  var isEnd = !!type.match(/End$/g);\n  var events = fillChildEvents(moveable, able.name, e);\n  var moveables = moveable.moveables;\n  var childs = events.map(function (ev, i) {\n    var childMoveable = moveables[i];\n    var childEvent = ev;\n    childEvent = eachEvent(childMoveable, ev);\n    var result = able[type](childMoveable, __assign(__assign({}, childEvent), {\n      parentFlag: true\n    }));\n    result && callback && callback(childMoveable, ev, result, i);\n\n    if (isEnd) {\n      childMoveable.state.gesto = null;\n    }\n\n    return result;\n  });\n  return childs;\n}\n\nfunction caculatePointerDist(moveable, e) {\n  var clientX = e.clientX,\n      clientY = e.clientY,\n      datas = e.datas;\n  var _a = moveable.state,\n      moveableClientRect = _a.moveableClientRect,\n      rootMatrix = _a.rootMatrix,\n      is3d = _a.is3d,\n      pos1 = _a.pos1;\n  var left = moveableClientRect.left,\n      top = moveableClientRect.top;\n  var n = is3d ? 4 : 3;\n\n  var _b = minus(caculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), pos1),\n      posX = _b[0],\n      posY = _b[1];\n\n  var _c = getDragDist({\n    datas: datas,\n    distX: posX,\n    distY: posY\n  }),\n      distX = _c[0],\n      distY = _c[1];\n\n  return [distX, distY];\n}\n\nfunction setDragStart(moveable, _a) {\n  var datas = _a.datas;\n  var _b = moveable.state,\n      allMatrix = _b.allMatrix,\n      beforeMatrix = _b.beforeMatrix,\n      is3d = _b.is3d,\n      left = _b.left,\n      top = _b.top,\n      origin = _b.origin,\n      offsetMatrix = _b.offsetMatrix,\n      targetMatrix = _b.targetMatrix,\n      transformOrigin = _b.transformOrigin;\n  var n = is3d ? 4 : 3;\n  datas.is3d = is3d;\n  datas.matrix = allMatrix;\n  datas.targetMatrix = targetMatrix;\n  datas.beforeMatrix = beforeMatrix;\n  datas.offsetMatrix = offsetMatrix;\n  datas.transformOrigin = transformOrigin;\n  datas.inverseMatrix = invert(allMatrix, n);\n  datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n  datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n  datas.startDragBeforeDist = caculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n  datas.startDragDist = caculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\n\nfunction resolveTransformEvent(event, functionName) {\n  var datas = event.datas,\n      originalDatas = event.originalDatas.beforeRenderable;\n  var index = datas.transformIndex;\n  var nextTransforms = originalDatas.nextTransforms;\n  var nextTransformAppendedIndexes = originalDatas.nextTransformAppendedIndexes;\n  var nextIndex = index === -1 ? nextTransforms.length : index + nextTransformAppendedIndexes.filter(function (i) {\n    return i < index;\n  }).length;\n  var result = getTransform(nextTransforms, nextIndex);\n  var targetFunction = result.targetFunction;\n  var matFunctionName = functionName === \"rotate\" ? \"rotateZ\" : functionName;\n  datas.targetAllTransform = multiply(result.beforeFunctionMatrix, result.afterFunctionMatrix, 4);\n  datas.beforeFunctionTexts = result.beforeFunctionTexts;\n  datas.afterFunctionTexts = result.afterFunctionTexts;\n  datas.beforeTransform = result.beforeFunctionMatrix;\n  datas.targetTansform = result.targetFunctionMatrix;\n  datas.afterTransform = result.afterFunctionMatrix;\n\n  if (targetFunction.functionName === matFunctionName) {\n    datas.afterFunctionTexts.splice(0, 1);\n    datas.isAppendTransform = false;\n  } else {\n    datas.isAppendTransform = true;\n    originalDatas.nextTransformAppendedIndexes = __spreadArrays(nextTransformAppendedIndexes, [nextIndex]);\n  }\n}\n\nfunction convertTransformFormat(datas, value, dist) {\n  return datas.beforeFunctionTexts.join(\" \") + \" \" + (datas.isAppendTransform ? dist : value) + \" \" + datas.afterFunctionTexts.join(\" \");\n}\n\nfunction getTransformDist(_a) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n\n  var _b = getBeforeDragDist({\n    datas: datas,\n    distX: distX,\n    distY: distY\n  }),\n      bx = _b[0],\n      by = _b[1]; // B * [tx, ty] * A = [bx, by] * targetMatrix;\n  // [tx, ty] = B-1 * [bx, by] * targetMatrix * A-1 * [0, 0];\n\n\n  var res = getTransfromMatrix(datas, fromTranslation([bx, by], 4));\n  return caculate(res, convertPositionMatrix([0, 0, 0], 4), 4);\n}\n\nfunction getTransfromMatrix(datas, targetMatrix, isAfter) {\n  var beforeTransform = datas.beforeTransform,\n      afterTransform = datas.afterTransform,\n      targetAllTransform = datas.targetAllTransform; // B * afterTargetMatrix * A = (targetMatrix * targetAllTransform)\n  // afterTargetMatrix = B-1 * targetMatrix * targetAllTransform * A-1\n  // nextTargetMatrix = (targetMatrix * targetAllTransform)\n\n  var nextTargetMatrix = isAfter ? multiply(targetAllTransform, targetMatrix, 4) : multiply(targetMatrix, targetAllTransform, 4); // res1 = B-1 * nextTargetMatrix\n\n  var res1 = multiply(invert(beforeTransform, 4), nextTargetMatrix, 4); // res3 = res2 * A-1\n\n  var afterTargetMatrix = multiply(res1, invert(afterTransform, 4), 4);\n  return afterTargetMatrix;\n}\n\nfunction getBeforeDragDist(_a) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY; // TT = BT\n\n  var inverseBeforeMatrix = datas.inverseBeforeMatrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3; // ABS_ORIGIN * [distX, distY] = BM * (ORIGIN + [tx, ty])\n  // BM -1 * ABS_ORIGIN * [distX, distY] - ORIGIN = [tx, ty]\n\n  return minus(caculate(inverseBeforeMatrix, plus(absoluteOrigin, [distX, distY]), n), startDragBeforeDist);\n}\n\nfunction getDragDist(_a, isBefore) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n  var inverseBeforeMatrix = datas.inverseBeforeMatrix,\n      inverseMatrix = datas.inverseMatrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      startDragDist = datas.startDragDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3;\n  return minus(caculate(isBefore ? inverseBeforeMatrix : inverseMatrix, plus(absoluteOrigin, [distX, distY]), n), isBefore ? startDragBeforeDist : startDragDist);\n}\n\nfunction getInverseDragDist(_a, isBefore) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n  var beforeMatrix = datas.beforeMatrix,\n      matrix = datas.matrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      startDragDist = datas.startDragDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3;\n  return minus(caculate(isBefore ? beforeMatrix : matrix, plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]), n), absoluteOrigin);\n}\n\nfunction caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin) {\n  if (prevWidth === void 0) {\n    prevWidth = width;\n  }\n\n  if (prevHeight === void 0) {\n    prevHeight = height;\n  }\n\n  if (prevOrigin === void 0) {\n    prevOrigin = [0, 0];\n  }\n\n  if (!transformOrigin) {\n    return prevOrigin;\n  }\n\n  return transformOrigin.map(function (pos, i) {\n    var _a = splitUnit(pos),\n        value = _a.value,\n        unit = _a.unit;\n\n    var prevSize = i ? prevHeight : prevWidth;\n    var size = i ? height : width;\n\n    if (pos === \"%\" || isNaN(value)) {\n      // no value but %\n      var measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n      return size * measureRatio;\n    } else if (unit !== \"%\") {\n      return value;\n    }\n\n    return size * value / 100;\n  });\n}\n\nfunction getPosIndexesByDirection(direction) {\n  var indexes = [];\n\n  if (direction[1] >= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(3);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(2);\n    }\n  }\n\n  if (direction[1] <= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(1);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(0);\n    }\n  }\n\n  return indexes;\n}\n\nfunction getPosesByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  return getPosIndexesByDirection(direction).map(function (index) {\n    return poses[index];\n  });\n}\n\nfunction getPosByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  var nextPoses = getPosesByDirection(poses, direction);\n  return [average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[0];\n  })), average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[1];\n  }))];\n}\n\nfunction getPosByReverseDirection(poses, direction) {\n  /*\n  [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)\n  [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)\n  [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)\n  */\n  return getPosByDirection(poses, direction.map(function (dir) {\n    return -dir;\n  }));\n}\n\nfunction getDist(startPos, matrix, width, height, n, direction) {\n  var poses = caculatePoses(matrix, width, height, n);\n  var pos = getPosByReverseDirection(poses, direction);\n  var distX = startPos[0] - pos[0];\n  var distY = startPos[1] - pos[1];\n  return [distX, distY];\n}\n\nfunction getNextMatrix(offsetMatrix, targetMatrix, origin, n) {\n  return multiply(offsetMatrix, getAbsoluteMatrix(targetMatrix, n, origin), n);\n}\n\nfunction getNextTransformMatrix(state, datas, transform) {\n  var transformOrigin = state.transformOrigin,\n      offsetMatrix = state.offsetMatrix,\n      is3d = state.is3d;\n  var beforeTransform = datas.beforeTransform,\n      afterTransform = datas.afterTransform;\n  var n = is3d ? 4 : 3;\n  var targetTransform = parseMat([transform]);\n  return getNextMatrix(offsetMatrix, convertDimension(multiply(multiply(beforeTransform, targetTransform, 4), afterTransform, 4), 4, n), transformOrigin, n);\n}\n\nfunction scaleMatrix(state, scale) {\n  var transformOrigin = state.transformOrigin,\n      offsetMatrix = state.offsetMatrix,\n      is3d = state.is3d,\n      targetMatrix = state.targetMatrix;\n  var n = is3d ? 4 : 3;\n  return getNextMatrix(offsetMatrix, multiply(targetMatrix, createScaleMatrix(scale, n), n), transformOrigin, n);\n}\n\nfunction fillTransformStartEvent(e) {\n  var originalDatas = e.originalDatas.beforeRenderable;\n  return {\n    setTransform: function (transform, index) {\n      if (index === void 0) {\n        index = -1;\n      }\n\n      originalDatas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n      setTransformIndex(e, index);\n    },\n    setTransformIndex: function (index) {\n      setTransformIndex(e, index);\n    }\n  };\n}\n\nfunction setDefaultTransformIndex(e) {\n  setTransformIndex(e, -1);\n}\n\nfunction setTransformIndex(e, index) {\n  var originalDatas = e.originalDatas.beforeRenderable;\n  var datas = e.datas;\n  datas.transformIndex = index;\n\n  if (index === -1) {\n    return;\n  }\n\n  var transform = originalDatas.startTransforms[index];\n\n  if (!transform) {\n    return;\n  }\n\n  var info = parse([transform]);\n  datas.startValue = info[0].functionValue;\n}\n\nfunction fillOriginalTransform(e, transform) {\n  var originalDatas = e.originalDatas.beforeRenderable;\n  originalDatas.nextTransforms = splitSpace(transform);\n}\n\nfunction fillTransformEvent(moveable, nextTransform, delta, isPinch, e) {\n  fillOriginalTransform(e, nextTransform);\n  return {\n    transform: nextTransform,\n    drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, delta, isPinch, false))\n  };\n}\n\nfunction getTranslateDist(moveable, transform, fixedPosition, fixedDirection, datas) {\n  var state = moveable.state;\n  var left = state.left,\n      top = state.top;\n  var groupable = moveable.props.groupable;\n  var nextMatrix = getNextTransformMatrix(moveable.state, datas, transform);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0; // const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n\n  var nextFixedPosition = getDirectionOffset(moveable, fixedDirection, nextMatrix);\n  var dist = minus(fixedPosition, nextFixedPosition);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction getScaleDist(moveable, scaleDist, direction, fixedPosition, datas) {\n  return getTranslateDist(moveable, \"scale(\" + scaleDist.join(\", \") + \")\", fixedPosition, direction.map(function (dir) {\n    return -dir;\n  }), datas);\n}\n\nfunction getOriginDirection(moveable) {\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height,\n      transformOrigin = _a.transformOrigin;\n  return [-1 + transformOrigin[0] / (width / 2), -1 + transformOrigin[1] / (height / 2)];\n}\n\nfunction getDirectionOffset(moveable, direction, nextMatrix) {\n  if (nextMatrix === void 0) {\n    nextMatrix = moveable.state.allMatrix;\n  }\n\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height,\n      is3d = _a.is3d;\n  var n = is3d ? 4 : 3;\n  var nextFixedOffset = [width / 2 * (1 + direction[0]), height / 2 * (1 + direction[1])];\n  return caculatePosition(nextMatrix, nextFixedOffset, n);\n}\n\nfunction getRotateDist(moveable, rotateDist, fixedPosition, datas) {\n  var fixedDirection = getOriginDirection(moveable);\n  return getTranslateDist(moveable, \"rotate(\" + rotateDist + \"deg)\", fixedPosition, fixedDirection, datas);\n}\n\nfunction getResizeDist(moveable, width, height, direction, fixedPosition, transformOrigin) {\n  var groupable = moveable.props.groupable;\n  var _a = moveable.state,\n      prevOrigin = _a.transformOrigin,\n      targetMatrix = _a.targetMatrix,\n      offsetMatrix = _a.offsetMatrix,\n      is3d = _a.is3d,\n      prevWidth = _a.width,\n      prevHeight = _a.height,\n      left = _a.left,\n      top = _a.top;\n  var n = is3d ? 4 : 3;\n  var nextOrigin = caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0;\n  var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n  var dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction getStartDirection(moveable, direction) {\n  if (!direction[0] && !direction[1]) {\n    return [0, 0];\n  }\n\n  var baseDirection = [-1, -1];\n  return [direction[0] ? direction[0] : baseDirection[0] * -1, direction[1] ? direction[1] : baseDirection[1] * -1];\n}\n\nfunction getAbsoluteFixedPosition(moveable, direction) {\n  return getPosByReverseDirection(getAbsolutePosesByState(moveable.state), direction);\n}\n\nfunction getGapGuidelines(guidelines, type, snapThreshold, index, _a, _b) {\n  var start = _a[0],\n      end = _a[1];\n  var otherStart = _b[0],\n      otherEnd = _b[1];\n  var totalGuidelines = [];\n  var otherIndex = index ? 0 : 1;\n  var otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n  var elementGuidelines = groupBy(guidelines.filter(function (_a) {\n    var guidelineType = _a.type;\n    return guidelineType === type;\n  }), function (_a) {\n    var element = _a.element;\n    return element;\n  }).map(function (group) {\n    return group[0];\n  }).filter(function (_a) {\n    var pos = _a.pos,\n        sizes = _a.sizes;\n    return pos[otherIndex] <= otherEnd && otherStart <= pos[otherIndex] + sizes[otherIndex];\n  });\n  elementGuidelines.forEach(function (guideline1) {\n    var elementStart = guideline1.pos[index];\n    var elementEnd = elementStart + guideline1.sizes[index];\n    elementGuidelines.forEach(function (_a) {\n      var guideline2Pos = _a.pos,\n          guideline2Sizes = _a.sizes,\n          guideline2Element = _a.element;\n      var targetStart = guideline2Pos[index];\n      var targetEnd = targetStart + guideline2Sizes[index];\n      var pos = 0;\n      var gap = 0;\n      var canSnap = true;\n\n      if (elementEnd <= targetStart) {\n        // gap -\n        gap = elementEnd - targetStart;\n        pos = targetEnd - gap;\n\n        if (start < pos - snapThreshold) {\n          canSnap = false;\n        } // element target moveable\n\n      } else if (targetEnd <= elementStart) {\n        // gap +\n        gap = elementStart - targetEnd;\n        pos = targetStart - gap;\n\n        if (end > pos + snapThreshold) {\n          canSnap = false;\n        } // moveable target element\n\n      } else {\n        return;\n      }\n\n      if (canSnap) {\n        totalGuidelines.push({\n          pos: otherType === \"vertical\" ? [pos, guideline2Pos[1]] : [guideline2Pos[0], pos],\n          element: guideline2Element,\n          sizes: guideline2Sizes,\n          size: 0,\n          type: otherType,\n          gap: gap,\n          gapGuidelines: elementGuidelines\n        });\n      }\n\n      if (elementEnd <= start && end <= targetStart) {\n        // elementEnd   moveable   target\n        var centerPos = (targetStart + elementEnd - (end - start)) / 2;\n\n        if (throttle(start - (centerPos - snapThreshold), 0.1) >= 0) {\n          totalGuidelines.push({\n            pos: otherType === \"vertical\" ? [centerPos, guideline2Pos[1]] : [guideline2Pos[0], centerPos],\n            element: guideline2Element,\n            sizes: guideline2Sizes,\n            size: 0,\n            type: otherType,\n            gap: elementEnd - start,\n            gapGuidelines: elementGuidelines\n          });\n        }\n      }\n    });\n  });\n  return totalGuidelines;\n}\n\nfunction addGuidelines(totalGuidelines, width, height, horizontalGuidelines, verticalGuidelines) {\n  horizontalGuidelines && horizontalGuidelines.forEach(function (pos) {\n    totalGuidelines.push({\n      type: \"horizontal\",\n      pos: [0, throttle(pos, 0.1)],\n      size: width\n    });\n  });\n  verticalGuidelines && verticalGuidelines.forEach(function (pos) {\n    totalGuidelines.push({\n      type: \"vertical\",\n      pos: [throttle(pos, 0.1), 0],\n      size: height\n    });\n  });\n  return totalGuidelines;\n}\n\nfunction getTotalGuidelines(moveable) {\n  var _a = moveable.state,\n      guidelines = _a.guidelines,\n      _b = _a.containerClientRect,\n      containerHeight = _b.scrollHeight,\n      containerWidth = _b.scrollWidth;\n  var props = moveable.props;\n  var _c = props.snapHorizontal,\n      snapHorizontal = _c === void 0 ? true : _c,\n      _d = props.snapVertical,\n      snapVertical = _d === void 0 ? true : _d,\n      _e = props.snapGap,\n      snapGap = _e === void 0 ? true : _e,\n      verticalGuidelines = props.verticalGuidelines,\n      horizontalGuidelines = props.horizontalGuidelines,\n      _f = props.snapThreshold,\n      snapThreshold = _f === void 0 ? 5 : _f;\n\n  var totalGuidelines = __spreadArrays(guidelines);\n\n  if (snapGap) {\n    var _g = getRect(getAbsolutePosesByState(moveable.state)),\n        top = _g.top,\n        left = _g.left,\n        bottom = _g.bottom,\n        right = _g.right;\n\n    var elementGuidelines = guidelines.filter(function (_a) {\n      var element = _a.element;\n      return element;\n    });\n    totalGuidelines.push.apply(totalGuidelines, __spreadArrays(getGapGuidelines(elementGuidelines, \"horizontal\", snapThreshold, 0, [left, right], [top, bottom]), getGapGuidelines(elementGuidelines, \"vertical\", snapThreshold, 1, [top, bottom], [left, right])));\n  }\n\n  addGuidelines(totalGuidelines, containerWidth, containerHeight, snapHorizontal && horizontalGuidelines, snapVertical && verticalGuidelines);\n  return totalGuidelines;\n}\n\nfunction checkMoveableSnapPoses(moveable, posesX, posesY, snapCenter, customSnapThreshold) {\n  var totalGuidelines = getTotalGuidelines(moveable);\n  var props = moveable.props;\n  var _a = props.snapElement,\n      snapElement = _a === void 0 ? true : _a;\n  var snapThreshold = selectValue(customSnapThreshold, props.snapThreshold, 5);\n  return checkSnapPoses(totalGuidelines, posesX, posesY, {\n    snapThreshold: snapThreshold,\n    snapCenter: snapCenter,\n    snapElement: snapElement\n  });\n}\n\nfunction checkSnapPoses(guidelines, posesX, posesY, options) {\n  return {\n    vertical: checkSnap(guidelines, \"vertical\", posesX, options),\n    horizontal: checkSnap(guidelines, \"horizontal\", posesY, options)\n  };\n}\n\nfunction checkSnapKeepRatio(moveable, startPos, endPos) {\n  var endX = endPos[0],\n      endY = endPos[1];\n  var startX = startPos[0],\n      startY = startPos[1];\n\n  var _a = minus(endPos, startPos),\n      dx = _a[0],\n      dy = _a[1];\n\n  var isBottom = dy > 0;\n  var isRight = dx > 0;\n  dx = getTinyDist(dx);\n  dy = getTinyDist(dy);\n  var verticalInfo = {\n    isSnap: false,\n    offset: 0,\n    pos: 0\n  };\n  var horizontalInfo = {\n    isSnap: false,\n    offset: 0,\n    pos: 0\n  };\n\n  if (dx === 0 && dy === 0) {\n    return {\n      vertical: verticalInfo,\n      horizontal: horizontalInfo\n    };\n  }\n\n  var _b = checkMoveableSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []),\n      verticalSnapInfo = _b.vertical,\n      horizontalSnapInfo = _b.horizontal;\n\n  verticalSnapInfo.posInfos.filter(function (_a) {\n    var pos = _a.pos;\n    return isRight ? pos >= startX : pos <= startX;\n  });\n  horizontalSnapInfo.posInfos.filter(function (_a) {\n    var pos = _a.pos;\n    return isBottom ? pos >= startY : pos <= startY;\n  });\n  verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\n  horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\n\n  var _c = getNearestSnapGuidelineInfo(verticalSnapInfo),\n      isVerticalSnap = _c.isSnap,\n      verticalGuideline = _c.guideline;\n\n  var _d = getNearestSnapGuidelineInfo(horizontalSnapInfo),\n      isHorizontalSnap = _d.isSnap,\n      horizontalGuideline = _d.guideline;\n\n  var horizontalPos = isHorizontalSnap ? horizontalGuideline.pos[1] : 0;\n  var verticalPos = isVerticalSnap ? verticalGuideline.pos[0] : 0;\n\n  if (dx === 0) {\n    if (isHorizontalSnap) {\n      horizontalInfo.isSnap = true;\n      horizontalInfo.pos = horizontalGuideline.pos[1];\n      horizontalInfo.offset = endY - horizontalInfo.pos;\n    }\n  } else if (dy === 0) {\n    if (isVerticalSnap) {\n      verticalInfo.isSnap = true;\n      verticalInfo.pos = verticalPos;\n      verticalInfo.offset = endX - verticalPos;\n    }\n  } else {\n    // y - y1 = a * (x - x1)\n    var a = dy / dx;\n    var b = endPos[1] - a * endX;\n    var y = 0;\n    var x = 0;\n    var isSnap = false;\n\n    if (isVerticalSnap) {\n      x = verticalPos;\n      y = a * x + b;\n      isSnap = true;\n    } else if (isHorizontalSnap) {\n      y = horizontalPos;\n      x = (y - b) / a;\n      isSnap = true;\n    }\n\n    if (isSnap) {\n      verticalInfo.isSnap = true;\n      verticalInfo.pos = x;\n      verticalInfo.offset = endX - x;\n      horizontalInfo.isSnap = true;\n      horizontalInfo.pos = y;\n      horizontalInfo.offset = endY - y;\n    }\n  }\n\n  return {\n    vertical: verticalInfo,\n    horizontal: horizontalInfo\n  };\n}\n\nfunction checkSnaps(moveable, rect, isCenter, customSnapThreshold) {\n  var snapCenter = moveable.props.snapCenter;\n  var isSnapCenter = snapCenter && isCenter;\n  var verticalNames = [\"left\", \"right\"];\n  var horizontalNames = [\"top\", \"bottom\"];\n\n  if (isSnapCenter) {\n    verticalNames.push(\"center\");\n    horizontalNames.push(\"middle\");\n  }\n\n  verticalNames = verticalNames.filter(function (name) {\n    return name in rect;\n  });\n  horizontalNames = horizontalNames.filter(function (name) {\n    return name in rect;\n  });\n  return checkMoveableSnapPoses(moveable, verticalNames.map(function (name) {\n    return rect[name];\n  }), horizontalNames.map(function (name) {\n    return rect[name];\n  }), isSnapCenter, customSnapThreshold);\n}\n\nfunction getNearestSnapGuidelineInfo(snapInfo) {\n  var isSnap = snapInfo.isSnap;\n\n  if (!isSnap) {\n    return {\n      isSnap: false,\n      offset: 0,\n      dist: -1,\n      pos: 0,\n      guideline: null\n    };\n  }\n\n  var posInfo = snapInfo.posInfos[0];\n  var guidelineInfo = posInfo.guidelineInfos[0];\n  var offset = guidelineInfo.offset;\n  var dist = guidelineInfo.dist;\n  var guideline = guidelineInfo.guideline;\n  return {\n    isSnap: isSnap,\n    offset: offset,\n    dist: dist,\n    pos: posInfo.pos,\n    guideline: guideline\n  };\n}\n\nfunction checkSnap(guidelines, targetType, targetPoses, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.snapThreshold,\n      snapThreshold = _c === void 0 ? 5 : _c,\n      snapElement = _b.snapElement,\n      snapCenter = _b.snapCenter;\n\n  if (!guidelines || !guidelines.length) {\n    return {\n      isSnap: false,\n      index: -1,\n      posInfos: []\n    };\n  }\n\n  var isVertical = targetType === \"vertical\";\n  var posType = isVertical ? 0 : 1;\n  var snapPosInfos = targetPoses.map(function (targetPos, index) {\n    var guidelineInfos = guidelines.map(function (guideline) {\n      var pos = guideline.pos;\n      var offset = targetPos - pos[posType];\n      return {\n        offset: offset,\n        dist: Math.abs(offset),\n        guideline: guideline\n      };\n    }).filter(function (_a) {\n      var guideline = _a.guideline,\n          dist = _a.dist;\n      var type = guideline.type,\n          center = guideline.center,\n          element = guideline.element;\n\n      if (!snapElement && element || !snapCenter && center || type !== targetType || dist > snapThreshold) {\n        return false;\n      }\n\n      return true;\n    }).sort(function (a, b) {\n      return a.dist - b.dist;\n    });\n    return {\n      pos: targetPos,\n      index: index,\n      guidelineInfos: guidelineInfos\n    };\n  }).filter(function (snapPosInfo) {\n    return snapPosInfo.guidelineInfos.length > 0;\n  }).sort(function (a, b) {\n    return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\n  });\n  var isSnap = snapPosInfos.length > 0;\n  return {\n    isSnap: isSnap,\n    index: isSnap ? snapPosInfos[0].index : -1,\n    posInfos: snapPosInfos\n  };\n}\n\nfunction getSnapInfosByDirection(moveable, poses, snapDirection) {\n  var nextPoses = [];\n\n  if (snapDirection[0] && snapDirection[1]) {\n    nextPoses = [snapDirection, [-snapDirection[0], snapDirection[1]], [snapDirection[0], -snapDirection[1]]].map(function (direction) {\n      return getPosByDirection(poses, direction);\n    });\n  } else if (!snapDirection[0] && !snapDirection[1]) {\n    var alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];\n\n    for (var i = 0; i < 4; ++i) {\n      nextPoses.push(alignPoses[i]);\n      nextPoses.push([(alignPoses[i][0] + alignPoses[i + 1][0]) / 2, (alignPoses[i][1] + alignPoses[i + 1][1]) / 2]);\n    }\n  } else {\n    if (moveable.props.keepRatio) {\n      nextPoses = [[-1, -1], [-1, 1], [1, -1], [1, 1], snapDirection].map(function (dir) {\n        return getPosByDirection(poses, dir);\n      });\n    } else {\n      nextPoses = getPosesByDirection(poses, snapDirection);\n\n      if (nextPoses.length > 1) {\n        nextPoses.push([(nextPoses[0][0] + nextPoses[1][0]) / 2, (nextPoses[0][1] + nextPoses[1][1]) / 2]);\n      }\n    }\n  }\n\n  return checkMoveableSnapPoses(moveable, nextPoses.map(function (pos) {\n    return pos[0];\n  }), nextPoses.map(function (pos) {\n    return pos[1];\n  }), true, 1);\n}\n\nfunction checkSnapBoundPriority(a, b) {\n  var aDist = Math.abs(a.offset);\n  var bDist = Math.abs(b.offset);\n\n  if (a.isBound && b.isBound) {\n    return bDist - aDist;\n  } else if (a.isBound) {\n    return -1;\n  } else if (b.isBound) {\n    return 1;\n  } else if (a.isSnap && b.isSnap) {\n    return bDist - aDist;\n  } else if (a.isSnap) {\n    return -1;\n  } else if (b.isSnap) {\n    return 1;\n  } else if (aDist < TINY_NUM) {\n    return 1;\n  } else if (bDist < TINY_NUM) {\n    return -1;\n  }\n\n  return aDist - bDist;\n}\n\nfunction getNearOffsetInfo(offsets, index) {\n  return offsets.slice().sort(function (a, b) {\n    var aSign = a.sign[index];\n    var bSign = b.sign[index];\n    var aOffset = a.offset[index];\n    var bOffset = b.offset[index]; // -1 The positions of a and b do not change.\n    // 1 The positions of a and b are reversed.\n\n    if (!aSign) {\n      return 1;\n    } else if (!bSign) {\n      return -1;\n    }\n\n    return checkSnapBoundPriority({\n      isBound: a.isBound,\n      isSnap: a.isSnap,\n      offset: aOffset\n    }, {\n      isBound: b.isBound,\n      isSnap: b.isSnap,\n      offset: bOffset\n    });\n  })[0];\n}\n\nfunction isStartLine(dot, line) {\n  // l    o     => true\n  // o    l    => false\n  var cx = average(line[0][0], line[1][0]);\n  var cy = average(line[0][1], line[1][1]);\n  return {\n    vertical: cx <= dot[0],\n    horizontal: cy <= dot[1]\n  };\n}\n\nfunction hitTestLine(dot, _a) {\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (Math.abs(dx) < TINY_NUM) {\n    dx = 0;\n  }\n\n  if (Math.abs(dy) < TINY_NUM) {\n    dy = 0;\n  }\n\n  var test1;\n  var test2;\n\n  if (!dx) {\n    test1 = pos1[0];\n    test2 = dot[0];\n  } else if (!dy) {\n    test1 = pos1[1];\n    test2 = dot[1];\n  } else {\n    var a = dy / dx; // y = a * (x - pos1) + pos1\n\n    test1 = a * (dot[0] - pos1[0]) + pos1[1];\n    test2 = dot[1];\n  }\n\n  return test1 - test2;\n}\n\nfunction isSameStartLine(dots, line, error) {\n  if (error === void 0) {\n    error = TINY_NUM;\n  }\n\n  var centerSign = hitTestLine(dots[0], line) <= 0;\n  return dots.slice(1).every(function (dot) {\n    var value = hitTestLine(dot, line);\n    var sign = value <= 0;\n    return sign === centerSign || Math.abs(value) <= error;\n  });\n}\n\nfunction checkInnerBoundDot(pos, start, end, isStart, threshold) {\n  if (threshold === void 0) {\n    threshold = 0;\n  }\n\n  if (isStart && start - threshold <= pos || !isStart && pos <= end + threshold) {\n    // false 402 565 602 => 37 ([0, 37])\n    // true 400 524.9712603540036 600 => 124 ([124, 0])\n    // true 400 410 600 => 10 ([10, 0])\n    return {\n      isBound: true,\n      offset: isStart ? start - pos : end - pos\n    };\n  }\n\n  return {\n    isBound: false,\n    offset: 0\n  };\n}\n\nfunction checkInnerBound(moveable, line, center) {\n  var bounds = moveable.props.innerBounds;\n\n  if (!bounds) {\n    return {\n      isAllBound: false,\n      isBound: false,\n      isVerticalBound: false,\n      isHorizontalBound: false,\n      offset: [0, 0]\n    };\n  }\n\n  var left = bounds.left,\n      top = bounds.top,\n      width = bounds.width,\n      height = bounds.height;\n  var leftLine = [[left, top], [left, top + height]];\n  var topLine = [[left, top], [left + width, top]];\n  var rightLine = [[left + width, top], [left + width, top + height]];\n  var bottomLine = [[left, top + height], [left + width, top + height]];\n\n  var _a = isStartLine(center, line),\n      isHorizontalStart = _a.horizontal,\n      isVerticalStart = _a.vertical;\n\n  if (isSameStartLine([center, [left, top], [left + width, top], [left, top + height], [left + width, top + height]], line)) {\n    return {\n      isAllBound: false,\n      isBound: false,\n      isVerticalBound: false,\n      isHorizontalBound: false,\n      offset: [0, 0]\n    };\n  } // test vertical\n\n\n  var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart);\n  var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart); // test horizontal\n\n  var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart);\n  var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart);\n  var isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\n  var isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\n  var isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\n  var isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\n  var verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\n  var horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\n  var offset = [0, 0];\n  var isBound = false;\n  var isAllBound = false;\n\n  if (Math.abs(horizontalOffset) < Math.abs(verticalOffset)) {\n    offset = [verticalOffset, 0];\n    isBound = isVerticalBound;\n    isAllBound = isAllVerticalBound;\n  } else {\n    offset = [0, horizontalOffset];\n    isBound = isHorizontalBound;\n    isAllBound = isAllHorizontalBound;\n  }\n\n  return {\n    isAllBound: isAllBound,\n    isVerticalBound: isVerticalBound,\n    isHorizontalBound: isHorizontalBound,\n    isBound: isBound,\n    offset: offset\n  };\n}\n\nfunction checkLineBoundCollision(line, boundLine, isStart, threshold, isRender) {\n  var dot1 = line[0];\n  var dot2 = line[1];\n  var boundDot1 = boundLine[0];\n  var boundDot2 = boundLine[1];\n  var dy1 = getTinyDist(dot2[1] - dot1[1]);\n  var dx1 = getTinyDist(dot2[0] - dot1[0]);\n  var dy2 = getTinyDist(boundDot2[1] - boundDot1[1]);\n  var dx2 = getTinyDist(boundDot2[0] - boundDot1[0]); // dx2 or dy2 is zero\n\n  if (!dx2) {\n    // vertical\n    if (isRender && !dy1) {\n      // 90deg\n      return {\n        isBound: false,\n        offset: 0\n      };\n    } else if (dx1) {\n      // const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];\n      var y = dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1]; // boundDot1[1] <= y  <= boundDot2[1]\n\n      return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\n    } else {\n      var offset = boundDot1[0] - dot1[0];\n      var isBound = Math.abs(offset) <= (threshold || 0);\n      return {\n        isBound: isBound,\n        offset: isBound ? offset : 0\n      };\n    }\n  } else if (!dy2) {\n    // horizontal\n    if (isRender && !dx1) {\n      // 90deg\n      return {\n        isBound: false,\n        offset: 0\n      };\n    } else if (dy1) {\n      // y = a * (x - x1) + y1\n      // x = (y - y1) / a + x1\n      // const a = dy1 / dx1;\n      // const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];\n      var x = (boundDot1[1] - dot1[1]) / (dy1 / dx1) + dot1[0]; // boundDot1[0] <= x && x <= boundDot2[0]\n\n      return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\n    } else {\n      var offset = boundDot1[1] - dot1[1];\n      var isBound = Math.abs(offset) <= (threshold || 0);\n      return {\n        isBound: isBound,\n        offset: isBound ? offset : 0\n      };\n    }\n  }\n\n  return {\n    isBound: false,\n    offset: 0\n  };\n}\n\nfunction getInnerBoundInfo(moveable, lines, center, datas) {\n  return lines.map(function (_a) {\n    var multiple = _a[0],\n        pos1 = _a[1],\n        pos2 = _a[2];\n\n    var _b = checkInnerBound(moveable, [pos1, pos2], center),\n        isBound = _b.isBound,\n        offset = _b.offset,\n        isVerticalBound = _b.isVerticalBound,\n        isHorizontalBound = _b.isHorizontalBound;\n\n    var sizeOffset = getDragDist({\n      datas: datas,\n      distX: offset[0],\n      distY: offset[1]\n    }).map(function (size, i) {\n      return size * (multiple[i] ? 2 / multiple[i] : 0);\n    });\n    return {\n      sign: multiple,\n      isBound: isBound,\n      isVerticalBound: isVerticalBound,\n      isHorizontalBound: isHorizontalBound,\n      isSnap: false,\n      offset: sizeOffset\n    };\n  });\n}\n\nfunction getInnerBoundDragInfo(moveable, poses, datas) {\n  var _a;\n\n  var lines = getCheckSnapLines(poses, [0, 0], false).map(function (_a) {\n    var sign = _a[0],\n        pos1 = _a[1],\n        pos2 = _a[2];\n    return [sign.map(function (dir) {\n      return Math.abs(dir) * 2;\n    }), pos1, pos2];\n  });\n  var innerBoundInfo = getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas);\n  var widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\n  var heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\n  var verticalOffset = 0;\n  var horizontalOffset = 0;\n  var isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\n  var isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\n\n  if (isVerticalBound || isHorizontalBound) {\n    _a = getInverseDragDist({\n      datas: datas,\n      distX: -widthOffsetInfo.offset[0],\n      distY: -heightOffsetInfo.offset[1]\n    }), verticalOffset = _a[0], horizontalOffset = _a[1];\n  }\n\n  return {\n    vertical: {\n      isBound: isVerticalBound,\n      offset: verticalOffset\n    },\n    horizontal: {\n      isBound: isHorizontalBound,\n      offset: horizontalOffset\n    }\n  };\n}\n\nfunction getCheckSnapLineDirections(direction, keepRatio) {\n  var lineDirections = [];\n  var x = direction[0];\n  var y = direction[1];\n\n  if (x && y) {\n    lineDirections.push([[0, y * 2], direction, [-x, y]], [[x * 2, 0], direction, [x, -y]]);\n  } else if (x) {\n    // vertcal\n    lineDirections.push([[x * 2, 0], [x, 1], [x, -1]]);\n\n    if (keepRatio) {\n      lineDirections.push([[0, -1], [x, -1], [-x, -1]], [[0, 1], [x, 1], [-x, 1]]);\n    }\n  } else if (y) {\n    // horizontal\n    lineDirections.push([[0, y * 2], [1, y], [-1, y]]);\n\n    if (keepRatio) {\n      lineDirections.push([[-1, 0], [-1, y], [-1, -y]], [[1, 0], [1, y], [1, -y]]);\n    }\n  } else {\n    // [0, 0] to all direction\n    lineDirections.push([[-1, 0], [-1, -1], [-1, 1]], [[1, 0], [1, -1], [1, 1]], [[0, -1], [-1, -1], [1, -1]], [[0, 1], [-1, 1], [1, 1]]);\n  }\n\n  return lineDirections;\n}\n\nfunction getCheckSnapLines(poses, direction, keepRatio) {\n  return getCheckSnapLineDirections(direction, keepRatio).map(function (_a) {\n    var sign = _a[0],\n        dir1 = _a[1],\n        dir2 = _a[2];\n    return [sign, getPosByDirection(poses, dir1), getPosByDirection(poses, dir2)];\n  });\n}\n\nfunction isBoundRotate(relativePoses, boundDots, center, rad) {\n  var nextPoses = rad ? relativePoses.map(function (pos) {\n    return rotate(pos, rad);\n  }) : relativePoses;\n\n  var dots = __spreadArrays([center], boundDots);\n\n  return [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].some(function (line, i) {\n    return !isSameStartLine(dots, line);\n  });\n}\n\nfunction getDistPointLine(_a) {\n  // x = 0, y = 0\n  // d = (ax + by + c) / root(a2 + b2)\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (!dx) {\n    return Math.abs(pos1[0]);\n  }\n\n  if (!dy) {\n    return Math.abs(pos1[1]);\n  } // y - y1 = a(x - x1)\n  // 0 = ax -y + -a * x1 + y1\n\n\n  var a = dy / dx;\n  return Math.abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\n}\n\nfunction solveReverseLine(_a) {\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (!dx) {\n    return [pos1[0], 0];\n  }\n\n  if (!dy) {\n    return [0, pos1[1]];\n  }\n\n  var a = dy / dx; // y - y1 = a (x  - x1)\n  // y = ax - a * x1 + y1\n\n  var b = -a * pos1[0] + pos1[1]; // y = ax + b = -1/a x\n  // x = -b / (a + 1 / a)\n  // y = b / (1 + 1 / a^2)\n\n  return [-b / (a + 1 / a), b / (a * a + 1)];\n}\n\nfunction checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation) {\n  var bounds = moveable.props.innerBounds;\n  var rad = rotation * Math.PI / 180;\n\n  if (!bounds) {\n    return [];\n  }\n\n  var left = bounds.left,\n      top = bounds.top,\n      width = bounds.width,\n      height = bounds.height;\n  var relativeLeft = left - origin[0];\n  var relativeRight = left + width - origin[0];\n  var relativeTop = top - origin[1];\n  var relativeBottom = top + height - origin[1];\n  var dots = [[relativeLeft, relativeTop], [relativeRight, relativeTop], [relativeLeft, relativeBottom], [relativeRight, relativeBottom]];\n  var center = getPosByDirection(nextPoses, [0, 0]);\n\n  if (!isBoundRotate(nextPoses, dots, center, 0)) {\n    return [];\n  }\n\n  var result = [];\n  var dotInfos = dots.map(function (dot) {\n    return [getDistSize(dot), getRad([0, 0], dot)];\n  });\n  [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].forEach(function (line) {\n    var lineRad = getRad([0, 0], solveReverseLine(line));\n    var lineDist = getDistPointLine(line);\n    result.push.apply(result, dotInfos.filter(function (_a) {\n      var dotDist = _a[0];\n      return dotDist && lineDist <= dotDist;\n    }).map(function (_a) {\n      var dotDist = _a[0],\n          dotRad = _a[1];\n      var distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\n      var nextRad1 = dotRad + distRad;\n      var nextRad2 = dotRad - distRad;\n      return [rad + nextRad1 - lineRad, rad + nextRad2 - lineRad];\n    }).reduce(function (prev, cur) {\n      prev.push.apply(prev, cur);\n      return prev;\n    }, []).filter(function (nextRad) {\n      return !isBoundRotate(prevPoses, dots, center, nextRad);\n    }).map(function (nextRad) {\n      return throttle(nextRad * 180 / Math.PI, TINY_NUM);\n    }));\n  });\n  return result;\n}\n\nfunction checkInnerBoundPoses(moveable) {\n  var innerBounds = moveable.props.innerBounds;\n\n  if (!innerBounds) {\n    return {\n      vertical: [],\n      horizontal: []\n    };\n  }\n\n  var _a = moveable.getRect(),\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n\n  var poses = [pos1, pos2, pos3, pos4];\n  var center = getPosByDirection(poses, [0, 0]);\n  var left = innerBounds.left,\n      top = innerBounds.top,\n      width = innerBounds.width,\n      height = innerBounds.height;\n  var leftLine = [[left, top], [left, top + height]];\n  var topLine = [[left, top], [left + width, top]];\n  var rightLine = [[left + width, top], [left + width, top + height]];\n  var bottomLine = [[left, top + height], [left + width, top + height]];\n  var lines = [[pos1, pos2], [pos2, pos4], [pos4, pos3], [pos3, pos1]];\n  var horizontalPoses = [];\n  var verticalPoses = [];\n  var boundMap = {\n    top: false,\n    bottom: false,\n    left: false,\n    right: false\n  };\n  lines.forEach(function (line) {\n    var _a = isStartLine(center, line),\n        isHorizontalStart = _a.horizontal,\n        isVerticalStart = _a.vertical; // test vertical\n\n\n    var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart, 1, true);\n    var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart, 1, true); // test horizontal\n\n    var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart, 1, true);\n    var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart, 1, true);\n\n    if (topBoundInfo.isBound && !boundMap.top) {\n      horizontalPoses.push(top);\n      boundMap.top = true;\n    }\n\n    if (bottomBoundInfo.isBound && !boundMap.bottom) {\n      horizontalPoses.push(top + height);\n      boundMap.bottom = true;\n    }\n\n    if (leftBoundInfo.isBound && !boundMap.left) {\n      verticalPoses.push(left);\n      boundMap.left = true;\n    }\n\n    if (rightBoundInfo.isBound && !boundMap.right) {\n      verticalPoses.push(left + width);\n      boundMap.right = true;\n    }\n  });\n  return {\n    horizontal: horizontalPoses,\n    vertical: verticalPoses\n  };\n}\n\nfunction checkBoundPoses(bounds, verticalPoses, horizontalPoses) {\n  var _a = bounds || {},\n      _b = _a.left,\n      left = _b === void 0 ? -Infinity : _b,\n      _c = _a.top,\n      top = _c === void 0 ? -Infinity : _c,\n      _d = _a.right,\n      right = _d === void 0 ? Infinity : _d,\n      _e = _a.bottom,\n      bottom = _e === void 0 ? Infinity : _e;\n\n  var nextBounds = {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n  return {\n    vertical: checkBounds(nextBounds, verticalPoses, true),\n    horizontal: checkBounds(nextBounds, horizontalPoses, false)\n  };\n}\n\nfunction checkBoundKeepRatio(moveable, startPos, endPos) {\n  var _a = moveable.props.bounds || {},\n      _b = _a.left,\n      left = _b === void 0 ? -Infinity : _b,\n      _c = _a.top,\n      top = _c === void 0 ? -Infinity : _c,\n      _d = _a.right,\n      right = _d === void 0 ? Infinity : _d,\n      _e = _a.bottom,\n      bottom = _e === void 0 ? Infinity : _e;\n\n  var endX = endPos[0],\n      endY = endPos[1];\n\n  var _f = minus(endPos, startPos),\n      dx = _f[0],\n      dy = _f[1];\n\n  if (Math.abs(dx) < TINY_NUM) {\n    dx = 0;\n  }\n\n  if (Math.abs(dy) < TINY_NUM) {\n    dy = 0;\n  }\n\n  var isBottom = dy > 0;\n  var isRight = dx > 0;\n  var verticalInfo = {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n  var horizontalInfo = {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n\n  if (dx === 0 && dy === 0) {\n    return {\n      vertical: verticalInfo,\n      horizontal: horizontalInfo\n    };\n  } else if (dx === 0) {\n    if (isBottom) {\n      if (bottom < endY) {\n        horizontalInfo.pos = bottom;\n        horizontalInfo.offset = endY - bottom;\n      }\n    } else {\n      if (top > endY) {\n        horizontalInfo.pos = top;\n        horizontalInfo.offset = endY - top;\n      }\n    }\n  } else if (dy === 0) {\n    if (isRight) {\n      if (right < endX) {\n        verticalInfo.pos = right;\n        verticalInfo.offset = endX - right;\n      }\n    } else {\n      if (left > endX) {\n        verticalInfo.pos = left;\n        verticalInfo.offset = endX - left;\n      }\n    }\n  } else {\n    // y - y1 = a * (x - x1)\n    var a = dy / dx;\n    var b = endPos[1] - a * endX;\n    var y = 0;\n    var x = 0;\n    var isBound = false;\n\n    if (isRight && right <= endX) {\n      y = a * right + b;\n      x = right;\n      isBound = true;\n    } else if (!isRight && endX <= left) {\n      y = a * left + b;\n      x = left;\n      isBound = true;\n    }\n\n    if (isBound) {\n      if (y < top || y > bottom) {\n        isBound = false;\n      }\n    }\n\n    if (!isBound) {\n      if (isBottom && bottom <= endY) {\n        y = bottom;\n        x = (y - b) / a;\n        isBound = true;\n      } else if (!isBottom && endY <= top) {\n        y = top;\n        x = (y - b) / a;\n        isBound = true;\n      }\n    }\n\n    if (isBound) {\n      verticalInfo.isBound = true;\n      verticalInfo.pos = x;\n      verticalInfo.offset = endX - x;\n      horizontalInfo.isBound = true;\n      horizontalInfo.pos = y;\n      horizontalInfo.offset = endY - y;\n    }\n  }\n\n  return {\n    vertical: verticalInfo,\n    horizontal: horizontalInfo\n  };\n}\n\nfunction checkBounds(bounds, poses, isVertical) {\n  // 0   [100 - 200]  300\n  var startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\n  var endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"]; // 450\n\n  var minPos = Math.min.apply(Math, poses);\n  var maxPos = Math.max.apply(Math, poses);\n  var boundInfos = [];\n\n  if (startBoundPos + 1 > minPos) {\n    boundInfos.push({\n      isBound: true,\n      offset: minPos - startBoundPos,\n      pos: startBoundPos\n    });\n  }\n\n  if (endBoundPos - 1 < maxPos) {\n    boundInfos.push({\n      isBound: true,\n      offset: maxPos - endBoundPos,\n      pos: endBoundPos\n    });\n  }\n\n  if (!boundInfos.length) {\n    boundInfos.push({\n      isBound: false,\n      offset: 0,\n      pos: 0\n    });\n  }\n\n  return boundInfos.sort(function (a, b) {\n    return Math.abs(b.offset) - Math.abs(a.offset);\n  });\n}\n\nfunction isBoundRotate$1(relativePoses, boundRect, rad) {\n  var nextPoses = rad ? relativePoses.map(function (pos) {\n    return rotate(pos, rad);\n  }) : relativePoses;\n  return nextPoses.some(function (pos) {\n    return pos[0] < boundRect.left && Math.abs(pos[0] - boundRect.left) > 0.1 || pos[0] > boundRect.right && Math.abs(pos[0] - boundRect.right) > 0.1 || pos[1] < boundRect.top && Math.abs(pos[1] - boundRect.top) > 0.1 || pos[1] > boundRect.bottom && Math.abs(pos[1] - boundRect.bottom) > 0.1;\n  });\n}\n\nfunction boundRotate(vec, boundPos, index) {\n  var r = getDistSize(vec);\n  var nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\n  return [nextPos, -nextPos].sort(function (a, b) {\n    return Math.abs(a - vec[index ? 0 : 1]) - Math.abs(b - vec[index ? 0 : 1]);\n  }).map(function (pos) {\n    return getRad([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\n  });\n}\n\nfunction checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation) {\n  var bounds = moveable.props.bounds;\n  var rad = rotation * Math.PI / 180;\n\n  if (!bounds) {\n    return [];\n  }\n\n  var _a = bounds.left,\n      left = _a === void 0 ? -Infinity : _a,\n      _b = bounds.top,\n      top = _b === void 0 ? -Infinity : _b,\n      _c = bounds.right,\n      right = _c === void 0 ? Infinity : _c,\n      _d = bounds.bottom,\n      bottom = _d === void 0 ? Infinity : _d;\n  var relativeLeft = left - origin[0];\n  var relativeRight = right - origin[0];\n  var relativeTop = top - origin[1];\n  var relativeBottom = bottom - origin[1];\n  var boundRect = {\n    left: relativeLeft,\n    top: relativeTop,\n    right: relativeRight,\n    bottom: relativeBottom\n  };\n\n  if (!isBoundRotate$1(nextPoses, boundRect, 0)) {\n    return [];\n  }\n\n  var result = [];\n  [[relativeLeft, 0], [relativeRight, 0], [relativeTop, 1], [relativeBottom, 1]].forEach(function (_a, i) {\n    var boundPos = _a[0],\n        index = _a[1];\n    nextPoses.forEach(function (nextPos) {\n      var relativeRad1 = getRad([0, 0], nextPos);\n      result.push.apply(result, boundRotate(nextPos, boundPos, index).map(function (relativeRad2) {\n        return rad + relativeRad2 - relativeRad1;\n      }).filter(function (nextRad) {\n        return !isBoundRotate$1(prevPoses, boundRect, nextRad);\n      }).map(function (nextRad) {\n        return throttle(nextRad * 180 / Math.PI, TINY_NUM);\n      }));\n    });\n  });\n  return result;\n}\n\nfunction caculateContainerPos(rootMatrix, containerRect, n) {\n  var clientPos = caculatePosition(rootMatrix, [containerRect.clientLeft, containerRect.clientTop], n);\n  return [containerRect.left + clientPos[0], containerRect.top + clientPos[1]];\n}\n\nfunction snapStart(moveable) {\n  var state = moveable.state;\n\n  if (state.guidelines && state.guidelines.length) {\n    return;\n  }\n\n  var _a = moveable.props,\n      _b = _a.horizontalGuidelines,\n      horizontalGuidelines = _b === void 0 ? [] : _b,\n      _c = _a.verticalGuidelines,\n      verticalGuidelines = _c === void 0 ? [] : _c,\n      _d = _a.elementGuidelines,\n      elementGuidelines = _d === void 0 ? [] : _d,\n      bounds = _a.bounds,\n      innerBounds = _a.innerBounds,\n      snapCenter = _a.snapCenter;\n\n  if (!innerBounds && !bounds && !horizontalGuidelines.length && !verticalGuidelines.length && !elementGuidelines.length) {\n    return;\n  }\n\n  var containerClientRect = state.containerClientRect,\n      _e = state.targetClientRect,\n      clientTop = _e.top,\n      clientLeft = _e.left,\n      rootMatrix = state.rootMatrix,\n      is3d = state.is3d;\n  var n = is3d ? 4 : 3;\n\n  var _f = caculateContainerPos(rootMatrix, containerClientRect, n),\n      containerLeft = _f[0],\n      containerTop = _f[1];\n\n  var poses = getAbsolutePosesByState(state);\n  var targetLeft = Math.min.apply(Math, poses.map(function (pos) {\n    return pos[0];\n  }));\n  var targetTop = Math.min.apply(Math, poses.map(function (pos) {\n    return pos[1];\n  }));\n\n  var _g = minus([targetLeft, targetTop], caculateInversePosition(rootMatrix, [clientLeft - containerLeft, clientTop - containerTop], n)).map(function (pos) {\n    return roundSign(pos);\n  }),\n      distLeft = _g[0],\n      distTop = _g[1];\n\n  var guidelines = [];\n  elementGuidelines.forEach(function (el) {\n    var rect = el.getBoundingClientRect();\n    var left = rect.left - containerLeft;\n    var top = rect.top - containerTop;\n    var bottom = top + rect.height;\n    var right = left + rect.width;\n\n    var _a = caculateInversePosition(rootMatrix, [left, top], n),\n        elementLeft = _a[0],\n        elementTop = _a[1];\n\n    var _b = caculateInversePosition(rootMatrix, [right, bottom], n),\n        elementRight = _b[0],\n        elementBottom = _b[1];\n\n    var width = elementRight - elementLeft;\n    var height = elementBottom - elementTop;\n    var sizes = [width, height];\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [throttle(elementLeft + distLeft, 0.1), elementTop],\n      size: height,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [throttle(elementRight + distLeft, 0.1), elementTop],\n      size: height,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, throttle(elementTop + distTop, 0.1)],\n      size: width,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, throttle(elementBottom + distTop, 0.1)],\n      size: width,\n      sizes: sizes\n    });\n\n    if (snapCenter) {\n      guidelines.push({\n        type: \"vertical\",\n        element: el,\n        pos: [throttle((elementLeft + elementRight) / 2 + distLeft, 0.1), elementTop],\n        size: height,\n        sizes: sizes,\n        center: true\n      });\n      guidelines.push({\n        type: \"horizontal\",\n        element: el,\n        pos: [elementLeft, throttle((elementTop + elementBottom) / 2 + distTop, 0.1)],\n        size: width,\n        sizes: sizes,\n        center: true\n      });\n    }\n  });\n  state.guidelines = guidelines;\n  state.enableSnap = true;\n}\n\nfunction hasGuidelines(moveable, ableName) {\n  var _a = moveable.props,\n      snappable = _a.snappable,\n      bounds = _a.bounds,\n      innerBounds = _a.innerBounds,\n      verticalGuidelines = _a.verticalGuidelines,\n      horizontalGuidelines = _a.horizontalGuidelines,\n      _b = moveable.state,\n      guidelines = _b.guidelines,\n      enableSnap = _b.enableSnap;\n\n  if (!snappable || !enableSnap || ableName && snappable !== true && snappable.indexOf(ableName) < 0) {\n    return false;\n  }\n\n  if (bounds || innerBounds || guidelines && guidelines.length || verticalGuidelines && verticalGuidelines.length || horizontalGuidelines && horizontalGuidelines.length) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction solveNextOffset(pos1, pos2, offset, isVertical, datas) {\n  var sizeOffset = solveEquation(pos1, pos2, offset, isVertical);\n\n  if (!sizeOffset) {\n    return [0, 0];\n  }\n\n  var _a = getDragDist({\n    datas: datas,\n    distX: sizeOffset[0],\n    distY: sizeOffset[1]\n  }),\n      widthOffset = _a[0],\n      heightOffset = _a[1];\n\n  return [widthOffset, heightOffset];\n}\n\nfunction getNextFixedPoses(matrix, width, height, fixedPos, direction, is3d) {\n  var nextPoses = caculatePoses(matrix, width, height, is3d ? 4 : 3);\n  var nextPos = getPosByReverseDirection(nextPoses, direction);\n  return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));\n}\n\nfunction getSnapBoundOffset(boundInfo, snapInfo) {\n  if (boundInfo.isBound) {\n    return boundInfo.offset;\n  } else if (snapInfo.isSnap) {\n    return snapInfo.offset;\n  }\n\n  return 0;\n}\n\nfunction getSnapBound(boundInfo, snapInfo) {\n  if (boundInfo.isBound) {\n    return boundInfo.offset;\n  } else if (snapInfo.isSnap) {\n    return getNearestSnapGuidelineInfo(snapInfo).offset;\n  }\n\n  return 0;\n}\n\nfunction checkSnapBoundsKeepRatio(moveable, startPos, endPos, isRequest) {\n  var _a = checkBoundKeepRatio(moveable, startPos, endPos),\n      horizontalBoundInfo = _a.horizontal,\n      verticalBoundInfo = _a.vertical;\n\n  var _b = isRequest ? {\n    horizontal: {\n      isSnap: false\n    },\n    vertical: {\n      isSnap: false\n    }\n  } : checkSnapKeepRatio(moveable, startPos, endPos),\n      horizontalSnapInfo = _b.horizontal,\n      verticalSnapInfo = _b.vertical;\n\n  var horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);\n  var verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);\n  var horizontalDist = Math.abs(horizontalOffset);\n  var verticalDist = Math.abs(verticalOffset);\n  return {\n    horizontal: {\n      isBound: horizontalBoundInfo.isBound,\n      isSnap: horizontalSnapInfo.isSnap,\n      offset: horizontalOffset,\n      dist: horizontalDist\n    },\n    vertical: {\n      isBound: verticalBoundInfo.isBound,\n      isSnap: verticalSnapInfo.isSnap,\n      offset: verticalOffset,\n      dist: verticalDist\n    }\n  };\n}\n\nfunction checkMoveableSnapBounds(moveable, isRequest, poses, boundPoses) {\n  if (boundPoses === void 0) {\n    boundPoses = poses;\n  }\n\n  var _a = checkBoundPoses(moveable.props.bounds, boundPoses.map(function (pos) {\n    return pos[0];\n  }), boundPoses.map(function (pos) {\n    return pos[1];\n  })),\n      horizontalBoundInfos = _a.horizontal,\n      verticalBoundInfos = _a.vertical;\n\n  var _b = isRequest ? {\n    horizontal: {\n      isSnap: false,\n      index: -1\n    },\n    vertical: {\n      isSnap: false,\n      index: -1\n    }\n  } : checkMoveableSnapPoses(moveable, poses.map(function (pos) {\n    return pos[0];\n  }), poses.map(function (pos) {\n    return pos[1];\n  })),\n      horizontalSnapInfo = _b.horizontal,\n      verticalSnapInfo = _b.vertical;\n\n  var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\n  var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\n  var horizontalDist = Math.abs(horizontalOffset);\n  var verticalDist = Math.abs(verticalOffset);\n  return {\n    horizontal: {\n      isBound: horizontalBoundInfos[0].isBound,\n      isSnap: horizontalSnapInfo.isSnap,\n      snapIndex: horizontalSnapInfo.index,\n      offset: horizontalOffset,\n      dist: horizontalDist,\n      bounds: horizontalBoundInfos,\n      snap: horizontalSnapInfo\n    },\n    vertical: {\n      isBound: verticalBoundInfos[0].isBound,\n      isSnap: verticalSnapInfo.isSnap,\n      snapIndex: verticalSnapInfo.index,\n      offset: verticalOffset,\n      dist: verticalDist,\n      bounds: verticalBoundInfos,\n      snap: verticalSnapInfo\n    }\n  };\n}\n\nfunction checkSnapBounds(guideines, bounds, posesX, posesY, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = checkBoundPoses(bounds, posesX, posesY),\n      horizontalBoundInfos = _a.horizontal,\n      verticalBoundInfos = _a.vertical;\n\n  var _b = options.isRequest ? {\n    horizontal: {\n      isSnap: false,\n      index: -1\n    },\n    vertical: {\n      isSnap: false,\n      index: -1\n    }\n  } : checkSnapPoses(guideines, posesX, posesY, options),\n      horizontalSnapInfo = _b.horizontal,\n      verticalSnapInfo = _b.vertical;\n\n  var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\n  var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\n  var horizontalDist = Math.abs(horizontalOffset);\n  var verticalDist = Math.abs(verticalOffset);\n  return {\n    horizontal: {\n      isBound: horizontalBoundInfos[0].isBound,\n      isSnap: horizontalSnapInfo.isSnap,\n      snapIndex: horizontalSnapInfo.index,\n      offset: horizontalOffset,\n      dist: horizontalDist,\n      bounds: horizontalBoundInfos,\n      snap: horizontalSnapInfo\n    },\n    vertical: {\n      isBound: verticalBoundInfos[0].isBound,\n      isSnap: verticalSnapInfo.isSnap,\n      snapIndex: verticalSnapInfo.index,\n      offset: verticalOffset,\n      dist: verticalDist,\n      bounds: verticalBoundInfos,\n      snap: verticalSnapInfo\n    }\n  };\n}\n\nfunction normalized(value) {\n  return value ? value / Math.abs(value) : 0;\n}\n\nfunction checkMaxBounds(moveable, poses, direction, fixedPos, datas) {\n  var fixedDirection = [-direction[0], -direction[1]];\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height;\n  var bounds = moveable.props.bounds;\n  var maxWidth = Infinity;\n  var maxHeight = Infinity;\n\n  if (bounds) {\n    var directions = [[direction[0], -direction[1]], [-direction[0], direction[1]]];\n    var _b = bounds.left,\n        left_1 = _b === void 0 ? -Infinity : _b,\n        _c = bounds.top,\n        top_1 = _c === void 0 ? -Infinity : _c,\n        _d = bounds.right,\n        right_1 = _d === void 0 ? Infinity : _d,\n        _e = bounds.bottom,\n        bottom_1 = _e === void 0 ? Infinity : _e;\n    directions.forEach(function (otherDirection) {\n      var isCheckVertical = otherDirection[0] !== fixedDirection[0];\n      var isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\n      var otherPos = getPosByDirection(poses, otherDirection);\n      var verticalDirection = normalized(otherDirection[1] - fixedDirection[1]);\n      var horizontalDirection = normalized(otherDirection[0] - fixedDirection[0]);\n      var deg = getRad(fixedPos, otherPos) * 360 / Math.PI;\n\n      if (isCheckHorizontal) {\n        var nextOtherPos = otherPos.slice();\n\n        if (Math.abs(deg - 360) < 2 || Math.abs(deg - 180) < 2) {\n          nextOtherPos[1] = fixedPos[1];\n        }\n\n        var _a = solveNextOffset(fixedPos, nextOtherPos, (fixedPos[1] < otherPos[1] ? bottom_1 : top_1) - otherPos[1], false, datas),\n            heightOffset = _a[1];\n\n        if (!isNaN(heightOffset)) {\n          maxHeight = height + verticalDirection * heightOffset;\n        }\n      }\n\n      if (isCheckVertical) {\n        var nextOtherPos = otherPos.slice();\n\n        if (Math.abs(deg - 90) < 2 || Math.abs(deg - 270) < 2) {\n          nextOtherPos[0] = fixedPos[0];\n        }\n\n        var widthOffset = solveNextOffset(fixedPos, nextOtherPos, (fixedPos[0] < otherPos[0] ? right_1 : left_1) - otherPos[0], true, datas)[0];\n\n        if (!isNaN(widthOffset)) {\n          maxWidth = width + horizontalDirection * widthOffset;\n        }\n      }\n    });\n  }\n\n  return {\n    maxWidth: maxWidth,\n    maxHeight: maxHeight\n  };\n}\n\nfunction getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas) {\n  return directions.map(function (_a) {\n    var startDirection = _a[0],\n        endDirection = _a[1];\n    var otherStartPos = getPosByDirection(poses, startDirection);\n    var otherEndPos = getPosByDirection(poses, endDirection);\n    var snapBoundInfo = keepRatio ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos, isRequest) : checkMoveableSnapBounds(moveable, isRequest, [otherEndPos]);\n    var _b = snapBoundInfo.horizontal,\n        otherHorizontalDist = _b.dist,\n        otherHorizontalOffset = _b.offset,\n        isOtherHorizontalBound = _b.isBound,\n        isOtherHorizontalSnap = _b.isSnap,\n        _c = snapBoundInfo.vertical,\n        otherVerticalDist = _c.dist,\n        otherVerticalOffset = _c.offset,\n        isOtherVerticalBound = _c.isBound,\n        isOtherVerticalSnap = _c.isSnap;\n    var multiple = minus(endDirection, startDirection);\n\n    if (!otherVerticalOffset && !otherHorizontalOffset) {\n      return {\n        isBound: isOtherVerticalBound || isOtherHorizontalBound,\n        isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\n        sign: multiple,\n        offset: [0, 0]\n      };\n    }\n\n    var isVertical = otherHorizontalDist < otherVerticalDist;\n    var sizeOffset = solveNextOffset(otherStartPos, otherEndPos, -(isVertical ? otherVerticalOffset : otherHorizontalOffset), isVertical, datas).map(function (size, i) {\n      return size * (multiple[i] ? 2 / multiple[i] : 0);\n    });\n    return {\n      sign: multiple,\n      isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\n      isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\n      offset: sizeOffset\n    };\n  });\n}\n\nfunction getCheckSnapDirections(direction, keepRatio) {\n  var directions = [];\n  var fixedDirection = [-direction[0], -direction[1]];\n\n  if (direction[0] && direction[1]) {\n    directions.push([fixedDirection, [direction[0], -direction[1]]], [fixedDirection, [-direction[0], direction[1]]]);\n\n    if (keepRatio) {\n      // pass two direction condition\n      directions.push([fixedDirection, direction]);\n    }\n  } else if (direction[0]) {\n    // vertcal\n    if (keepRatio) {\n      directions.push([fixedDirection, [fixedDirection[0], -1]], [fixedDirection, [fixedDirection[0], 1]], [fixedDirection, [direction[0], -1]], [fixedDirection, direction], [fixedDirection, [direction[0], 1]]);\n    } else {\n      directions.push([[fixedDirection[0], -1], [direction[0], -1]], [[fixedDirection[0], 0], [direction[0], 0]], [[fixedDirection[0], 1], [direction[0], 1]]);\n    }\n  } else if (direction[1]) {\n    // horizontal\n    if (keepRatio) {\n      directions.push([fixedDirection, [-1, fixedDirection[1]]], [fixedDirection, [1, fixedDirection[1]]], [fixedDirection, [-1, direction[1]]], [fixedDirection, [1, direction[1]]], [fixedDirection, direction]);\n    } else {\n      directions.push([[-1, fixedDirection[1]], [-1, direction[1]]], [[0, fixedDirection[1]], [0, direction[1]]], [[1, fixedDirection[1]], [1, direction[1]]]);\n    }\n  } else {\n    // [0, 0] to all direction\n    directions.push([fixedDirection, [1, 0]], [fixedDirection, [-1, 0]], [fixedDirection, [0, -1]], [fixedDirection, [0, 1]], [[1, 0], [1, -1]], [[1, 0], [1, 1]], [[0, 1], [1, 1]], [[0, 1], [-1, 1]], [[-1, 0], [-1, -1]], [[-1, 0], [-1, 1]], [[0, -1], [1, -1]], [[0, -1], [-1, -1]]);\n  }\n\n  return directions;\n}\n\nfunction getSizeOffsetInfo(moveable, poses, direction, keepRatio, isRequest, datas) {\n  var directions = getCheckSnapDirections(direction, keepRatio);\n  var lines = getCheckSnapLines(poses, direction, keepRatio);\n\n  var offsets = __spreadArrays(getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas), getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas));\n\n  var widthOffsetInfo = getNearOffsetInfo(offsets, 0);\n  var heightOffsetInfo = getNearOffsetInfo(offsets, 1);\n  return {\n    width: {\n      isBound: widthOffsetInfo.isBound,\n      offset: widthOffsetInfo.offset[0]\n    },\n    height: {\n      isBound: heightOffsetInfo.isBound,\n      offset: heightOffsetInfo.offset[1]\n    }\n  };\n}\n\nfunction recheckSizeByTwoDirection(moveable, poses, width, height, maxWidth, maxHeight, direction, isRequest, datas) {\n  var snapPos = getPosByDirection(poses, direction);\n\n  var _a = checkMoveableSnapBounds(moveable, isRequest, [snapPos]),\n      horizontalOffset = _a.horizontal.offset,\n      verticalOffset = _a.vertical.offset;\n\n  if (verticalOffset || horizontalOffset) {\n    var _b = getDragDist({\n      datas: datas,\n      distX: -verticalOffset,\n      distY: -horizontalOffset\n    }),\n        nextWidthOffset = _b[0],\n        nextHeightOffset = _b[1];\n\n    var nextWidth = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);\n    var nextHeight = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);\n    return [nextWidth - width, nextHeight - height];\n  }\n\n  return [0, 0];\n}\n\nfunction checkSizeDist(moveable, getNextPoses, width, height, direction, fixedPos, isRequest, datas) {\n  var poses = getAbsolutePosesByState(moveable.state);\n  var keepRatio = moveable.props.keepRatio;\n  var widthOffset = 0;\n  var heightOffset = 0;\n\n  for (var i = 0; i < 2; ++i) {\n    var nextPoses = getNextPoses(widthOffset, heightOffset);\n\n    var _a = getSizeOffsetInfo(moveable, nextPoses, direction, keepRatio, isRequest, datas),\n        widthOffsetInfo = _a.width,\n        heightOffsetInfo = _a.height;\n\n    var isWidthBound = widthOffsetInfo.isBound;\n    var isHeightBound = heightOffsetInfo.isBound;\n    var nextWidthOffset = widthOffsetInfo.offset;\n    var nextHeightOffset = heightOffsetInfo.offset;\n\n    if (i === 1) {\n      if (!isWidthBound) {\n        nextWidthOffset = 0;\n      }\n\n      if (!isHeightBound) {\n        nextHeightOffset = 0;\n      }\n    }\n\n    if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\n      return [0, 0];\n    }\n\n    if (keepRatio) {\n      var widthDist = Math.abs(nextWidthOffset) * (width ? 1 / width : 1);\n      var heightDist = Math.abs(nextHeightOffset) * (height ? 1 / height : 1);\n      var isGetWidthOffset = isWidthBound && isHeightBound ? widthDist < heightDist : isHeightBound || !isWidthBound && widthDist < heightDist; // height * widthOffset = width * heighOffset\n\n      if (isGetWidthOffset) {\n        // width : height = ? : heightOffset\n        nextWidthOffset = width * nextHeightOffset / height;\n      } else {\n        // width : height = widthOffset : ?\n        nextHeightOffset = height * nextWidthOffset / width;\n      }\n    }\n\n    widthOffset += nextWidthOffset;\n    heightOffset += nextHeightOffset;\n  }\n\n  if (direction[0] && direction[1]) {\n    var _b = checkMaxBounds(moveable, poses, direction, fixedPos, datas),\n        maxWidth = _b.maxWidth,\n        maxHeight = _b.maxHeight;\n\n    var _c = recheckSizeByTwoDirection(moveable, getNextPoses(widthOffset, heightOffset), width + widthOffset, height + heightOffset, maxWidth, maxHeight, direction, isRequest, datas),\n        nextWidthOffset = _c[0],\n        nextHeightOffset = _c[1];\n\n    widthOffset += nextWidthOffset;\n    heightOffset += nextHeightOffset;\n  }\n\n  return [widthOffset, heightOffset];\n}\n\nfunction checkSnapRotate(moveable, rect, origin, rotation) {\n  if (!hasGuidelines(moveable, \"rotatable\")) {\n    return rotation;\n  }\n\n  var pos1 = rect.pos1,\n      pos2 = rect.pos2,\n      pos3 = rect.pos3,\n      pos4 = rect.pos4;\n  var rad = rotation * Math.PI / 180;\n  var prevPoses = [pos1, pos2, pos3, pos4].map(function (pos) {\n    return minus(pos, origin);\n  });\n  var nextPoses = prevPoses.map(function (pos) {\n    return rotate(pos, rad);\n  });\n\n  var result = __spreadArrays(checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation), checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation));\n\n  result.sort(function (a, b) {\n    return Math.abs(a - rotation) - Math.abs(b - rotation);\n  });\n\n  if (result.length) {\n    return result[0];\n  } else {\n    return rotation;\n  }\n}\n\nfunction checkSnapSize(moveable, width, height, direction, fixedPos, isRequest, datas) {\n  if (!hasGuidelines(moveable, \"resizable\")) {\n    return [0, 0];\n  }\n\n  var _a = moveable.state,\n      allMatrix = _a.allMatrix,\n      is3d = _a.is3d;\n  return checkSizeDist(moveable, function (widthOffset, heightOffset) {\n    return getNextFixedPoses(allMatrix, width + widthOffset, height + heightOffset, fixedPos, direction, is3d);\n  }, width, height, direction, fixedPos, isRequest, datas);\n}\n\nfunction checkSnapScale(moveable, scale, direction, fixedPos, isRequest, datas) {\n  var width = datas.width,\n      height = datas.height;\n\n  if (!hasGuidelines(moveable, \"scalable\")) {\n    return [0, 0];\n  }\n\n  var is3d = datas.is3d;\n  var sizeDist = checkSizeDist(moveable, function (widthOffset, heightOffset) {\n    return getNextFixedPoses(scaleMatrix(datas, plus(scale, [widthOffset / width, heightOffset / height])), width, height, fixedPos, direction, is3d);\n  }, width, height, direction, fixedPos, isRequest, datas);\n  return [sizeDist[0] / width, sizeDist[1] / height];\n}\n\nfunction solveEquation(pos1, pos2, snapOffset, isVertical) {\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (Math.abs(dx) < TINY_NUM) {\n    dx = 0;\n  }\n\n  if (Math.abs(dy) < TINY_NUM) {\n    dy = 0;\n  }\n\n  if (!dx) {\n    // y = 0 * x + b\n    // only horizontal\n    if (!isVertical) {\n      return [0, snapOffset];\n    }\n\n    return [0, 0];\n  }\n\n  if (!dy) {\n    // only vertical\n    if (isVertical) {\n      return [snapOffset, 0];\n    }\n\n    return [0, 0];\n  } // y = ax + b\n\n\n  var a = dy / dx;\n  var b = pos1[1] - a * pos1[0];\n\n  if (isVertical) {\n    // y = a * x + b\n    var y = a * (pos2[0] + snapOffset) + b;\n    return [snapOffset, y - pos2[1]];\n  } else {\n    // x = (y - b) / a\n    var x = (pos2[1] + snapOffset - b) / a;\n    return [x - pos2[0], snapOffset];\n  }\n}\n\nfunction startCheckSnapDrag(moveable, datas) {\n  datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\nfunction checkThrottleDragRotate(throttleDragRotate, _a, _b, _c, _d) {\n  var distX = _a[0],\n      distY = _a[1];\n  var isVerticalBound = _b[0],\n      isHorizontalBound = _b[1];\n  var isVerticalSnap = _c[0],\n      isHorizontalSnap = _c[1];\n  var verticalOffset = _d[0],\n      horizontalOffset = _d[1];\n  var offsetX = -verticalOffset;\n  var offsetY = -horizontalOffset;\n\n  if (throttleDragRotate && distX && distY) {\n    offsetX = 0;\n    offsetY = 0;\n    var adjustPoses = [];\n\n    if (isVerticalBound && isHorizontalBound) {\n      adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n    } else if (isVerticalBound) {\n      adjustPoses.push([verticalOffset, 0]);\n    } else if (isHorizontalBound) {\n      adjustPoses.push([0, horizontalOffset]);\n    } else if (isVerticalSnap && isHorizontalSnap) {\n      adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n    } else if (isVerticalSnap) {\n      adjustPoses.push([verticalOffset, 0]);\n    } else if (isHorizontalSnap) {\n      adjustPoses.push([0, horizontalOffset]);\n    }\n\n    if (adjustPoses.length) {\n      adjustPoses.sort(function (a, b) {\n        return getDistSize(minus([distX, distY], a)) - getDistSize(minus([distX, distY], b));\n      });\n      var adjustPos = adjustPoses[0];\n\n      if (adjustPos[0] && Math.abs(distX) > TINY_NUM) {\n        offsetX = -adjustPos[0];\n        offsetY = distY * Math.abs(distX + offsetX) / Math.abs(distX) - distY;\n      } else if (adjustPos[1] && Math.abs(distY) > TINY_NUM) {\n        var prevDistY = distY;\n        offsetY = -adjustPos[1];\n        offsetX = distX * Math.abs(distY + offsetY) / Math.abs(prevDistY) - distX;\n      }\n\n      if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\n        if (Math.abs(offsetX) > TINY_NUM && Math.abs(offsetX) < Math.abs(verticalOffset)) {\n          var scale = Math.abs(verticalOffset) / Math.abs(offsetX);\n          offsetX *= scale;\n          offsetY *= scale;\n        } else if (Math.abs(offsetY) > TINY_NUM && Math.abs(offsetY) < Math.abs(horizontalOffset)) {\n          var scale = Math.abs(horizontalOffset) / Math.abs(offsetY);\n          offsetX *= scale;\n          offsetY *= scale;\n        } else {\n          offsetX = maxOffset(-verticalOffset, offsetX);\n          offsetY = maxOffset(-horizontalOffset, offsetY);\n        }\n      }\n    }\n  } else {\n    offsetX = distX || isVerticalBound ? -verticalOffset : 0;\n    offsetY = distY || isHorizontalBound ? -horizontalOffset : 0;\n  }\n\n  return [offsetX, offsetY];\n}\n\nfunction checkSnapDrag(moveable, distX, distY, throttleDragRotate, isRequest, datas) {\n  if (!hasGuidelines(moveable, \"draggable\")) {\n    return [{\n      isSnap: false,\n      isBound: false,\n      offset: 0\n    }, {\n      isSnap: false,\n      isBound: false,\n      offset: 0\n    }];\n  }\n\n  var poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);\n\n  var _a = getRect(poses),\n      left = _a.left,\n      right = _a.right,\n      top = _a.top,\n      bottom = _a.bottom;\n\n  var snapCenter = moveable.props.snapCenter;\n  var snapPoses = [[left, top], [right, top], [left, bottom], [right, bottom]];\n\n  if (snapCenter) {\n    snapPoses.push([(left + right) / 2, (top + bottom) / 2]);\n  }\n\n  var _b = checkMoveableSnapBounds(moveable, isRequest, snapPoses, poses),\n      verticalSnapBoundInfo = _b.vertical,\n      horizontalSnapBoundInfo = _b.horizontal;\n\n  var _c = getInnerBoundDragInfo(moveable, poses, datas),\n      verticalInnerBoundInfo = _c.vertical,\n      horizontalInnerBoundInfo = _c.horizontal;\n\n  var isVerticalSnap = verticalSnapBoundInfo.isSnap;\n  var isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\n  var isVerticalBound = verticalSnapBoundInfo.isBound || verticalInnerBoundInfo.isBound;\n  var isHorizontalBound = horizontalSnapBoundInfo.isBound || horizontalInnerBoundInfo.isBound;\n  var verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);\n  var horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);\n\n  var _d = checkThrottleDragRotate(throttleDragRotate, [distX, distY], [isVerticalBound, isHorizontalBound], [isVerticalSnap, isHorizontalSnap], [verticalOffset, horizontalOffset]),\n      offsetX = _d[0],\n      offsetY = _d[1];\n\n  return [{\n    isBound: isVerticalBound,\n    isSnap: isVerticalSnap,\n    offset: offsetX\n  }, {\n    isBound: isHorizontalBound,\n    isSnap: isHorizontalSnap,\n    offset: offsetY\n  }];\n}\n\nfunction getSnapGuidelines(posInfos) {\n  var guidelines = [];\n  posInfos.forEach(function (posInfo) {\n    posInfo.guidelineInfos.forEach(function (_a) {\n      var guideline = _a.guideline;\n\n      if (guidelines.indexOf(guideline) > -1) {\n        return;\n      }\n\n      guidelines.push(guideline);\n    });\n  });\n  return guidelines;\n}\n\nfunction getElementGuidelineDist(elementPos, elementSize, targetPos, targetSize) {\n  // relativePos < 0  => element(l)  ---  (r)target\n  // relativePos > 0  => target(l)   ---  (r)element\n  var relativePos = elementPos - targetPos;\n  var startPos = relativePos < 0 ? relativePos + elementSize : targetSize;\n  var endPos = relativePos < 0 ? 0 : relativePos;\n  var size = endPos - startPos;\n  return {\n    size: size,\n    pos: startPos\n  };\n}\n\nfunction groupByElementGuidelines(guidelines, clientPos, size, index) {\n  var groupInfos = [];\n  var group = groupBy(guidelines.filter(function (_a) {\n    var element = _a.element,\n        gap = _a.gap;\n    return element && !gap;\n  }), function (_a) {\n    var element = _a.element,\n        pos = _a.pos;\n    var elementPos = pos[index];\n    var sign = Math.min(0, elementPos - clientPos) < 0 ? -1 : 1;\n    var groupKey = sign + \"_\" + pos[index ? 0 : 1];\n    var groupInfo = find(groupInfos, function (_a) {\n      var groupElement = _a[0],\n          groupPos = _a[1];\n      return element === groupElement && elementPos === groupPos;\n    });\n\n    if (groupInfo) {\n      return groupInfo[2];\n    }\n\n    groupInfos.push([element, elementPos, groupKey]);\n    return groupKey;\n  });\n  group.forEach(function (elementGuidelines) {\n    elementGuidelines.sort(function (a, b) {\n      var result = getElementGuidelineDist(a.pos[index], a.size, clientPos, size).size - getElementGuidelineDist(b.pos[index], a.size, clientPos, size).size;\n      return result || a.pos[index ? 0 : 1] - b.pos[index ? 0 : 1];\n    });\n  });\n  return group;\n}\n\nfunction renderElementGroup(group, _a, minPos, clientPos, clientSize, targetPos, snapThreshold, isDisplaySnapDigit, snapDigit, index, snapDistFormat, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return flat(group.map(function (elementGuidelines, i) {\n    var isFirstRenderSize = true;\n    return elementGuidelines.map(function (_a, j) {\n      var _b;\n\n      var pos = _a.pos,\n          size = _a.size;\n\n      var _c = getElementGuidelineDist(pos[index], size, clientPos, clientSize),\n          linePos = _c.pos,\n          lineSize = _c.size;\n\n      if (lineSize < snapThreshold) {\n        return null;\n      }\n\n      var isRenderSize = isFirstRenderSize;\n      isFirstRenderSize = false;\n      var snapSize = isDisplaySnapDigit && isRenderSize ? parseFloat(lineSize.toFixed(snapDigit)) : 0;\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", directionName, \"guideline\", \"dashed\"),\n        \"data-size\": snapSize > 0 ? snapDistFormat(snapSize) : \"\",\n        key: directionName + \"LinkGuidline\" + i + \"-\" + j,\n        style: (_b = {}, _b[posName1] = minPos + linePos + \"px\", _b[posName2] = -targetPos + pos[index ? 0 : 1] + \"px\", _b[sizeName] = lineSize + \"px\", _b)\n      });\n    });\n  }));\n}\n\nfunction renderSnapPoses(snapPoses, _a, minPos, targetPos, size, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return snapPoses.map(function (_a, i) {\n    var _b;\n\n    var type = _a.type,\n        pos = _a.pos;\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", \"target\", \"bold\", type),\n      key: directionName + \"TargetGuidline\" + i,\n      style: (_b = {}, _b[posName1] = minPos + \"px\", _b[posName2] = -targetPos + pos + \"px\", _b[sizeName] = size + \"px\", _b)\n    });\n  });\n}\n\nfunction renderGuidelines(guidelines, _a, targetPos1, targetPos2, index, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return guidelines.map(function (guideline, i) {\n    var _a;\n\n    var pos = guideline.pos,\n        size = guideline.size,\n        element = guideline.element;\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", element ? \"bold\" : \"\"),\n      key: directionName + \"Guidline\" + i,\n      style: (_a = {}, _a[posName1] = -targetPos1 + pos[index] + \"px\", _a[posName2] = -targetPos2 + pos[index ? 0 : 1] + \"px\", _a[sizeName] = size + \"px\", _a)\n    });\n  });\n}\n\nfunction getGapGuidelinesToStart(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {\n  var absGap = Math.abs(gap);\n  var start = guidelinePos[index] + (gap > 0 ? targetSizes[0] : 0);\n  return guidelines.filter(function (_a) {\n    var gapPos = _a.pos;\n    return gapPos[index] <= targetPos[index];\n  }).sort(function (_a, _b) {\n    var aPos = _a.pos;\n    var bPos = _b.pos;\n    return bPos[index] - aPos[index];\n  }).filter(function (_a) {\n    var gapPos = _a.pos,\n        gapSizes = _a.sizes;\n    var nextPos = gapPos[index];\n\n    if (throttle(nextPos + gapSizes[index], 0.0001) === throttle(start - absGap, 0.0001)) {\n      start = nextPos;\n      return true;\n    }\n\n    return false;\n  }).map(function (gapGuideline) {\n    var renderPos = -targetPos[index] + gapGuideline.pos[index] + gapGuideline.sizes[index];\n    return __assign(__assign({}, gapGuideline), {\n      gap: gap,\n      renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]\n    });\n  });\n}\n\nfunction getGapGuidelinesToEnd(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {\n  var absGap = Math.abs(gap);\n  var start = guidelinePos[index] + (gap < 0 ? targetSizes[index] : 0);\n  return guidelines.filter(function (_a) {\n    var gapPos = _a.pos;\n    return gapPos[index] > targetPos[index];\n  }).sort(function (_a, _b) {\n    var aPos = _a.pos;\n    var bPos = _b.pos;\n    return aPos[index] - bPos[index];\n  }).filter(function (_a) {\n    var gapPos = _a.pos,\n        gapSizes = _a.sizes;\n    var nextPos = gapPos[index];\n\n    if (throttle(nextPos, 0.0001) === throttle(start + absGap, 0.0001)) {\n      start = nextPos + gapSizes[index];\n      return true;\n    }\n\n    return false;\n  }).map(function (gapGuideline) {\n    var renderPos = -targetPos[index] + gapGuideline.pos[index] - absGap;\n    return __assign(__assign({}, gapGuideline), {\n      gap: gap,\n      renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]\n    });\n  });\n}\n\nfunction getGapGuidelines$1(guidelines, type, targetPos, targetSizes) {\n  var elementGuidelines = guidelines.filter(function (_a) {\n    var element = _a.element,\n        gap = _a.gap,\n        guidelineType = _a.type;\n    return element && gap && guidelineType === type;\n  });\n\n  var _a = type === \"vertical\" ? [0, 1] : [1, 0],\n      index = _a[0],\n      otherIndex = _a[1];\n\n  return flat(elementGuidelines.map(function (guideline, i) {\n    var pos = guideline.pos;\n    var gap = guideline.gap;\n    var gapGuidelines = guideline.gapGuidelines;\n    var sizes = guideline.sizes;\n    var offset = minOffset(pos[otherIndex] + sizes[otherIndex] - targetPos[otherIndex], pos[otherIndex] - targetPos[otherIndex] - targetSizes[otherIndex]);\n    var minSize = Math.min(sizes[otherIndex], targetSizes[otherIndex]);\n\n    if (offset > 0 && offset > minSize) {\n      offset = (offset - minSize / 2) * 2;\n    } else if (offset < 0 && offset < -minSize) {\n      offset = (offset + minSize / 2) * 2;\n    }\n\n    var otherPos = (offset > 0 ? 0 : targetSizes[otherIndex]) + offset / 2;\n    return __spreadArrays(getGapGuidelinesToStart(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos), getGapGuidelinesToEnd(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos));\n  }));\n}\n\nfunction renderGapGuidelines(moveable, gapGuidelines, type, _a, snapDistFormat, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  var _b = moveable.props,\n      _c = _b.snapDigit,\n      snapDigit = _c === void 0 ? 0 : _c,\n      _d = _b.isDisplaySnapDigit,\n      isDisplaySnapDigit = _d === void 0 ? true : _d;\n  var otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n\n  var _e = type === \"vertical\" ? [0, 1] : [1, 0],\n      index = _e[0],\n      otherIndex = _e[1];\n\n  return gapGuidelines.map(function (_a, i) {\n    var _b;\n\n    var renderPos = _a.renderPos,\n        gap = _a.gap;\n    var absGap = Math.abs(gap);\n    var snapSize = isDisplaySnapDigit ? parseFloat(absGap.toFixed(snapDigit)) : 0;\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", \"gap\"),\n      \"data-size\": snapSize > 0 ? snapDistFormat(snapSize) : \"\",\n      key: otherType + \"GapGuideline\" + i,\n      style: (_b = {}, _b[posName1] = renderPos[index] + \"px\", _b[posName2] = renderPos[otherIndex] + \"px\", _b[sizeName] = absGap + \"px\", _b)\n    });\n  });\n}\n\nfunction addBoundGuidelines(moveable, verticalPoses, horizontalPoses, verticalSnapPoses, horizontalSnapPoses, externalBounds) {\n  var _a = checkBoundPoses(externalBounds || moveable.props.bounds, verticalPoses, horizontalPoses),\n      verticalBoundInfos = _a.vertical,\n      horizontalBoundInfos = _a.horizontal;\n\n  verticalBoundInfos.forEach(function (info) {\n    if (info.isBound) {\n      verticalSnapPoses.push({\n        type: \"bounds\",\n        pos: info.pos\n      });\n    }\n  });\n  horizontalBoundInfos.forEach(function (info) {\n    if (info.isBound) {\n      horizontalSnapPoses.push({\n        type: \"bounds\",\n        pos: info.pos\n      });\n    }\n  });\n\n  var _b = checkInnerBoundPoses(moveable),\n      verticalInnerBoundPoses = _b.vertical,\n      horizontalInnerBoundPoses = _b.horizontal;\n\n  verticalInnerBoundPoses.forEach(function (innerPos) {\n    if (findIndex(verticalSnapPoses, function (_a) {\n      var type = _a.type,\n          pos = _a.pos;\n      return type === \"bounds\" && pos === innerPos;\n    }) >= 0) {\n      return;\n    }\n\n    verticalSnapPoses.push({\n      type: \"bounds\",\n      pos: innerPos\n    });\n  });\n  horizontalInnerBoundPoses.forEach(function (innerPos) {\n    if (findIndex(horizontalSnapPoses, function (_a) {\n      var type = _a.type,\n          pos = _a.pos;\n      return type === \"bounds\" && pos === innerPos;\n    }) >= 0) {\n      return;\n    }\n\n    horizontalSnapPoses.push({\n      type: \"bounds\",\n      pos: innerPos\n    });\n  });\n}\n/**\n * @namespace Moveable.Snappable\n * @description Whether or not target can be snapped to the guideline. (default: false)\n * @sort 2\n */\n\n\nvar Snappable = {\n  name: \"snappable\",\n  props: {\n    snappable: [Boolean, Array],\n    snapCenter: Boolean,\n    snapHorizontal: Boolean,\n    snapVertical: Boolean,\n    snapElement: Boolean,\n    snapGap: Boolean,\n    isDisplaySnapDigit: Boolean,\n    snapDigit: Number,\n    snapThreshold: Number,\n    horizontalGuidelines: Array,\n    verticalGuidelines: Array,\n    elementGuidelines: Array,\n    bounds: Object,\n    innerBounds: Object,\n    snapDistFormat: Function\n  },\n  events: {\n    onSnap: \"snap\"\n  },\n  css: [\":host {\\n    --bounds-color: #d66;\\n}\", \".guideline {\\npointer-events: none;\\nz-index: 2;\\n}\", \".line.guideline.bounds {\\n    background: #d66;\\n    background: var(--bounds-color);\\n}\"],\n  render: function (moveable, React) {\n    var _a = moveable.state,\n        targetTop = _a.top,\n        targetLeft = _a.left,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        snapRenderInfo = _a.snapRenderInfo,\n        targetClientRect = _a.targetClientRect,\n        containerClientRect = _a.containerClientRect,\n        is3d = _a.is3d,\n        rootMatrix = _a.rootMatrix;\n\n    if (!snapRenderInfo || !hasGuidelines(moveable, \"\")) {\n      return [];\n    }\n\n    var n = is3d ? 4 : 3;\n    var minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n    var minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n    var containerPos = caculateContainerPos(rootMatrix, containerClientRect, n);\n\n    var _b = caculateInversePosition(rootMatrix, [targetClientRect.left - containerPos[0], targetClientRect.top - containerPos[1]], n),\n        clientLeft = _b[0],\n        clientTop = _b[1];\n\n    var _c = moveable.props,\n        _d = _c.snapThreshold,\n        snapThreshold = _d === void 0 ? 5 : _d,\n        _e = _c.snapDigit,\n        snapDigit = _e === void 0 ? 0 : _e,\n        _f = _c.isDisplaySnapDigit,\n        isDisplaySnapDigit = _f === void 0 ? true : _f,\n        _g = _c.snapDistFormat,\n        snapDistFormat = _g === void 0 ? function (v) {\n      return v;\n    } : _g;\n    var externalPoses = snapRenderInfo.externalPoses || [];\n    var poses = getAbsolutePosesByState(moveable.state);\n    var verticalSnapPoses = [];\n    var horizontalSnapPoses = [];\n    var verticalGuidelines = [];\n    var horizontalGuidelines = [];\n    var snapInfos = [];\n\n    var _h = getRect(poses),\n        width = _h.width,\n        height = _h.height,\n        top = _h.top,\n        left = _h.left,\n        bottom = _h.bottom,\n        right = _h.right;\n\n    var hasExternalPoses = externalPoses.length > 0;\n    var externalRect = hasExternalPoses ? getRect(externalPoses) : {};\n\n    if (!snapRenderInfo.request) {\n      if (snapRenderInfo.direction) {\n        snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction));\n      }\n\n      if (snapRenderInfo.snap) {\n        var rect = getRect(poses);\n\n        if (snapRenderInfo.center) {\n          rect.middle = (rect.top + rect.bottom) / 2;\n          rect.center = (rect.left + rect.right) / 2;\n        }\n\n        snapInfos.push(checkSnaps(moveable, rect, true, 1));\n      }\n\n      if (hasExternalPoses) {\n        if (snapRenderInfo.center) {\n          externalRect.middle = (externalRect.top + externalRect.bottom) / 2;\n          externalRect.center = (externalRect.left + externalRect.right) / 2;\n        }\n\n        snapInfos.push(checkSnaps(moveable, externalRect, true, 1));\n      }\n\n      snapInfos.forEach(function (snapInfo) {\n        var verticalPosInfos = snapInfo.vertical.posInfos,\n            horizontalPosInfos = snapInfo.horizontal.posInfos;\n        verticalSnapPoses.push.apply(verticalSnapPoses, verticalPosInfos.map(function (posInfo) {\n          return {\n            type: \"snap\",\n            pos: posInfo.pos\n          };\n        }));\n        horizontalSnapPoses.push.apply(horizontalSnapPoses, horizontalPosInfos.map(function (posInfo) {\n          return {\n            type: \"snap\",\n            pos: posInfo.pos\n          };\n        }));\n        verticalGuidelines.push.apply(verticalGuidelines, getSnapGuidelines(verticalPosInfos));\n        horizontalGuidelines.push.apply(horizontalGuidelines, getSnapGuidelines(horizontalPosInfos));\n      });\n    }\n\n    addBoundGuidelines(moveable, [left, right], [top, bottom], verticalSnapPoses, horizontalSnapPoses);\n\n    if (hasExternalPoses) {\n      addBoundGuidelines(moveable, [externalRect.left, externalRect.right], [externalRect.top, externalRect.bottom], verticalSnapPoses, horizontalSnapPoses, snapRenderInfo.externalBounds);\n    }\n\n    var elementHorizontalGroup = groupByElementGuidelines(horizontalGuidelines, clientLeft, width, 0);\n    var elementVerticalGroup = groupByElementGuidelines(verticalGuidelines, clientTop, height, 1);\n    var horizontalNames = [\"horizontal\", \"left\", \"top\", \"width\"];\n    var verticalNames = [\"vertical\", \"top\", \"left\", \"height\"];\n    var gapVerticalGuidelines = getGapGuidelines$1(verticalGuidelines, \"vertical\", [targetLeft, targetTop], [width, height]);\n    var gapHorizontalGuidelines = getGapGuidelines$1(horizontalGuidelines, \"horizontal\", [targetLeft, targetTop], [width, height]);\n\n    var allGuidelines = __spreadArrays(verticalGuidelines, horizontalGuidelines);\n\n    triggerEvent(moveable, \"onSnap\", {\n      guidelines: allGuidelines.filter(function (_a) {\n        var element = _a.element;\n        return !element;\n      }),\n      elements: groupBy(allGuidelines.filter(function (_a) {\n        var element = _a.element;\n        return element;\n      }), function (_a) {\n        var element = _a.element;\n        return element;\n      }),\n      gaps: __spreadArrays(gapVerticalGuidelines, gapHorizontalGuidelines)\n    }, true);\n    return __spreadArrays(renderGapGuidelines(moveable, gapVerticalGuidelines, \"vertical\", horizontalNames, snapDistFormat, React), renderGapGuidelines(moveable, gapHorizontalGuidelines, \"horizontal\", verticalNames, snapDistFormat, React), renderElementGroup(elementHorizontalGroup, horizontalNames, minLeft, clientLeft, width, targetTop, snapThreshold, isDisplaySnapDigit, snapDigit, 0, snapDistFormat, React), renderElementGroup(elementVerticalGroup, verticalNames, minTop, clientTop, height, targetLeft, snapThreshold, isDisplaySnapDigit, snapDigit, 1, snapDistFormat, React), renderSnapPoses(horizontalSnapPoses, horizontalNames, minLeft, targetTop, width, React), renderSnapPoses(verticalSnapPoses, verticalNames, minTop, targetLeft, height, React), renderGuidelines(horizontalGuidelines, horizontalNames, targetLeft, targetTop, 0, React), renderGuidelines(verticalGuidelines, verticalNames, targetTop, targetLeft, 1, React));\n  },\n  dragStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = {\n      request: e.isRequest,\n      snap: true,\n      center: true\n    };\n    snapStart(moveable);\n  },\n  pinchStart: function (moveable) {\n    this.unset(moveable);\n  },\n  dragEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragControlCondition: function (e) {\n    if (directionCondition(e) || dragControlCondition(e)) {\n      return true;\n    }\n\n    if (!e.isRequest && e.inputEvent) {\n      return hasClass(e.inputEvent.target, prefix(\"snap-control\"));\n    }\n  },\n  dragControlStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = null;\n    snapStart(moveable);\n  },\n  dragControlEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragGroupStart: function (moveable, e) {\n    this.dragStart(moveable, e);\n  },\n  dragGroupEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragGroupControlStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = null;\n    snapStart(moveable);\n  },\n  dragGroupControlEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  unset: function (moveable) {\n    var state = moveable.state;\n    state.enableSnap = false;\n    state.guidelines = [];\n    state.snapRenderInfo = null;\n  }\n};\n/**\n* Whether or not target can be snapped to the guideline. (default: false)\n* @name Moveable.Snappable#snappable\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* moveable.snappable = true;\n*/\n\n/**\n * When you drag, make the snap in the center of the target. (default: false)\n * @name Moveable.Snappable#snapCenter\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n * });\n *\n * moveable.snapCenter = true;\n */\n\n/**\n * When you drag, make the snap in the vertical guidelines. (default: true)\n * @name Moveable.Snappable#snapVertical\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapVertical = false;\n */\n\n/**\n * When you drag, make the snap in the horizontal guidelines. (default: true)\n * @name Moveable.Snappable#snapHorizontal\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapHorizontal = false;\n */\n\n/**\n * When you drag, make the gap snap in the element guidelines. (default: true)\n * @name Moveable.Snappable#snapGap\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n *   snapGap: true,\n * });\n *\n * moveable.snapGap = false;\n */\n\n/**\n * When you drag, make the snap in the element guidelines. (default: true)\n * @name Moveable.Snappable#snapElement\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapElement = false;\n */\n\n/**\n * Distance value that can snap to guidelines. (default: 5)\n * @name Moveable.Snappable#snapThreshold\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapThreshold = 5;\n */\n\n/**\n * Add guidelines in the horizontal direction. (default: [])\n * @name Moveable.Snappable#horizontalGuidlines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.horizontalGuidlines = [100, 200, 500];\n */\n\n/**\n * Add guidelines in the vertical direction. (default: [])\n * @name Moveable.Snappable#verticalGuidlines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.verticalGuidlines = [100, 200, 500];\n */\n\n/**\n * Add guidelines for the element. (default: [])\n * @name Moveable.Snappable#elementGuidelines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.elementGuidelines = [\n *   document.querySelector(\".element\"),\n * ];\n */\n\n/**\n * You can set up boundaries. (default: null)\n * @name Moveable.Snappable#bounds\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.bounds = { left: 0, right: 1000, top: 0, bottom: 1000};\n */\n\n/**\n * You can set up inner boundaries. (default: null)\n * @name Moveable.Snappable#innerBounds\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.innerBounds = { left: 500, top: 500, width: 100, height: 100};\n */\n\n/**\n * snap distance digits (default: 0)\n * @name Moveable.Snappable#snapDigit\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapDigit = 0\n */\n\n/**\n * Whether to show snap distance (default: true)\n * @name Moveable.Snappable#isDisplaySnapDigit\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.isDisplaySnapDigit = true;\n */\n\n/**\n * You can set the text format of the distance shown in the guidelines. (default: self)\n * @name Moveable.Snappable#snapDistFormat\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  snappable: true,\n *  snapDistFormat: v => v,\n * });\n * moveable.snapDistFormat = v => `${v}px`;\n */\n\n/**\n * When you drag or dragControl, the `snap` event is called.\n * @memberof Moveable.Snappable\n * @event snap\n * @param {Moveable.Snappable.OnSnap} - Parameters for the `snap` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     snappable: true\n * });\n * moveable.on(\"snap\", e => {\n *     console.log(\"onSnap\", e);\n * });\n */\n\n/**\n * @namespace Draggable\n * @memberof Moveable\n * @description Draggable refers to the ability to drag and move targets.\n */\n\nvar Draggable = {\n  name: \"draggable\",\n  props: {\n    draggable: Boolean,\n    throttleDrag: Number,\n    throttleDragRotate: Number,\n    startDragRotate: Number\n  },\n  events: {\n    onDragStart: \"dragStart\",\n    onDrag: \"drag\",\n    onDragEnd: \"dragEnd\",\n    onDragGroupStart: \"dragGroupStart\",\n    onDragGroup: \"dragGroup\",\n    onDragGroupEnd: \"dragGroupEnd\"\n  },\n  render: function (moveable, React) {\n    var throttleDragRotate = moveable.props.throttleDragRotate;\n    var _a = moveable.state,\n        dragInfo = _a.dragInfo,\n        beforeOrigin = _a.beforeOrigin;\n\n    if (!throttleDragRotate || !dragInfo) {\n      return [];\n    }\n\n    var dist = dragInfo.dist;\n\n    if (!dist[0] && !dist[1]) {\n      return [];\n    }\n\n    var width = getDistSize(dist);\n    var rad = getRad(dist, [0, 0]);\n    return [React.createElement(\"div\", {\n      className: prefix(\"line\", \"horizontal\", \"dragline\", \"dashed\"),\n      key: \"dragRotateGuideline\",\n      style: {\n        width: width + \"px\",\n        transform: \"translate(\" + beforeOrigin[0] + \"px, \" + beforeOrigin[1] + \"px) rotate(\" + rad + \"rad)\"\n      }\n    })];\n  },\n  dragStart: function (moveable, e) {\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentGesto = e.parentGesto;\n    var state = moveable.state;\n    var target = state.target,\n        gesto = state.gesto;\n\n    if (gesto) {\n      return false;\n    }\n\n    state.gesto = parentGesto || moveable.targetGesto;\n    var style = window.getComputedStyle(target);\n    datas.datas = {};\n    datas.left = parseFloat(style.left || \"\") || 0;\n    datas.top = parseFloat(style.top || \"\") || 0;\n    datas.bottom = parseFloat(style.bottom || \"\") || 0;\n    datas.right = parseFloat(style.right || \"\") || 0;\n    datas.startValue = [0, 0];\n    setDragStart(moveable, e);\n    setDefaultTransformIndex(e);\n    startCheckSnapDrag(moveable, datas);\n    datas.prevDist = [0, 0];\n    datas.prevBeforeDist = [0, 0];\n    datas.isDrag = false;\n    var params = fillParams(moveable, e, __assign({\n      set: function (translate) {\n        datas.startValue = translate;\n      }\n    }, fillTransformStartEvent(e)));\n    var result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n    if (result !== false) {\n      datas.isDrag = true;\n      moveable.state.dragInfo = {\n        startRect: moveable.getRect(),\n        dist: [0, 0]\n      };\n    } else {\n      state.gesto = null;\n      datas.isPinch = false;\n    }\n\n    return datas.isDrag ? params : false;\n  },\n  drag: function (moveable, e) {\n    resolveTransformEvent(e, \"translate\");\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        isRequest = e.isRequest;\n    var distX = e.distX,\n        distY = e.distY;\n    var isDrag = datas.isDrag,\n        prevDist = datas.prevDist,\n        prevBeforeDist = datas.prevBeforeDist,\n        startValue = datas.startValue;\n\n    if (!isDrag) {\n      return;\n    }\n\n    var props = moveable.props;\n    var parentMoveable = props.parentMoveable;\n    var throttleDrag = parentEvent ? 0 : props.throttleDrag || 0;\n    var throttleDragRotate = parentEvent ? 0 : props.throttleDragRotate || 0;\n    var isSnap = false;\n    var dragRotateRad = 0;\n\n    if (!parentEvent && throttleDragRotate > 0 && (distX || distY)) {\n      var startDragRotate = props.startDragRotate || 0;\n      var deg = throttle(startDragRotate + getRad([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate) - startDragRotate;\n      var ry = distY * Math.abs(Math.cos((deg - 90) / 180 * Math.PI));\n      var rx = distX * Math.abs(Math.cos(deg / 180 * Math.PI));\n      var r = getDistSize([rx, ry]);\n      dragRotateRad = deg * Math.PI / 180;\n      distX = r * Math.cos(dragRotateRad);\n      distY = r * Math.sin(dragRotateRad);\n    }\n\n    if (!isPinch && !parentEvent && !parentFlag && (!throttleDragRotate || distX || distY)) {\n      var _a = checkSnapDrag(moveable, distX, distY, throttleDragRotate, isRequest, datas),\n          verticalInfo = _a[0],\n          horizontalInfo = _a[1];\n\n      var isVerticalSnap = verticalInfo.isSnap,\n          isVerticalBound = verticalInfo.isBound,\n          verticalOffset = verticalInfo.offset;\n      var isHorizontalSnap = horizontalInfo.isSnap,\n          isHorizontalBound = horizontalInfo.isBound,\n          horizontalOffset = horizontalInfo.offset;\n      isSnap = isVerticalSnap || isHorizontalSnap || isVerticalBound || isHorizontalBound;\n      distX += verticalOffset;\n      distY += horizontalOffset;\n    }\n\n    datas.passDeltaX = distX - (datas.passDistX || 0);\n    datas.passDeltaY = distY - (datas.passDistY || 0);\n    datas.passDistX = distX;\n    datas.passDistY = distY;\n    var beforeTranslate = plus(getBeforeDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }), startValue);\n    var translate = plus(getTransformDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }), startValue);\n\n    if (!throttleDragRotate && !isSnap) {\n      throttleArray(translate, throttleDrag);\n      throttleArray(beforeTranslate, throttleDrag);\n    }\n\n    var beforeDist = minus(beforeTranslate, startValue);\n    var dist = minus(translate, startValue);\n    var delta = minus(dist, prevDist);\n    var beforeDelta = minus(beforeDist, prevBeforeDist);\n    datas.prevDist = dist;\n    datas.prevBeforeDist = beforeDist;\n    var left = datas.left + beforeDist[0];\n    var top = datas.top + beforeDist[1];\n    var right = datas.right - beforeDist[0];\n    var bottom = datas.bottom - beforeDist[1];\n    var nextTransform = convertTransformFormat(datas, \"translate(\" + translate[0] + \"px, \" + translate[1] + \"px)\", \"translate(\" + dist[0] + \"px, \" + dist[1] + \"px)\");\n    moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\n\n    if (!parentEvent && !parentMoveable && delta.every(function (num) {\n      return !num;\n    }) && beforeDelta.some(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var _b = moveable.state,\n        width = _b.width,\n        height = _b.height;\n    var params = fillParams(moveable, e, {\n      transform: nextTransform,\n      dist: dist,\n      delta: delta,\n      translate: translate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeTranslate: beforeTranslate,\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: width,\n      height: height,\n      isPinch: isPinch\n    });\n    !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n    return params;\n  },\n  dragEnd: function (moveable, e) {\n    var parentEvent = e.parentEvent,\n        datas = e.datas,\n        isDrag = e.isDrag;\n    moveable.state.gesto = null;\n    moveable.state.dragInfo = null;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    datas.isDrag = false;\n    !parentEvent && triggerEvent(moveable, \"onDragEnd\", fillEndParams(moveable, e, {}));\n    return isDrag;\n  },\n  dragGroupStart: function (moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY;\n    var params = this.dragStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var events = triggerChildGesto(moveable, this, \"dragStart\", [clientX || 0, clientY || 0], e, false);\n\n    var nextParams = __assign(__assign({}, params), {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n    datas.isDrag = result !== false;\n    return datas.isDrag ? params : false;\n  },\n  dragGroup: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    var params = this.drag(moveable, e);\n    var _a = e.datas,\n        passDeltaX = _a.passDeltaX,\n        passDeltaY = _a.passDeltaY;\n    var events = triggerChildGesto(moveable, this, \"drag\", [passDeltaX, passDeltaY], e, false);\n\n    if (!params) {\n      return;\n    }\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onDragGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    this.dragEnd(moveable, e);\n    triggerChildGesto(moveable, this, \"dragEnd\", [0, 0], e, false);\n    triggerEvent(moveable, \"onDragGroupEnd\", fillEndParams(moveable, e, {\n      targets: moveable.props.targets\n    }));\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Draggable#request\n   * @param {object} [e] - the draggable's request parameter\n   * @param {number} [e.x] - x position\n   * @param {number} [e.y] - y position\n   * @param {number} [e.deltaX] - X number to move\n   * @param {number} [e.deltaY] - Y number to move\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * // Use Relative Value\n   * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n   * // Use Absolute Value\n   * moveable.request(\"draggable\", { x: 200, y: 100 }, true);\n   *\n   * // requestStart\n   * const requester = moveable.request(\"draggable\");\n   *\n   * // request\n   * // Use Relative Value\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * // Use Absolute Value\n   * moveable.request(\"draggable\", { x: 200, y: 100 });\n   * moveable.request(\"draggable\", { x: 220, y: 100 });\n   * moveable.request(\"draggable\", { x: 240, y: 100 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function (moveable) {\n    var datas = {};\n    var rect = moveable.getRect();\n    var distX = 0;\n    var distY = 0;\n    return {\n      isControl: false,\n      requestStart: function () {\n        return {\n          datas: datas\n        };\n      },\n      request: function (e) {\n        if (\"x\" in e) {\n          distX = e.x - rect.left;\n        } else if (\"deltaX\" in e) {\n          distX += e.deltaX;\n        }\n\n        if (\"y\" in e) {\n          distY = e.y - rect.top;\n        } else if (\"deltaY\" in e) {\n          distY += e.deltaY;\n        }\n\n        return {\n          datas: datas,\n          distX: distX,\n          distY: distY\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  },\n  unset: function (moveable) {\n    moveable.state.dragInfo = null;\n  }\n};\n/**\n * Whether or not target can be dragged. (default: false)\n * @name Moveable.Draggable#draggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.draggable = true;\n */\n\n/**\n * throttle of x, y when drag.\n * @name Moveable.Draggable#throttleDrag\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleDrag = 1;\n */\n\n/**\n* throttle of angle of x, y when drag.\n* @name Moveable.Draggable#throttleDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* moveable.throttleDragRotate = 45;\n*/\n\n/**\n* start angle of throttleDragRotate of x, y when drag.\n* @name Moveable.Draggable#startDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* // 45, 135, 225, 315\n* moveable.throttleDragRotate = 90;\n* moveable.startDragRotate = 45;\n*/\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable.Draggable\n * @event dragStart\n * @param {Moveable.Draggable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable.Draggable\n * @event drag\n * @param {Moveable.Draggable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable.Draggable\n * @event dragEnd\n * @param {Moveable.Draggable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group drag starts, the `dragGroupStart` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroupStart\n* @param {Moveable.Draggable.OnDragGroupStart} - Parameters for the `dragGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroupStart\", ({ targets }) => {\n*     console.log(\"onDragGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group drag, the `dragGroup` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroup\n* @param {Moveable.Draggable.OnDragGroup} - Parameters for the `dragGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroup\", ({ targets, events }) => {\n*     console.log(\"onDragGroup\", targets);\n*     events.forEach(ev => {\n*          // drag event\n*          console.log(\"onDrag left, top\", ev.left, ev.top);\n*          // ev.target!.style.left = `${ev.left}px`;\n*          // ev.target!.style.top = `${ev.top}px`;\n*          console.log(\"onDrag translate\", ev.dist);\n*          ev.target!.style.transform = ev.transform;)\n*     });\n* });\n*/\n\n/**\n * When the group drag finishes, the `dragGroupEnd` event is called.\n * @memberof Moveable.Draggable\n * @event dragGroupEnd\n * @param {Moveable.Draggable.OnDragGroupEnd} - Parameters for the `dragGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     draggable: true\n * });\n * moveable.on(\"dragGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onDragGroupEnd\", targets, isDrag);\n * });\n */\n\n/**\n * @namespace Rotatable\n * @memberof Moveable\n * @description Rotatable indicates whether the target can be rotated.\n */\n\nfunction setRotateStartInfo(moveable, datas, clientX, clientY, origin, rect) {\n  var n = moveable.state.is3d ? 4 : 3;\n  var nextOrigin = caculatePosition(moveable.state.rootMatrix, origin, n);\n  var startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);\n  datas.startAbsoluteOrigin = startAbsoluteOrigin;\n  datas.prevDeg = getRad(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n  datas.prevSnapDeg = datas.prevDeg;\n  datas.startDeg = datas.prevDeg;\n  datas.loop = 0;\n}\n\nfunction getParentDeg(moveable, moveableRect, datas, parentDist, direction, startValue) {\n  var prevDeg = datas.prevDeg; // const absoluteDeg = startValue + parentDist;\n\n  var dist = checkSnapRotate(moveable, moveableRect, datas.origin, parentDist);\n  datas.prevDeg = dist;\n  var delta = dist - prevDeg;\n  return [delta, dist, startValue + dist];\n}\n\nfunction getDeg(moveable, moveableRect, datas, deg, direction, startValue, throttleRotate, isSnap) {\n  var prevDeg = datas.prevDeg,\n      prevSnapDeg = datas.prevSnapDeg,\n      startDeg = datas.startDeg,\n      prevLoop = datas.loop;\n\n  if (prevDeg > deg && prevDeg > 270 && deg < 90) {\n    // 360 => 0\n    ++datas.loop;\n  } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {\n    // 0 => 360\n    --datas.loop;\n  }\n\n  var loop = datas.loop;\n  var absolutePrevSnapDeg = prevLoop * 360 + prevSnapDeg - startDeg + startValue;\n  var absoluteDeg = loop * 360 + deg - startDeg + startValue;\n  datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startValue;\n  absoluteDeg = throttle(absoluteDeg, throttleRotate);\n  var dist = direction * (absoluteDeg - startValue);\n\n  if (isSnap) {\n    dist = checkSnapRotate(moveable, moveableRect, datas.origin, dist);\n    absoluteDeg = dist / direction + startValue;\n  }\n\n  datas.prevSnapDeg = absoluteDeg - loop * 360 + startDeg - startValue;\n  var delta = direction * (absoluteDeg - absolutePrevSnapDeg);\n  return [delta, dist, startValue + dist];\n}\n\nfunction getRotateInfo(moveable, moveableRect, datas, direction, clientX, clientY, startValue, throttleRotate) {\n  return getDeg(moveable, moveableRect, datas, getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180, direction, startValue, throttleRotate, true);\n}\n\nfunction getPositions(rotationPosition, _a, direction) {\n  var pos1 = _a[0],\n      pos2 = _a[1],\n      pos3 = _a[2],\n      pos4 = _a[3];\n\n  var _b = (rotationPosition || \"top\").split(\"-\"),\n      dir1 = _b[0],\n      dir2 = _b[1];\n\n  var radPoses = [pos1, pos2]; // if (scale[0] < 0) {\n  //     dir1 = getReversePositionX(dir1);\n  //     dir2 = getReversePositionX(dir2);\n  // }\n  // if (scale[1] < 0) {\n  //     dir1 = getReversePositionY(dir1);\n  //     dir2 = getReversePositionY(dir2);\n  // }\n\n  if (dir1 === \"left\") {\n    radPoses = [pos3, pos1];\n  } else if (dir1 === \"right\") {\n    radPoses = [pos2, pos4];\n  } else if (dir1 === \"bottom\") {\n    radPoses = [pos4, pos3];\n  }\n\n  var pos = [(radPoses[0][0] + radPoses[1][0]) / 2, (radPoses[0][1] + radPoses[1][1]) / 2];\n  var rad = getRotationRad(radPoses, direction);\n\n  if (dir2) {\n    var isStart = dir2 === \"top\" || dir2 === \"left\";\n    var isReverse = dir1 === \"bottom\" || dir1 === \"left\";\n    pos = radPoses[isStart && !isReverse || !isStart && isReverse ? 0 : 1];\n  }\n\n  return [pos, rad];\n}\n\nfunction dragControlCondition(e) {\n  if (e.isRequest) {\n    return e.requestAble === \"rotatable\";\n  }\n\n  return hasClass(e.inputEvent.target, prefix(\"rotation\"));\n}\n\nvar Rotatable = {\n  name: \"rotatable\",\n  canPinch: true,\n  props: {\n    rotatable: Boolean,\n    rotationPosition: String,\n    throttleRotate: Number\n  },\n  events: {\n    onRotateStart: \"rotateStart\",\n    onRotate: \"rotate\",\n    onRotateEnd: \"rotateEnd\",\n    onRotateGroupStart: \"rotateGroupStart\",\n    onRotateGroup: \"rotateGroup\",\n    onRotateGroupEnd: \"rotateGroupEnd\"\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        rotatable = _a.rotatable,\n        rotationPosition = _a.rotationPosition;\n\n    if (!rotatable) {\n      return null;\n    }\n\n    var _b = moveable.state,\n        renderPoses = _b.renderPoses,\n        direction = _b.direction;\n\n    var _c = getPositions(rotationPosition, renderPoses, direction),\n        pos = _c[0],\n        rotationRad = _c[1];\n\n    return React.createElement(\"div\", {\n      key: \"rotation\",\n      className: prefix(\"line rotation-line\"),\n      style: {\n        // tslint:disable-next-line: max-line-length\n        transform: \"translate(-50%) translate(\" + pos[0] + \"px, \" + pos[1] + \"px) rotate(\" + rotationRad + \"rad)\"\n      }\n    }, React.createElement(\"div\", {\n      className: prefix(\"control\", \"rotation\")\n    }));\n  },\n  dragControlCondition: dragControlCondition,\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        isRequest = e.isRequest;\n    var _a = moveable.state,\n        target = _a.target,\n        left = _a.left,\n        top = _a.top,\n        origin = _a.origin,\n        beforeOrigin = _a.beforeOrigin,\n        direction = _a.direction,\n        beforeDirection = _a.beforeDirection,\n        targetTransform = _a.targetTransform;\n\n    if (!isRequest && !target) {\n      return false;\n    }\n\n    var rect = moveable.getRect();\n    datas.rect = rect;\n    datas.transform = targetTransform;\n    datas.left = left;\n    datas.top = top;\n    datas.fixedPosition = getDirectionOffset(moveable, getOriginDirection(moveable));\n\n    if (isRequest || isPinch || parentFlag) {\n      var externalRotate = parentRotate || 0;\n      datas.beforeInfo = {\n        origin: rect.beforeOrigin,\n        prevDeg: externalRotate,\n        startDeg: externalRotate,\n        prevSnapDeg: externalRotate,\n        loop: 0\n      };\n      datas.afterInfo = {\n        origin: rect.origin,\n        prevDeg: externalRotate,\n        startDeg: externalRotate,\n        prevSnapDeg: externalRotate,\n        loop: 0\n      };\n    } else {\n      datas.beforeInfo = {\n        origin: rect.beforeOrigin\n      };\n      datas.afterInfo = {\n        origin: rect.origin\n      };\n      var controlRect = getClientRect(moveable.controlBox.getElement());\n      setRotateStartInfo(moveable, datas.beforeInfo, clientX, clientY, beforeOrigin, controlRect);\n      setRotateStartInfo(moveable, datas.afterInfo, clientX, clientY, origin, controlRect);\n    }\n\n    datas.direction = direction;\n    datas.beforeDirection = beforeDirection;\n    datas.startValue = 0;\n    datas.datas = {};\n    setDefaultTransformIndex(e);\n    var params = fillParams(moveable, e, __assign(__assign({\n      set: function (rotatation) {\n        datas.startValue = rotatation * Math.PI / 180;\n      }\n    }, fillTransformStartEvent(e)), {\n      dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))\n    }));\n    var result = triggerEvent(moveable, \"onRotateStart\", params);\n    datas.isRotate = result !== false;\n    moveable.state.snapRenderInfo = {\n      request: e.isRequest\n    };\n    return datas.isRotate ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        groupDelta = e.groupDelta;\n    var direction = datas.direction,\n        beforeDirection = datas.beforeDirection,\n        beforeInfo = datas.beforeInfo,\n        afterInfo = datas.afterInfo,\n        isRotate = datas.isRotate,\n        startValue = datas.startValue,\n        rect = datas.rect;\n\n    if (!isRotate) {\n      return;\n    }\n\n    resolveTransformEvent(e, \"rotate\");\n    var _g = moveable.props,\n        _h = _g.throttleRotate,\n        throttleRotate = _h === void 0 ? 0 : _h,\n        parentMoveable = _g.parentMoveable;\n    var delta;\n    var dist;\n    var rotate;\n    var beforeDelta;\n    var beforeDist;\n    var beforeRotate;\n    var startDeg = 180 / Math.PI * startValue;\n\n    if (!parentFlag && \"parentDist\" in e) {\n      var parentDist = e.parentDist;\n      _a = getParentDeg(moveable, rect, afterInfo, parentDist, direction, startDeg), delta = _a[0], dist = _a[1], rotate = _a[2];\n      _b = getParentDeg(moveable, rect, beforeInfo, parentDist, direction, startDeg), beforeDelta = _b[0], beforeDist = _b[1], beforeRotate = _b[2];\n    } else if (isPinch || parentFlag) {\n      _c = getDeg(moveable, rect, afterInfo, parentRotate, direction, startDeg, throttleRotate), delta = _c[0], dist = _c[1], rotate = _c[2];\n      _d = getDeg(moveable, rect, beforeInfo, parentRotate, direction, startDeg, throttleRotate), beforeDelta = _d[0], beforeDist = _d[1], beforeRotate = _d[2];\n    } else {\n      _e = getRotateInfo(moveable, rect, afterInfo, direction, clientX, clientY, startDeg, throttleRotate), delta = _e[0], dist = _e[1], rotate = _e[2];\n      _f = getRotateInfo(moveable, rect, beforeInfo, beforeDirection, clientX, clientY, startDeg, throttleRotate), beforeDelta = _f[0], beforeDist = _f[1], beforeRotate = _f[2];\n    }\n\n    if (!delta && !beforeDelta && !parentMoveable) {\n      return;\n    }\n\n    var nextTransform = convertTransformFormat(datas, \"rotate(\" + rotate + \"deg)\", \"rotate(\" + dist + \"deg)\");\n    var inverseDist = getRotateDist(moveable, dist, datas.fixedPosition, datas);\n    var inverseDelta = minus(plus(groupDelta || [0, 0], inverseDist), datas.prevInverseDist || [0, 0]);\n    datas.prevInverseDist = inverseDist;\n    var params = fillParams(moveable, e, __assign({\n      delta: delta,\n      dist: dist,\n      rotate: rotate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeRotate: beforeRotate,\n      isPinch: !!isPinch\n    }, fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e)));\n    triggerEvent(moveable, \"onRotate\", params);\n    return params;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isRotate) {\n      return false;\n    }\n\n    datas.isRotate = false;\n    triggerEvent(moveable, \"onRotateEnd\", fillEndParams(moveable, e, {}));\n    return isDrag;\n  },\n  dragGroupControlCondition: dragControlCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas;\n    var _a = moveable.state,\n        parentLeft = _a.left,\n        parentTop = _a.top,\n        parentBeforeOrigin = _a.beforeOrigin;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    params.set(datas.beforeDirection * moveable.rotation);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", e, function (child, ev) {\n      var _a = child.state,\n          left = _a.left,\n          top = _a.top,\n          beforeOrigin = _a.beforeOrigin;\n      var childClient = plus(minus([left, top], [parentLeft, parentTop]), minus(beforeOrigin, parentBeforeOrigin));\n      ev.datas.groupClient = childClient;\n      return __assign(__assign({}, ev), {\n        parentRotate: 0\n      });\n    });\n\n    var nextParams = __assign(__assign({}, params), {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n    datas.isRotate = result !== false;\n    return datas.isRotate ? params : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var direction = datas.beforeDirection;\n    var parentRotate = params.beforeDist;\n    var deg = params.beforeDelta;\n    var rad = deg / 180 * Math.PI;\n    var events = triggerChildAble(moveable, this, \"dragControl\", e, function (_, ev) {\n      var _a = ev.datas.groupClient,\n          prevX = _a[0],\n          prevY = _a[1];\n\n      var _b = rotate([prevX, prevY], rad * direction),\n          clientX = _b[0],\n          clientY = _b[1];\n\n      var delta = [clientX - prevX, clientY - prevY];\n      ev.datas.groupClient = [clientX, clientY];\n      return __assign(__assign({}, ev), {\n        parentRotate: parentRotate,\n        groupDelta: delta\n      });\n    });\n    moveable.rotation = direction * params.beforeRotate;\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events,\n      set: function (rotation) {\n        moveable.rotation = rotation;\n      }\n    }, params);\n\n    triggerEvent(moveable, \"onRotateGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", e);\n    var nextParams = fillEndParams(moveable, e, {\n      targets: moveable.props.targets\n    });\n    triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Rotatable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.deltaRotate=0] -  delta number of rotation\n   * @param {number} [e.rotate=0] - absolute number of moveable's rotation\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"rotatable\", { deltaRotate: 10 }, true);\n   *\n   * * moveable.request(\"rotatable\", { rotate: 10 }, true);\n   *\n   * // requestStart\n   * const requester = moveable.request(\"rotatable\");\n   *\n   * // request\n   * requester.request({ deltaRotate: 10 });\n   * requester.request({ deltaRotate: 10 });\n   * requester.request({ deltaRotate: 10 });\n   *\n   * requester.request({ rotate: 10 });\n   * requester.request({ rotate: 20 });\n   * requester.request({ rotate: 30 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function (moveable) {\n    var datas = {};\n    var distRotate = 0;\n    var startRotation = moveable.getRotation();\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas\n        };\n      },\n      request: function (e) {\n        if (\"deltaRotate\" in e) {\n          distRotate += e.deltaRotate;\n        } else if (\"rotate\" in e) {\n          distRotate = e.rotate - startRotation;\n        }\n\n        return {\n          datas: datas,\n          parentDist: distRotate\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n/**\n * Whether or not target can be rotated. (default: false)\n * @name Moveable.Rotatable#rotatable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.rotatable = true;\n */\n\n/**\n * You can specify the position of the rotation. (default: \"top\")\n * @name Moveable.Rotatable#rotationPosition\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   rotationPosition: \"top\",\n * });\n *\n * moveable.rotationPosition = \"bottom\"\n */\n\n/**\n * throttle of angle(degree) when rotate.\n * @name Moveable.Rotatable#throttleRotate\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleRotate = 1;\n */\n\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable.Rotatable\n * @event rotateStart\n * @param {Moveable.Rotatable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n* When rotating, the rotate event is called.\n* @memberof Moveable.Rotatable\n* @event rotate\n* @param {Moveable.Rotatable.OnRotate} - Parameters for the rotate event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { rotatable: true });\n* moveable.on(\"rotate\", ({ target, transform, dist }) => {\n*     target.style.transform = transform;\n* });\n*/\n\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable.Rotatable\n * @event rotateEnd\n * @param {Moveable.Rotatable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n * When the group rotate starts, the `rotateGroupStart` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupStart\n * @param {Moveable.Rotatable.OnRotateGroupStart} - Parameters for the `rotateGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupStart\", ({ targets }) => {\n *     console.log(\"onRotateGroupStart\", targets);\n * });\n */\n\n/**\n* When the group rotate, the `rotateGroup` event is called.\n* @memberof Moveable.Rotatable\n* @event rotateGroup\n* @param {Moveable.Rotatable.OnRotateGroup} - Parameters for the `rotateGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     rotatable: true\n* });\n* moveable.on(\"rotateGroup\", ({ targets, events }) => {\n*     console.log(\"onRotateGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group rotate.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const deg = ev.beforeDist;\n*     });\n* });\n*/\n\n/**\n * When the group rotate finishes, the `rotateGroupEnd` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupEnd\n * @param {Moveable.Rotatable.OnRotateGroupEnd} - Parameters for the `rotateGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onRotateGroupEnd\", targets, isDrag);\n * });\n */\n\nfunction renderControls(moveable, defaultDirections, React) {\n  var _a = moveable.state,\n      renderPoses = _a.renderPoses,\n      rotation = _a.rotation;\n  var _b = moveable.props.renderDirections,\n      directions = _b === void 0 ? defaultDirections : _b;\n  var direction = moveable.state.direction;\n  var directionMap = {};\n  directions.forEach(function (dir) {\n    directionMap[dir] = true;\n  });\n  return directions.map(function (dir) {\n    var indexes = DIRECTION_INDEXES[dir];\n\n    if (!indexes || !directionMap[dir]) {\n      return null;\n    }\n\n    var directionRotation = throttle(rotation / Math.PI * 180, 15) + DIRECTION_ROTATIONS[dir];\n\n    if (direction < 1) {\n      directionRotation = 360 - directionRotation;\n    }\n\n    directionRotation %= 180;\n    return React.createElement(\"div\", {\n      className: prefix(\"control\", \"direction\", dir),\n      \"data-rotation\": directionRotation,\n      \"data-direction\": dir,\n      key: \"direction-\" + dir,\n      style: getControlTransform.apply(void 0, __spreadArrays([rotation], indexes.map(function (index) {\n        return renderPoses[index];\n      })))\n    });\n  });\n}\n\nfunction renderLine(React, direction, pos1, pos2, key) {\n  var classNames = [];\n\n  for (var _i = 5; _i < arguments.length; _i++) {\n    classNames[_i - 5] = arguments[_i];\n  }\n\n  var rad = getRad(pos1, pos2);\n  var rotation = direction ? throttle(rad / Math.PI * 180, 15) % 180 : -1;\n  return React.createElement(\"div\", {\n    key: \"line\" + key,\n    className: prefix.apply(void 0, __spreadArrays([\"line\", \"direction\", direction], classNames)),\n    \"data-rotation\": rotation,\n    \"data-line-index\": key,\n    \"data-direction\": direction,\n    style: getLineStyle(pos1, pos2, rad)\n  });\n}\n\nfunction renderAllDirections(moveable, React) {\n  return renderControls(moveable, DIRECTIONS, React);\n}\n\nfunction renderDiagonalDirections(moveable, React) {\n  return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], React);\n}\n/**\n * @namespace Resizable\n * @memberof Moveable\n * @description Resizable indicates whether the target's width and height can be increased or decreased.\n */\n\n\nvar Resizable = {\n  name: \"resizable\",\n  ableGroup: \"size\",\n  updateRect: true,\n  canPinch: true,\n  props: {\n    resizable: Boolean,\n    throttleResize: Number,\n    renderDirections: Array,\n    keepRatio: Boolean\n  },\n  events: {\n    onResizeStart: \"resizeStart\",\n    onResize: \"resize\",\n    onResizeEnd: \"resizeEnd\",\n    onResizeGroupStart: \"resizeGroupStart\",\n    onResizeGroup: \"resizeGroup\",\n    onResizeGroupEnd: \"resizeGroupEnd\"\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        edge = _a.edge;\n\n    if (resizable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function (moveable, e) {\n    var _a;\n\n    var inputEvent = e.inputEvent,\n        isPinch = e.isPinch,\n        parentDirection = e.parentDirection,\n        datas = e.datas,\n        parentFlag = e.parentFlag;\n    var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n    var _b = moveable.state,\n        target = _b.target,\n        width = _b.width,\n        height = _b.height;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    !isPinch && setDragStart(moveable, e);\n    datas.datas = {};\n    datas.direction = direction;\n    datas.startOffsetWidth = width;\n    datas.startOffsetHeight = height;\n    datas.prevWidth = 0;\n    datas.prevHeight = 0;\n    _a = getCSSSize(target), datas.startWidth = _a[0], datas.startHeight = _a[1];\n    var padding = [Math.max(0, width - datas.startWidth), Math.max(0, height - datas.startHeight)];\n    datas.minSize = padding;\n    datas.maxSize = [Infinity, Infinity];\n\n    if (!parentFlag) {\n      var style = window.getComputedStyle(target);\n      datas.minSize = plus([parseFloat(style.minWidth) || 0, parseFloat(style.minHeight) || 0], padding);\n      datas.maxSize = plus([parseFloat(style.maxWidth) || Infinity, parseFloat(style.maxHeight) || Infinity], padding);\n    }\n\n    var transformOrigin = moveable.props.transformOrigin || \"% %\";\n    datas.transformOrigin = transformOrigin && isString(transformOrigin) ? transformOrigin.split(\" \") : transformOrigin;\n    datas.startDirection = getStartDirection(moveable, direction);\n    datas.fixedPosition = getAbsoluteFixedPosition(moveable, datas.startDirection);\n    datas.fixedOriginalPosition = getAbsoluteFixedPosition(moveable, direction);\n    var params = fillParams(moveable, e, {\n      direction: direction,\n      set: function (_a) {\n        var startWidth = _a[0],\n            startHeight = _a[1];\n        datas.startWidth = startWidth;\n        datas.startHeight = startHeight;\n      },\n      setMin: function (minSize) {\n        datas.minSize = minSize;\n      },\n      setMax: function (maxSize) {\n        datas.maxSize = maxSize;\n      },\n      setOrigin: function (origin) {\n        datas.transformOrigin = origin;\n      },\n      dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))\n    });\n    var result = triggerEvent(moveable, \"onResizeStart\", params);\n\n    if (result !== false) {\n      datas.isResize = true;\n      moveable.state.snapRenderInfo = {\n        request: e.isRequest,\n        direction: direction\n      };\n    }\n\n    return datas.isResize ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    var _a;\n\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        parentDistance = e.parentDistance,\n        parentScale = e.parentScale,\n        parentKeepRatio = e.parentKeepRatio,\n        dragClient = e.dragClient,\n        parentDist = e.parentDist,\n        isRequest = e.isRequest;\n    var direction = datas.direction,\n        isResize = datas.isResize,\n        transformOrigin = datas.transformOrigin;\n\n    if (!isResize) {\n      return;\n    }\n\n    var startWidth = datas.startWidth,\n        startHeight = datas.startHeight,\n        startOffsetWidth = datas.startOffsetWidth,\n        startOffsetHeight = datas.startOffsetHeight,\n        prevWidth = datas.prevWidth,\n        prevHeight = datas.prevHeight,\n        minSize = datas.minSize,\n        maxSize = datas.maxSize;\n    var _b = moveable.props,\n        _c = _b.throttleResize,\n        throttleResize = _c === void 0 ? 0 : _c,\n        parentMoveable = _b.parentMoveable;\n    var sizeDirection = direction;\n\n    if (!direction[0] && !direction[1]) {\n      sizeDirection = [1, 1];\n    }\n\n    var keepRatio = moveable.props.keepRatio || parentKeepRatio;\n    var isWidth = sizeDirection[0] || !sizeDirection[1];\n    var ratio = isWidth ? startOffsetHeight / startOffsetWidth : startOffsetWidth / startOffsetHeight;\n    var startDirection = keepRatio || parentFlag ? direction : datas.startDirection;\n    var fixedPosition = dragClient;\n    var distWidth = 0;\n    var distHeight = 0;\n\n    if (!dragClient) {\n      if (!parentFlag && isPinch) {\n        fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n      } else {\n        fixedPosition = keepRatio ? datas.fixedOriginalPosition : datas.fixedPosition;\n      }\n    }\n\n    if (parentDist) {\n      distWidth = parentDist[0];\n      distHeight = parentDist[1];\n    } else if (parentScale) {\n      distWidth = (parentScale[0] - 1) * startOffsetWidth;\n      distHeight = (parentScale[1] - 1) * startOffsetHeight;\n    } else if (isPinch) {\n      if (parentDistance) {\n        distWidth = parentDistance;\n        distHeight = parentDistance * startOffsetHeight / startOffsetWidth;\n      }\n    } else {\n      var dist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      distWidth = sizeDirection[0] * dist[0];\n      distHeight = sizeDirection[1] * dist[1];\n\n      if (keepRatio && startOffsetWidth && startOffsetHeight) {\n        var rad = getRad([0, 0], dist);\n        var standardRad = getRad([0, 0], sizeDirection);\n        var ratioRad = getRad([0, 0], [startOffsetWidth, startOffsetHeight]);\n        var size = getDistSize([distWidth, distHeight]);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!sizeDirection[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!sizeDirection[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n    }\n\n    var nextWidth = sizeDirection[0] || keepRatio ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\n    var nextHeight = sizeDirection[1] || keepRatio ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\n\n    if (keepRatio && startOffsetWidth && startOffsetHeight) {\n      // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\n      nextHeight = nextWidth * startOffsetHeight / startOffsetWidth;\n    }\n\n    var snapDist = [0, 0];\n\n    if (!isPinch) {\n      snapDist = checkSnapSize(moveable, nextWidth, nextHeight, direction, datas.fixedOriginalPosition, isRequest, datas);\n    }\n\n    if (parentDist) {\n      !parentDist[0] && (snapDist[0] = 0);\n      !parentDist[1] && (snapDist[1] = 0);\n    }\n\n    if (keepRatio) {\n      if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          nextWidth = throttle(nextWidth, throttleResize);\n        } else {\n          nextHeight = throttle(nextHeight, throttleResize);\n        }\n      }\n\n      if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        nextWidth += snapDist[0];\n        nextHeight = getKeepRatioHeight(nextWidth, isWidth, ratio);\n      } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        nextHeight += snapDist[1];\n        nextWidth = getKeepRatioWidth(nextHeight, isWidth, ratio);\n      }\n    } else {\n      nextWidth += snapDist[0];\n      nextHeight += snapDist[1];\n\n      if (!snapDist[0]) {\n        nextWidth = throttle(nextWidth, throttleResize);\n      }\n\n      if (!snapDist[1]) {\n        nextHeight = throttle(nextHeight, throttleResize);\n      }\n    }\n\n    _a = caculateBoundSize([nextWidth, nextHeight], minSize, maxSize, keepRatio), nextWidth = _a[0], nextHeight = _a[1];\n    nextWidth = Math.round(nextWidth);\n    nextHeight = Math.round(nextHeight);\n    distWidth = nextWidth - startOffsetWidth;\n    distHeight = nextHeight - startOffsetHeight;\n    var delta = [distWidth - prevWidth, distHeight - prevHeight];\n    datas.prevWidth = distWidth;\n    datas.prevHeight = distHeight;\n    var inverseDelta = getResizeDist(moveable, nextWidth, nextHeight, startDirection, fixedPosition, transformOrigin);\n\n    if (!parentMoveable && delta.every(function (num) {\n      return !num;\n    }) && inverseDelta.every(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var params = fillParams(moveable, e, {\n      width: startWidth + distWidth,\n      height: startHeight + distHeight,\n      offsetWidth: nextWidth,\n      offsetHeight: nextHeight,\n      direction: direction,\n      dist: [distWidth, distHeight],\n      delta: delta,\n      isPinch: !!isPinch,\n      drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, inverseDelta, !!isPinch, false))\n    });\n    triggerEvent(moveable, \"onResize\", params);\n    return params;\n  },\n  dragControlAfter: function (moveable, e) {\n    var datas = e.datas;\n    var isResize = datas.isResize,\n        startOffsetWidth = datas.startOffsetWidth,\n        startOffsetHeight = datas.startOffsetHeight,\n        prevWidth = datas.prevWidth,\n        prevHeight = datas.prevHeight;\n\n    if (!isResize) {\n      return;\n    }\n\n    var _a = moveable.state,\n        width = _a.width,\n        height = _a.height;\n    var errorWidth = width - (startOffsetWidth + prevWidth);\n    var errorHeight = height - (startOffsetHeight + prevHeight);\n    var isErrorWidth = Math.abs(errorWidth) > 3;\n    var isErrorHeight = Math.abs(errorHeight) > 3;\n\n    if (isErrorWidth) {\n      datas.startWidth += errorWidth;\n      datas.startOffsetWidth += errorWidth;\n      datas.prevWidth += errorWidth;\n    }\n\n    if (isErrorHeight) {\n      datas.startHeight += errorHeight;\n      datas.startOffsetHeight += errorHeight;\n      datas.prevHeight += errorHeight;\n    }\n\n    if (isErrorWidth || isErrorHeight) {\n      this.dragControl(moveable, e);\n      return true;\n    }\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isResize) {\n      return false;\n    }\n\n    datas.isResize = false;\n    var params = fillEndParams(moveable, e, {});\n    triggerEvent(moveable, \"onResizeEnd\", params);\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var fixedPosition = datas.fixedOriginalPosition;\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", e, function (child, ev) {\n      var pos = getAbsoluteFixedPosition(child, direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      ev.datas.originalX = originalX;\n      ev.datas.originalY = originalY;\n      return ev;\n    });\n\n    var nextParams = __assign(__assign({}, params), {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\n    datas.isResize = result !== false;\n    return datas.isResize ? params : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var offsetWidth = params.offsetWidth,\n        offsetHeight = params.offsetHeight,\n        dist = params.dist;\n    var keepRatio = moveable.props.keepRatio;\n    var parentScale = [offsetWidth / (offsetWidth - dist[0]), offsetHeight / (offsetHeight - dist[1])];\n    var fixedPosition = datas.fixedOriginalPosition;\n    var events = triggerChildAble(moveable, this, \"dragControl\", e, function (_, ev) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [ev.datas.originalX * parentScale[0], ev.datas.originalY * parentScale[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return __assign(__assign({}, ev), {\n        parentDist: null,\n        parentScale: parentScale,\n        dragClient: plus(fixedPosition, [clientX, clientY]),\n        parentKeepRatio: keepRatio\n      });\n    });\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onResizeGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", e);\n    var nextParams = fillEndParams(moveable, e, {\n      targets: moveable.props.targets\n    });\n    triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Resizable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.direction=[1, 1]] - Direction to resize\n   * @param {number} [e.deltaWidth] - delta number of width\n   * @param {number} [e.deltaHeight] - delta number of height\n   * @param {number} [e.offsetWidth] - offset number of width\n   * @param {number} [e.offsetHeight] - offset number of height\n   * @param {number} [e.isInstant] - Whether to execute the request instantly\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * // Use Relative Value\n   * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n   *\n   * // Use Absolute Value\n   * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 }, true);\n   *\n   * // requestStart\n   * const requester = moveable.request(\"resizable\");\n   *\n   * // request\n   * // Use Relative Value\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   *\n   * // Use Absolute Value\n   * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 });\n   * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100 });\n   * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function (moveable) {\n    var datas = {};\n    var distWidth = 0;\n    var distHeight = 0;\n    var rect = moveable.getRect();\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas,\n          parentDirection: e.direction || [1, 1]\n        };\n      },\n      request: function (e) {\n        if (\"offsetWidth\" in e) {\n          distWidth = e.offsetWidth - rect.offsetWidth;\n        } else if (\"deltaWidth\" in e) {\n          distWidth += e.deltaWidth;\n        }\n\n        if (\"offsetHeight\" in e) {\n          distHeight = e.offsetHeight - rect.offsetHeight;\n        } else if (\"deltaHeight\" in e) {\n          distHeight += e.deltaHeight;\n        }\n\n        return {\n          datas: datas,\n          parentDist: [distWidth, distHeight]\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n/**\n * Whether or not target can be resized. (default: false)\n * @name Moveable.Resizable#resizable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     resizable: false,\n * });\n *\n * moveable.resizable = true;\n */\n\n/**\n * throttle of width, height when resize.\n * @name Moveable.Resizable#throttleResize\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   throttleResize: 0,\n * });\n *\n * moveable.throttleResize = 1;\n */\n\n/**\n * When resize or scale, keeps a ratio of the width, height. (default: false)\n * @name Moveable.Resizable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n\n/**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Resizable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable.Resizable\n * @event resizeStart\n * @param {Moveable.Resizable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable.Resizable\n * @event resize\n * @param {Moveable.Resizable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable.Resizable\n * @event resizeEnd\n * @param {Moveable.Resizable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group resize starts, the `resizeGroupStart` event is called.\n* @memberof Moveable.Resizable\n* @event resizeGroupStart\n* @param {Moveable.Resizable.OnResizeGroupStart} - Parameters for the `resizeGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     resizable: true\n* });\n* moveable.on(\"resizeGroupStart\", ({ targets }) => {\n*     console.log(\"onResizeGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group resize, the `resizeGroup` event is called.\n* @memberof Moveable.Resizable\n* @event resizeGroup\n* @param {Moveable.Resizable.onResizeGroup} - Parameters for the `resizeGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     resizable: true\n* });\n* moveable.on(\"resizeGroup\", ({ targets, events }) => {\n*     console.log(\"onResizeGroup\", targets);\n*     events.forEach(ev => {\n*         const offset = [\n*             direction[0] < 0 ? -ev.delta[0] : 0,\n*             direction[1] < 0 ? -ev.delta[1] : 0,\n*         ];\n*         // ev.drag is a drag event that occurs when the group resize.\n*         const left = offset[0] + ev.drag.beforeDist[0];\n*         const top = offset[1] + ev.drag.beforeDist[1];\n*         const width = ev.width;\n*         const top = ev.top;\n*     });\n* });\n*/\n\n/**\n * When the group resize finishes, the `resizeGroupEnd` event is called.\n * @memberof Moveable.Resizable\n * @event resizeGroupEnd\n * @param {Moveable.Resizable.OnResizeGroupEnd} - Parameters for the `resizeGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     resizable: true\n * });\n * moveable.on(\"resizeGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onResizeGroupEnd\", targets, isDrag);\n * });\n */\n\n/**\n * @namespace Scalable\n * @memberof Moveable\n * @description Scalable indicates whether the target's x and y can be scale of transform.\n */\n\nvar Scalable = {\n  name: \"scalable\",\n  ableGroup: \"size\",\n  canPinch: true,\n  props: {\n    scalable: Boolean,\n    throttleScale: Number,\n    renderDirections: String,\n    keepRatio: Boolean\n  },\n  events: {\n    onScaleStart: \"scaleStart\",\n    onScale: \"scale\",\n    onScaleEnd: \"scaleEnd\",\n    onScaleGroupStart: \"scaleGroupStart\",\n    onScaleGroup: \"scaleGroup\",\n    onScaleGroupEnd: \"scaleGroupEnd\"\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        edge = _a.edge;\n\n    if (!resizable && scalable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        parentDirection = e.parentDirection;\n    var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n    var _a = moveable.state,\n        width = _a.width,\n        height = _a.height,\n        targetTransform = _a.targetTransform,\n        target = _a.target;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    if (!isPinch) {\n      setDragStart(moveable, e);\n    }\n\n    setDefaultTransformIndex(e);\n    datas.datas = {};\n    datas.transform = targetTransform;\n    datas.prevDist = [1, 1];\n    datas.direction = direction;\n    datas.width = width;\n    datas.height = height;\n    datas.startValue = [1, 1];\n    datas.fixedDirection = direction.map(function (dir) {\n      return -dir;\n    });\n    datas.fixedPosition = getAbsoluteFixedPosition(moveable, direction);\n    var params = fillParams(moveable, e, __assign(__assign({\n      direction: direction,\n      set: function (scale) {\n        datas.startValue = scale;\n      }\n    }, fillTransformStartEvent(e)), {\n      dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))\n    }));\n    var result = triggerEvent(moveable, \"onScaleStart\", params);\n\n    if (result !== false) {\n      datas.isScale = true;\n      moveable.state.snapRenderInfo = {\n        request: e.isRequest,\n        direction: direction\n      };\n    }\n\n    return datas.isScale ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    resolveTransformEvent(e, \"scale\");\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentScale = e.parentScale,\n        parentDistance = e.parentDistance,\n        parentKeepRatio = e.parentKeepRatio,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        dragClient = e.dragClient,\n        parentDist = e.parentDist,\n        isRequest = e.isRequest;\n    var prevDist = datas.prevDist,\n        direction = datas.direction,\n        width = datas.width,\n        height = datas.height,\n        isScale = datas.isScale,\n        startValue = datas.startValue;\n\n    if (!isScale) {\n      return false;\n    }\n\n    var _a = moveable.props,\n        throttleScale = _a.throttleScale,\n        parentMoveable = _a.parentMoveable;\n    var sizeDirection = direction;\n\n    if (!direction[0] && !direction[1]) {\n      sizeDirection = [1, 1];\n    }\n\n    var keepRatio = moveable.props.keepRatio || parentKeepRatio;\n    var state = moveable.state;\n    var isWidth = sizeDirection[0] || !sizeDirection[1];\n    var startWidth = width * startValue[0];\n    var startHeight = height * startValue[1];\n    var ratio = isWidth ? startHeight / startWidth : startWidth / startHeight;\n    var scaleX = 1;\n    var scaleY = 1;\n    var fixedPosition = dragClient;\n\n    if (!dragClient) {\n      if (!parentFlag && isPinch) {\n        fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n      } else {\n        fixedPosition = datas.fixedPosition;\n      }\n    }\n\n    if (parentDist) {\n      scaleX = (width + parentDist[0]) / width;\n      scaleY = (height + parentDist[1]) / height;\n    } else if (parentScale) {\n      scaleX = parentScale[0];\n      scaleY = parentScale[1];\n    } else if (isPinch) {\n      if (parentDistance) {\n        scaleX = (width + parentDistance) / width;\n        scaleY = (height + parentDistance * height / width) / height;\n      }\n    } else {\n      var dragDist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      var distWidth = sizeDirection[0] * dragDist[0];\n      var distHeight = sizeDirection[1] * dragDist[1];\n\n      if (keepRatio && width && height) {\n        var rad = getRad([0, 0], dragDist);\n        var standardRad = getRad([0, 0], sizeDirection);\n        var ratioRad = getRad([0, 0], [startWidth, startHeight]);\n        var size = getDistSize([distWidth, distHeight]);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!sizeDirection[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!sizeDirection[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n\n      scaleX = (width + distWidth) / width;\n      scaleY = (height + distHeight) / height;\n    }\n\n    scaleX = sizeDirection[0] || keepRatio ? scaleX * startValue[0] : startValue[0];\n    scaleY = sizeDirection[1] || keepRatio ? scaleY * startValue[1] : startValue[1];\n\n    if (scaleX === 0) {\n      scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (scaleY === 0) {\n      scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var dist = [scaleX / startValue[0], scaleY / startValue[1]];\n    var scale = [scaleX, scaleY];\n\n    if (!isPinch && moveable.props.groupable) {\n      var snapRenderInfo = state.snapRenderInfo || {};\n      var stateDirection = snapRenderInfo.direction;\n\n      if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n        state.snapRenderInfo = {\n          direction: direction,\n          request: e.isRequest\n        };\n      }\n    }\n\n    var snapDist = [0, 0];\n\n    if (!isPinch) {\n      snapDist = checkSnapScale(moveable, dist, direction, datas.fixedPosition, isRequest, datas);\n    }\n\n    if (keepRatio) {\n      if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          dist[0] = throttle(dist[0] * startValue[0], throttleScale) / startValue[0];\n        } else {\n          dist[1] = throttle(dist[1] * startValue[1], throttleScale) / startValue[1];\n        }\n      }\n\n      if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        dist[0] += snapDist[0];\n        var snapHeight = getKeepRatioHeight(width * dist[0] * startValue[0], isWidth, ratio);\n        dist[1] = snapHeight / height / startValue[1];\n      } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        dist[1] += snapDist[1];\n        var snapWidth = getKeepRatioWidth(height * dist[1] * startValue[1], isWidth, ratio);\n        dist[0] = snapWidth / width / startValue[0];\n      }\n    } else {\n      dist[0] += snapDist[0];\n      dist[1] += snapDist[1];\n\n      if (!snapDist[0]) {\n        dist[0] = throttle(dist[0] * startValue[0], throttleScale) / startValue[0];\n      }\n\n      if (!snapDist[1]) {\n        dist[1] = throttle(dist[1] * startValue[1], throttleScale) / startValue[1];\n      }\n    }\n\n    if (dist[0] === 0) {\n      dist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (dist[1] === 0) {\n      dist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var delta = [dist[0] / prevDist[0], dist[1] / prevDist[1]];\n    scale = multiply2(dist, startValue);\n    var inverseDist = getScaleDist(moveable, dist, direction, fixedPosition, datas);\n    var inverseDelta = minus(inverseDist, datas.prevInverseDist || [0, 0]);\n    datas.prevDist = dist;\n    datas.prevInverseDist = inverseDist;\n\n    if (scaleX === prevDist[0] && scaleY === prevDist[1] && inverseDelta.every(function (num) {\n      return !num;\n    }) && !parentMoveable) {\n      return false;\n    }\n\n    var nextTransform = convertTransformFormat(datas, \"scale(\" + scale.join(\", \") + \")\", \"scale(\" + dist.join(\", \") + \")\");\n    var params = fillParams(moveable, e, __assign({\n      offsetWidth: width,\n      offsetHeight: height,\n      direction: direction,\n      // beforeScale,\n      // beforeDist,\n      // beforeDelta,\n      scale: scale,\n      dist: dist,\n      delta: delta,\n      isPinch: !!isPinch\n    }, fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e)));\n    triggerEvent(moveable, \"onScale\", params);\n    return params;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isScale) {\n      return false;\n    }\n\n    datas.isScale = false;\n    triggerEvent(moveable, \"onScaleEnd\", fillEndParams(moveable, e, {}));\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var fixedPosition = datas.fixedPosition;\n    datas.moveableScale = moveable.scale;\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", e, function (child, ev) {\n      var pos = getAbsoluteFixedPosition(child, direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      ev.datas.originalX = originalX;\n      ev.datas.originalY = originalY;\n      return ev;\n    });\n\n    var nextParams = __assign(__assign({}, params), {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n    datas.isScale = result !== false;\n    return datas.isScale ? nextParams : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var moveableScale = datas.moveableScale;\n    moveable.scale = [params.scale[0] * moveableScale[0], params.scale[1] * moveableScale[1]];\n    var keepRatio = moveable.props.keepRatio;\n    var dist = params.dist,\n        scale = params.scale; // const fixedDirection = datas.fixedDirection;\n\n    var fixedPosition = datas.fixedPosition;\n    var events = triggerChildAble(moveable, this, \"dragControl\", e, function (_, ev) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [ev.datas.originalX * dist[0], ev.datas.originalY * dist[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return __assign(__assign({}, ev), {\n        parentDist: null,\n        parentScale: scale,\n        parentKeepRatio: keepRatio,\n        dragClient: plus(fixedPosition, [clientX, clientY])\n      });\n    });\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onScaleGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", e);\n    var nextParams = fillEndParams(moveable, e, {\n      targets: moveable.props.targets\n    });\n    triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Scalable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.direction=[1, 1]] - Direction to scale\n   * @param {number} [e.deltaWidth] - delta number of width\n   * @param {number} [e.deltaHeight] - delta number of height\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n   *\n   * // requestStart\n   * const requester = moveable.request(\"scalable\");\n   *\n   * // request\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function () {\n    var datas = {};\n    var distWidth = 0;\n    var distHeight = 0;\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas,\n          parentDirection: e.direction || [1, 1]\n        };\n      },\n      request: function (e) {\n        distWidth += e.deltaWidth;\n        distHeight += e.deltaHeight;\n        return {\n          datas: datas,\n          parentDist: [distWidth, distHeight]\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n/**\n * Whether or not target can scaled. (default: false)\n * @name Moveable.Scalable#scalable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.scalable = true;\n */\n\n/**\n * throttle of scaleX, scaleY when scale.\n * @name Moveable.Scalable#throttleScale\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleScale = 0.1;\n */\n\n/**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Scalable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n\n/**\n * When resize or scale, keeps a ratio of the width, height. (default: false)\n * @name Moveable.Scalable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable.Scalable\n * @event scaleStart\n * @param {Moveable.Scalable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable.Scalable\n * @event scale\n * @param {Moveable.Scalable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable.Scalable\n * @event scaleEnd\n * @param {Moveable.Scalable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group scale starts, the `scaleGroupStart` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroupStart\n* @param {Moveable.Scalable.OnScaleGroupStart} - Parameters for the `scaleGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroupStart\", ({ targets }) => {\n*     console.log(\"onScaleGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group scale, the `scaleGroup` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroup\n* @param {Moveable.Scalable.OnScaleGroup} - Parameters for the `scaleGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroup\", ({ targets, events }) => {\n*     console.log(\"onScaleGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group scale.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const scaleX = ev.scale[0];\n*         const scaleY = ev.scale[1];\n*     });\n* });\n*/\n\n/**\n * When the group scale finishes, the `scaleGroupEnd` event is called.\n * @memberof Moveable.Scalable\n * @event scaleGroupEnd\n * @param {Moveable.Scalable.OnScaleGroupEnd} - Parameters for the `scaleGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     scalable: true\n * });\n * moveable.on(\"scaleGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onScaleGroupEnd\", targets, isDrag);\n * });\n */\n\nfunction getMiddleLinePos(pos1, pos2) {\n  return pos1.map(function (pos, i) {\n    return dot(pos, pos2[i], 1, 2);\n  });\n}\n\nfunction getTriangleRad(pos1, pos2, pos3) {\n  // pos1 Rad\n  var rad1 = getRad(pos1, pos2);\n  var rad2 = getRad(pos1, pos3);\n  var rad = rad2 - rad1;\n  return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1, poses2) {\n  var rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n  var rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n  var pi = Math.PI;\n\n  if (rad1 >= pi && rad2 <= pi || rad1 <= pi && rad2 >= pi) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @namespace Moveable.Warpable\n * @description Warpable indicates whether the target can be warped(distorted, bented).\n */\n\n\nvar Warpable = {\n  name: \"warpable\",\n  ableGroup: \"size\",\n  props: {\n    warpable: Boolean,\n    renderDirections: Array\n  },\n  events: {\n    onWarpStart: \"warpStart\",\n    onWarp: \"warp\",\n    onWarpEnd: \"warpEnd\"\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        warpable = _a.warpable;\n\n    if (resizable || scalable || !warpable) {\n      return [];\n    }\n\n    var _b = moveable.state,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4;\n    var linePosFrom1 = getMiddleLinePos(pos1, pos2);\n    var linePosFrom2 = getMiddleLinePos(pos2, pos1);\n    var linePosFrom3 = getMiddleLinePos(pos1, pos3);\n    var linePosFrom4 = getMiddleLinePos(pos3, pos1);\n    var linePosTo1 = getMiddleLinePos(pos3, pos4);\n    var linePosTo2 = getMiddleLinePos(pos4, pos3);\n    var linePosTo3 = getMiddleLinePos(pos2, pos4);\n    var linePosTo4 = getMiddleLinePos(pos4, pos2);\n    return __spreadArrays([React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine1\",\n      style: getLineStyle(linePosFrom1, linePosTo1)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine2\",\n      style: getLineStyle(linePosFrom2, linePosTo2)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine3\",\n      style: getLineStyle(linePosFrom3, linePosTo3)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine4\",\n      style: getLineStyle(linePosFrom4, linePosTo4)\n    })], renderAllDirections(moveable, React));\n  },\n  dragControlCondition: function (e) {\n    if (e.isRequest) {\n      return false;\n    }\n\n    return hasClass(e.inputEvent.target, prefix(\"direction\"));\n  },\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var target = moveable.props.target;\n    var inputTarget = inputEvent.target;\n    var direction = getDirection(inputTarget);\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    var state = moveable.state;\n    var transformOrigin = state.transformOrigin,\n        is3d = state.is3d,\n        targetTransform = state.targetTransform,\n        targetMatrix = state.targetMatrix,\n        width = state.width,\n        height = state.height,\n        left = state.left,\n        top = state.top;\n    datas.datas = {};\n    datas.targetTransform = targetTransform;\n    datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n    datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n    datas.direction = direction;\n    datas.left = left;\n    datas.top = top;\n    setDragStart(moveable, e);\n    setDefaultTransformIndex(e);\n    datas.poses = [[0, 0], [width, 0], [0, height], [width, height]].map(function (p) {\n      return minus(p, transformOrigin);\n    });\n    datas.nextPoses = datas.poses.map(function (_a) {\n      var x = _a[0],\n          y = _a[1];\n      return caculate(datas.warpTargetMatrix, [x, y, 0, 1], 4);\n    });\n    datas.startValue = createIdentityMatrix(4);\n    datas.prevMatrix = createIdentityMatrix(4);\n    datas.absolutePoses = getAbsolutePosesByState(state);\n    datas.posIndexes = getPosIndexesByDirection(direction);\n    state.snapRenderInfo = {\n      request: e.isRequest,\n      direction: direction\n    };\n    var params = fillParams(moveable, e, __assign({\n      set: function (matrix) {\n        datas.startValue = matrix;\n      }\n    }, fillTransformStartEvent(e)));\n    var result = triggerEvent(moveable, \"onWarpStart\", params);\n\n    if (result !== false) {\n      datas.isWarp = true;\n    }\n\n    return datas.isWarp;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas,\n        isRequest = e.isRequest;\n    var distX = e.distX,\n        distY = e.distY;\n    var targetInverseMatrix = datas.targetInverseMatrix,\n        prevMatrix = datas.prevMatrix,\n        isWarp = datas.isWarp,\n        startValue = datas.startValue,\n        poses = datas.poses,\n        posIndexes = datas.posIndexes,\n        absolutePoses = datas.absolutePoses;\n\n    if (!isWarp) {\n      return false;\n    }\n\n    resolveTransformEvent(e, \"matrix3d\");\n\n    if (hasGuidelines(moveable, \"warpable\")) {\n      var selectedPoses = posIndexes.map(function (index) {\n        return absolutePoses[index];\n      });\n\n      if (selectedPoses.length > 1) {\n        selectedPoses.push([(selectedPoses[0][0] + selectedPoses[1][0]) / 2, (selectedPoses[0][1] + selectedPoses[1][1]) / 2]);\n      }\n\n      var _a = checkMoveableSnapBounds(moveable, isRequest, selectedPoses.map(function (pos) {\n        return [pos[0] + distX, pos[1] + distY];\n      })),\n          horizontalSnapInfo = _a.horizontal,\n          verticalSnapInfo = _a.vertical;\n\n      distY -= horizontalSnapInfo.offset;\n      distX -= verticalSnapInfo.offset;\n    }\n\n    var dist = getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, true);\n    var nextPoses = datas.nextPoses.slice();\n    posIndexes.forEach(function (index) {\n      nextPoses[index] = plus(nextPoses[index], dist);\n    });\n\n    if (!NEARBY_POS.every(function (nearByPoses) {\n      return isValidPos(nearByPoses.map(function (i) {\n        return poses[i];\n      }), nearByPoses.map(function (i) {\n        return nextPoses[i];\n      }));\n    })) {\n      return false;\n    }\n\n    var h = createWarpMatrix(poses[0], poses[2], poses[1], poses[3], nextPoses[0], nextPoses[2], nextPoses[1], nextPoses[3]);\n\n    if (!h.length) {\n      return false;\n    } // B * A * M\n\n\n    var afterMatrix = multiply(targetInverseMatrix, h, 4); // B * M * A\n\n    var matrix = getTransfromMatrix(datas, afterMatrix, true);\n    var delta = multiply(invert(prevMatrix, 4), matrix, 4);\n    datas.prevMatrix = matrix;\n    var totalMatrix = multiply(startValue, matrix, 4);\n    var nextTransform = convertTransformFormat(datas, \"matrix3d(\" + totalMatrix.join(\", \") + \")\", \"matrix3d(\" + matrix.join(\", \") + \")\");\n    fillOriginalTransform(e, nextTransform);\n    triggerEvent(moveable, \"onWarp\", fillParams(moveable, e, {\n      delta: delta,\n      matrix: totalMatrix,\n      dist: matrix,\n      multiply: multiply,\n      transform: nextTransform\n    }));\n    return true;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isWarp) {\n      return false;\n    }\n\n    datas.isWarp = false;\n    triggerEvent(moveable, \"onWarpEnd\", fillEndParams(moveable, e, {}));\n    return isDrag;\n  }\n};\n/**\n * Whether or not target can be warped. (default: false)\n * @name Moveable.Warpable#warpable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.warpable = true;\n */\n\n/**\n* Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n* @name Moveable.Warpable#renderDirections\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     warpable: true,\n*     renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n* });\n*\n* moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n*/\n\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable.Warpable\n* @event warpStart\n* @param {Moveable.Warpable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n\n/**\n * When warping, the warp event is called.\n * @memberof Moveable.Warpable\n * @event warp\n * @param {Moveable.Warpable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable.Warpable\n * @event warpEnd\n * @param {Moveable.Warpable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\nvar AREA_PIECES = prefix(\"area-pieces\");\nvar AREA_PIECE = prefix(\"area-piece\");\nvar AVOID = prefix(\"avoid\");\n\nfunction restoreStyle(moveable) {\n  var el = moveable.areaElement;\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height;\n  removeClass(el, AVOID);\n  el.style.cssText += \"left: 0px; top: 0px; width: \" + width + \"px; height: \" + height + \"px\";\n}\n\nfunction renderPieces(React) {\n  return React.createElement(\"div\", {\n    key: \"area_pieces\",\n    className: AREA_PIECES\n  }, React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }));\n}\n\nvar DragArea = {\n  name: \"dragArea\",\n  props: {\n    dragArea: Boolean,\n    passDragArea: Boolean\n  },\n  events: {\n    onClick: \"click\",\n    onClickGroup: \"clickGroup\"\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        target = _a.target,\n        dragArea = _a.dragArea,\n        groupable = _a.groupable,\n        passDragArea = _a.passDragArea;\n    var _b = moveable.state,\n        width = _b.width,\n        height = _b.height,\n        renderPoses = _b.renderPoses;\n    var className = passDragArea ? prefix(\"area\", \"pass\") : prefix(\"area\");\n\n    if (groupable) {\n      return [React.createElement(\"div\", {\n        key: \"area\",\n        ref: ref(moveable, \"areaElement\"),\n        className: className\n      }), renderPieces(React)];\n    }\n\n    if (!target || !dragArea) {\n      return [];\n    }\n\n    var h = createWarpMatrix([0, 0], [width, 0], [0, height], [width, height], renderPoses[0], renderPoses[1], renderPoses[2], renderPoses[3]);\n    var transform = h.length ? makeMatrixCSS(h, true) : \"none\";\n    return [React.createElement(\"div\", {\n      key: \"area\",\n      ref: ref(moveable, \"areaElement\"),\n      className: className,\n      style: {\n        top: \"0px\",\n        left: \"0px\",\n        width: width + \"px\",\n        height: height + \"px\",\n        transformOrigin: \"0 0\",\n        transform: transform\n      }\n    }), renderPieces(React)];\n  },\n  dragStart: function (moveable, _a) {\n    var datas = _a.datas,\n        clientX = _a.clientX,\n        clientY = _a.clientY,\n        inputEvent = _a.inputEvent;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    datas.isDragArea = false;\n    var areaElement = moveable.areaElement;\n    var _b = moveable.state,\n        moveableClientRect = _b.moveableClientRect,\n        renderPoses = _b.renderPoses,\n        rootMatrix = _b.rootMatrix,\n        is3d = _b.is3d;\n    var left = moveableClientRect.left,\n        top = moveableClientRect.top;\n\n    var _c = getRect(renderPoses),\n        relativeLeft = _c.left,\n        relativeTop = _c.top,\n        width = _c.width,\n        height = _c.height;\n\n    var n = is3d ? 4 : 3;\n\n    var _d = caculateInversePosition(rootMatrix, [clientX - left, clientY - top], n),\n        posX = _d[0],\n        posY = _d[1];\n\n    posX -= relativeLeft;\n    posY -= relativeTop;\n    var rects = [{\n      left: relativeLeft,\n      top: relativeTop,\n      width: width,\n      height: posY - 10\n    }, {\n      left: relativeLeft,\n      top: relativeTop,\n      width: posX - 10,\n      height: height\n    }, {\n      left: relativeLeft,\n      top: relativeTop + posY + 10,\n      width: width,\n      height: height - posY - 10\n    }, {\n      left: relativeLeft + posX + 10,\n      top: relativeTop,\n      width: width - posX - 10,\n      height: height\n    }];\n    var children = [].slice.call(areaElement.nextElementSibling.children);\n    rects.forEach(function (rect, i) {\n      children[i].style.cssText = \"left: \" + rect.left + \"px;top: \" + rect.top + \"px; width: \" + rect.width + \"px; height: \" + rect.height + \"px;\";\n    });\n    addClass(areaElement, AVOID);\n    return;\n  },\n  drag: function (moveable, _a) {\n    var datas = _a.datas,\n        inputEvent = _a.inputEvent;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    if (!datas.isDragArea) {\n      datas.isDragArea = true;\n      restoreStyle(moveable);\n    }\n  },\n  dragEnd: function (moveable, e) {\n    var inputEvent = e.inputEvent,\n        datas = e.datas;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    if (!datas.isDragArea) {\n      restoreStyle(moveable);\n    }\n  },\n  dragGroupStart: function (moveable, e) {\n    return this.dragStart(moveable, e);\n  },\n  dragGroup: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragGroupEnd: function (moveable, e) {\n    return this.dragEnd(moveable, e);\n  },\n  unset: function (moveable) {\n    restoreStyle(moveable);\n  }\n};\n/**\n * Add an event to the moveable area instead of the target for stopPropagation. (default: false, true in group)\n * @name Moveable#dragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n\n/**\n * Set `pointerEvents: none;` css to pass events in dragArea. (default: false)\n * @name Moveable#passDragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n\nvar Origin = {\n  name: \"origin\",\n  props: {\n    origin: Boolean\n  },\n  events: {},\n  render: function (moveable, React) {\n    var _a = moveable.state,\n        beforeOrigin = _a.beforeOrigin,\n        rotation = _a.rotation;\n    return [React.createElement(\"div\", {\n      className: prefix(\"control\", \"origin\"),\n      style: getControlTransform(rotation, beforeOrigin),\n      key: \"beforeOrigin\"\n    })];\n  }\n};\n/**\n * Whether or not the origin controlbox will be visible or not (default: true)\n * @name Moveable#origin\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.origin = true;\n */\n\nfunction getDefaultScrollPosition(e) {\n  var scrollContainer = e.scrollContainer;\n  return [scrollContainer.scrollLeft, scrollContainer.scrollTop];\n}\n/**\n * @namespace Moveable.Scrollable\n * @description Whether or not target can be scrolled to the scroll container (default: false)\n */\n\n\nvar Scrollable = {\n  name: \"scrollable\",\n  canPinch: true,\n  props: {\n    scrollable: Boolean,\n    scrollContainer: Object,\n    scrollThreshold: Number,\n    getScrollPosition: Function\n  },\n  events: {\n    onScroll: \"scroll\",\n    onScrollGroup: \"scrollGroup\"\n  },\n  dragStart: function (moveable, e) {\n    var props = moveable.props;\n    var _a = props.scrollContainer,\n        scrollContainer = _a === void 0 ? moveable.getContainer() : _a;\n    var dragScroll = new DragScroll();\n    e.datas.dragScroll = dragScroll;\n    var gestoName = e.isControl ? \"controlGesto\" : \"targetGesto\";\n    var targets = e.targets;\n    dragScroll.on(\"scroll\", function (_a) {\n      var container = _a.container,\n          direction = _a.direction;\n      var params = fillParams(moveable, e, {\n        scrollContainer: container,\n        direction: direction\n      });\n      var eventName = targets ? \"onScrollGroup\" : \"onScroll\";\n\n      if (targets) {\n        params.targets = targets;\n      }\n\n      triggerEvent(moveable, eventName, params);\n    }).on(\"move\", function (_a) {\n      var offsetX = _a.offsetX,\n          offsetY = _a.offsetY;\n      moveable[gestoName].scrollBy(offsetX, offsetY, e.inputEvent, false);\n    });\n    dragScroll.dragStart(e, {\n      container: scrollContainer\n    });\n  },\n  checkScroll: function (moveable, e) {\n    var dragScroll = e.datas.dragScroll;\n\n    if (!dragScroll) {\n      return;\n    }\n\n    var _a = moveable.props,\n        _b = _a.scrollContainer,\n        scrollContainer = _b === void 0 ? moveable.getContainer() : _b,\n        _c = _a.scrollThreshold,\n        scrollThreshold = _c === void 0 ? 0 : _c,\n        _d = _a.getScrollPosition,\n        getScrollPosition = _d === void 0 ? getDefaultScrollPosition : _d;\n    dragScroll.drag(e, {\n      container: scrollContainer,\n      threshold: scrollThreshold,\n      getScrollPosition: function (ev) {\n        return getScrollPosition({\n          scrollContainer: ev.container,\n          direction: ev.direction\n        });\n      }\n    });\n    return true;\n  },\n  drag: function (moveable, e) {\n    return this.checkScroll(moveable, e);\n  },\n  dragEnd: function (moveable, e) {\n    e.datas.dragScroll.dragEnd();\n    e.datas.dragScroll = null;\n  },\n  dragControlStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign(__assign({}, e), {\n      isControl: true\n    }));\n  },\n  dragControl: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragControlEnd: function (moveable, e) {\n    return this.dragEnd(moveable, e);\n  },\n  dragGroupStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroup: function (moveable, e) {\n    return this.drag(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupEnd: function (moveable, e) {\n    return this.dragEnd(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupControlStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets,\n      isControl: true\n    }));\n  },\n  dragGroupContro: function (moveable, e) {\n    return this.drag(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupControEnd: function (moveable, e) {\n    return this.dragEnd(moveable, __assign(__assign({}, e), {\n      targets: moveable.props.targets\n    }));\n  }\n};\n/**\n * Whether or not target can be scrolled to the scroll container (default: false)\n * @name Moveable.Scrollable#scrollable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n *\n * moveable.scrollable = true;\n */\n\n/**\n * The container to which scroll is applied (default: container)\n * @name Moveable.Scrollable#scrollContainer\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n */\n\n/**\n * Expand the range of the scroll check area. (default: 0)\n * @name Moveable.Scrollable#scrollThreshold\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n */\n\n/**\n * Sets a function to get the scroll position. (default: Function)\n * @name Moveable.Scrollable#getScrollPosition\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n *\n */\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scroll` event occur to scroll.\n * @memberof Moveable.Scrollable\n * @event scroll\n * @param {Moveable.Scrollable.OnScroll} - Parameters for the `scroll` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scrollGroup` event occur to scroll in group.\n * @memberof Moveable.Scrollable\n * @event scrollGroup\n * @param {Moveable.Scrollable.OnScrollGroup} - Parameters for the `scrollGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n\nvar Default = {\n  name: \"\",\n  props: {\n    target: Object,\n    dragTarget: Object,\n    container: Object,\n    rootContainer: Object,\n    zoom: Number,\n    transformOrigin: Array,\n    edge: Boolean,\n    ables: Array,\n    className: String,\n    pinchThreshold: Number,\n    pinchOutside: Boolean,\n    triggerAblesSimultaneously: Boolean,\n    checkInput: Boolean,\n    cspNonce: String,\n    translateZ: Number\n  },\n  events: {}\n};\nvar Padding = {\n  name: \"padding\",\n  props: {\n    padding: Object\n  },\n  events: {},\n  render: function (moveable, React) {\n    var props = moveable.props;\n\n    if (props.dragArea) {\n      return [];\n    }\n\n    var padding = props.padding || {};\n    var _a = padding.left,\n        left = _a === void 0 ? 0 : _a,\n        _b = padding.top,\n        top = _b === void 0 ? 0 : _b,\n        _c = padding.right,\n        right = _c === void 0 ? 0 : _c,\n        _d = padding.bottom,\n        bottom = _d === void 0 ? 0 : _d;\n    var _e = moveable.state,\n        renderPoses = _e.renderPoses,\n        pos1 = _e.pos1,\n        pos2 = _e.pos2,\n        pos3 = _e.pos3,\n        pos4 = _e.pos4;\n    var poses = [pos1, pos2, pos3, pos4];\n    var paddingDirections = [];\n\n    if (left > 0) {\n      paddingDirections.push([0, 2]);\n    }\n\n    if (top > 0) {\n      paddingDirections.push([0, 1]);\n    }\n\n    if (right > 0) {\n      paddingDirections.push([1, 3]);\n    }\n\n    if (bottom > 0) {\n      paddingDirections.push([2, 3]);\n    }\n\n    return paddingDirections.map(function (_a, i) {\n      var dir1 = _a[0],\n          dir2 = _a[1];\n      var paddingPos1 = poses[dir1];\n      var paddingPos2 = poses[dir2];\n      var paddingPos3 = renderPoses[dir1];\n      var paddingPos4 = renderPoses[dir2];\n      var h = createWarpMatrix([0, 0], [100, 0], [0, 100], [100, 100], paddingPos1, paddingPos2, paddingPos3, paddingPos4);\n\n      if (!h.length) {\n        return undefined;\n      }\n\n      return React.createElement(\"div\", {\n        key: \"padding\" + i,\n        className: prefix(\"padding\"),\n        style: {\n          transform: makeMatrixCSS(h, true)\n        }\n      });\n    });\n  }\n};\n/**\n * Add padding around the target to increase the drag area. (default: null)\n * @name Moveable#padding\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  target: document.querySelector(\".target\"),\n *  padding: { left: 0, top: 0, right: 0, bottom: 0 },\n * });\n * moveable.padding = { left: 10, top: 10, right: 10, bottom: 10 },\n * moveable.updateRect();\n */\n\nvar RADIUS_DIRECTIONS = [\"nw\", \"ne\", \"se\", \"sw\"];\n\nfunction caculateRatio(values, size) {\n  var sumSize = values[0] + values[1];\n  var sumRatio = sumSize > size ? size / sumSize : 1;\n  values[0] *= sumRatio;\n  values[1] = size - values[1] * sumRatio;\n  return values;\n}\n\nvar HORIZONTAL_RADIUS_ORDER = [1, 2, 5, 6];\nvar VERTICAL_RADIUS_ORDER = [0, 3, 4, 7];\nvar HORIZONTAL_RADIUS_DIRECTIONS = [1, -1, -1, 1];\nvar VERTICAL_RADIUS_DIRECTIONS = [1, 1, -1, -1];\n\nfunction getRadiusStyles(poses, controlPoses, isRelative, width, height, left, top, right, bottom) {\n  if (left === void 0) {\n    left = 0;\n  }\n\n  if (top === void 0) {\n    top = 0;\n  }\n\n  if (right === void 0) {\n    right = width;\n  }\n\n  if (bottom === void 0) {\n    bottom = height;\n  }\n\n  var clipStyles = [];\n  var isVertical = false;\n  var raws = poses.map(function (pos, i) {\n    var _a = controlPoses[i],\n        horizontal = _a.horizontal,\n        vertical = _a.vertical;\n\n    if (vertical && !isVertical) {\n      isVertical = true;\n      clipStyles.push(\"/\");\n    }\n\n    if (isVertical) {\n      var rawPos = Math.max(0, vertical === 1 ? pos[1] - top : bottom - pos[1]);\n      clipStyles.push(convertCSSSize(rawPos, height, isRelative));\n      return rawPos;\n    } else {\n      var rawPos = Math.max(0, horizontal === 1 ? pos[0] - left : right - pos[0]);\n      clipStyles.push(convertCSSSize(rawPos, width, isRelative));\n      return rawPos;\n    }\n  });\n  return {\n    styles: clipStyles,\n    raws: raws\n  };\n}\n\nfunction getRadiusRange(controlPoses) {\n  // [start, length]\n  var horizontalRange = [0, 0];\n  var verticalRange = [0, 0];\n  var length = controlPoses.length;\n\n  for (var i = 0; i < length; ++i) {\n    var clipPose = controlPoses[i];\n\n    if (!clipPose.sub) {\n      continue;\n    }\n\n    if (clipPose.horizontal) {\n      if (horizontalRange[1] === 0) {\n        horizontalRange[0] = i;\n      }\n\n      horizontalRange[1] = i - horizontalRange[0] + 1;\n      verticalRange[0] = i + 1;\n    }\n\n    if (clipPose.vertical) {\n      if (verticalRange[1] === 0) {\n        verticalRange[0] = i;\n      }\n\n      verticalRange[1] = i - verticalRange[0] + 1;\n    }\n  }\n\n  return {\n    horizontalRange: horizontalRange,\n    verticalRange: verticalRange\n  };\n}\n\nfunction getRadiusValues(values, width, height, left, top) {\n  var _a, _b, _c, _d;\n\n  var splitIndex = values.indexOf(\"/\");\n  var splitLength = (splitIndex > -1 ? values.slice(0, splitIndex) : values).length;\n  var horizontalValues = values.slice(0, splitLength);\n  var verticalValues = values.slice(splitLength + 1);\n  var _e = horizontalValues[0],\n      nwValue = _e === void 0 ? \"0\" : _e,\n      _f = horizontalValues[1],\n      neValue = _f === void 0 ? nwValue : _f,\n      _g = horizontalValues[2],\n      seValue = _g === void 0 ? nwValue : _g,\n      _h = horizontalValues[3],\n      swValue = _h === void 0 ? neValue : _h;\n  var _j = verticalValues[0],\n      wnValue = _j === void 0 ? nwValue : _j,\n      _k = verticalValues[1],\n      enValue = _k === void 0 ? wnValue : _k,\n      _l = verticalValues[2],\n      esValue = _l === void 0 ? wnValue : _l,\n      _m = verticalValues[3],\n      wsValue = _m === void 0 ? enValue : _m;\n  var horizontalRawPoses = [nwValue, neValue, seValue, swValue].map(function (pos) {\n    return convertUnitSize(pos, width);\n  });\n  var verticalRawPoses = [wnValue, enValue, esValue, wsValue].map(function (pos) {\n    return convertUnitSize(pos, height);\n  });\n  var horizontalPoses = horizontalRawPoses.slice();\n  var verticalPoses = verticalRawPoses.slice();\n  _a = caculateRatio([horizontalPoses[0], horizontalPoses[1]], width), horizontalPoses[0] = _a[0], horizontalPoses[1] = _a[1];\n  _b = caculateRatio([horizontalPoses[3], horizontalPoses[2]], width), horizontalPoses[3] = _b[0], horizontalPoses[2] = _b[1];\n  _c = caculateRatio([verticalPoses[0], verticalPoses[3]], height), verticalPoses[0] = _c[0], verticalPoses[3] = _c[1];\n  _d = caculateRatio([verticalPoses[1], verticalPoses[2]], height), verticalPoses[1] = _d[0], verticalPoses[2] = _d[1];\n  var nextHorizontalPoses = horizontalPoses.slice(0, horizontalValues.length);\n  var nextVerticalPoses = verticalPoses.slice(0, verticalValues.length);\n  return __spreadArrays(nextHorizontalPoses.map(function (pos, i) {\n    var direction = RADIUS_DIRECTIONS[i];\n    return {\n      horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n      vertical: 0,\n      pos: [left + pos, top + (VERTICAL_RADIUS_DIRECTIONS[i] === -1 ? height : 0)],\n      sub: true,\n      raw: horizontalRawPoses[i],\n      direction: direction\n    };\n  }), nextVerticalPoses.map(function (pos, i) {\n    var direction = RADIUS_DIRECTIONS[i];\n    return {\n      horizontal: 0,\n      vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n      pos: [left + (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1 ? width : 0), top + pos],\n      sub: true,\n      raw: verticalRawPoses[i],\n      direction: direction\n    };\n  }));\n}\n\nfunction removeRadiusPos(controlPoses, poses, index, startIndex, length) {\n  if (length === void 0) {\n    length = poses.length;\n  }\n\n  var _a = getRadiusRange(controlPoses.slice(startIndex)),\n      horizontalRange = _a.horizontalRange,\n      verticalRange = _a.verticalRange;\n\n  var radiuslIndex = index - startIndex;\n  var deleteCount = 0;\n\n  if (radiuslIndex === 0) {\n    deleteCount = length;\n  } else if (radiuslIndex > 0 && radiuslIndex < horizontalRange[1]) {\n    deleteCount = horizontalRange[1] - radiuslIndex;\n  } else if (radiuslIndex >= verticalRange[0]) {\n    deleteCount = verticalRange[0] + verticalRange[1] - radiuslIndex;\n  } else {\n    return;\n  }\n\n  controlPoses.splice(index, deleteCount);\n  poses.splice(index, deleteCount);\n}\n\nfunction addRadiusPos(controlPoses, poses, startIndex, horizontalIndex, verticalIndex, distX, distY, right, bottom, left, top) {\n  if (left === void 0) {\n    left = 0;\n  }\n\n  if (top === void 0) {\n    top = 0;\n  }\n\n  var _a = getRadiusRange(controlPoses.slice(startIndex)),\n      horizontalRange = _a.horizontalRange,\n      verticalRange = _a.verticalRange;\n\n  if (horizontalIndex > -1) {\n    var radiusX = HORIZONTAL_RADIUS_DIRECTIONS[horizontalIndex] === 1 ? distX - left : right - distX;\n\n    for (var i = horizontalRange[1]; i <= horizontalIndex; ++i) {\n      var y = VERTICAL_RADIUS_DIRECTIONS[i] === 1 ? top : bottom;\n      var x = 0;\n\n      if (horizontalIndex === i) {\n        x = distX;\n      } else if (i === 0) {\n        x = left + radiusX;\n      } else if (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1) {\n        x = right - (poses[startIndex][0] - left);\n      }\n\n      controlPoses.splice(startIndex + i, 0, {\n        horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n        vertical: 0,\n        pos: [x, y]\n      });\n      poses.splice(startIndex + i, 0, [x, y]);\n\n      if (i === 0) {\n        break;\n      }\n    }\n  } else if (verticalIndex > -1) {\n    var radiusY = VERTICAL_RADIUS_DIRECTIONS[verticalIndex] === 1 ? distY - top : bottom - distY;\n\n    if (horizontalRange[1] === 0 && verticalRange[1] === 0) {\n      var pos = [left + radiusY, top];\n      controlPoses.push({\n        horizontal: HORIZONTAL_RADIUS_DIRECTIONS[0],\n        vertical: 0,\n        pos: pos\n      });\n      poses.push(pos);\n    }\n\n    var startVerticalIndex = verticalRange[0];\n\n    for (var i = verticalRange[1]; i <= verticalIndex; ++i) {\n      var x = HORIZONTAL_RADIUS_DIRECTIONS[i] === 1 ? left : right;\n      var y = 0;\n\n      if (verticalIndex === i) {\n        y = distY;\n      } else if (i === 0) {\n        y = top + radiusY;\n      } else if (VERTICAL_RADIUS_DIRECTIONS[i] === 1) {\n        y = poses[startIndex + startVerticalIndex][1];\n      } else if (VERTICAL_RADIUS_DIRECTIONS[i] === -1) {\n        y = bottom - (poses[startIndex + startVerticalIndex][1] - top);\n      }\n\n      controlPoses.push({\n        horizontal: 0,\n        vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n        pos: [x, y]\n      });\n      poses.push([x, y]);\n\n      if (i === 0) {\n        break;\n      }\n    }\n  }\n}\n\nfunction splitRadiusPoses(controlPoses, raws) {\n  if (raws === void 0) {\n    raws = controlPoses.map(function (pos) {\n      return pos.raw;\n    });\n  }\n\n  var horizontals = controlPoses.map(function (pos, i) {\n    return pos.horizontal ? raws[i] : null;\n  }).filter(function (pos) {\n    return pos != null;\n  });\n  var verticals = controlPoses.map(function (pos, i) {\n    return pos.vertical ? raws[i] : null;\n  }).filter(function (pos) {\n    return pos != null;\n  });\n  return {\n    horizontals: horizontals,\n    verticals: verticals\n  };\n}\n\nvar CLIP_DIRECTIONS = [[0, -1, \"n\"], [1, 0, \"e\"]];\nvar CLIP_RECT_DIRECTIONS = [[-1, -1, \"nw\"], [0, -1, \"n\"], [1, -1, \"ne\"], [1, 0, \"e\"], [1, 1, \"se\"], [0, 1, \"s\"], [-1, 1, \"sw\"], [-1, 0, \"w\"]]; // 1 2 5 6 0 3 4 7\n// 0 1 2 3 4 5 6 7\n\nfunction getClipStyles(moveable, clipPath, poses) {\n  var clipRelative = moveable.props.clipRelative;\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height;\n  var _b = clipPath,\n      clipType = _b.type,\n      clipPoses = _b.poses;\n  var isRect = clipType === \"rect\";\n  var isCircle = clipType === \"circle\";\n\n  if (clipType === \"polygon\") {\n    return poses.map(function (pos) {\n      return convertCSSSize(pos[0], width, clipRelative) + \" \" + convertCSSSize(pos[1], height, clipRelative);\n    });\n  } else if (isRect || clipType === \"inset\") {\n    var top = poses[1][1];\n    var right = poses[3][0];\n    var left = poses[7][0];\n    var bottom = poses[5][1];\n\n    if (isRect) {\n      return [top, right, bottom, left].map(function (pos) {\n        return pos + \"px\";\n      });\n    }\n\n    var clipStyles = [top, width - right, height - bottom, left].map(function (pos, i) {\n      return convertCSSSize(pos, i % 2 ? width : height, clipRelative);\n    });\n\n    if (poses.length > 8) {\n      var _c = minus(poses[4], poses[0]),\n          subWidth = _c[0],\n          subHeight = _c[1];\n\n      clipStyles.push.apply(clipStyles, __spreadArrays([\"round\"], getRadiusStyles(poses.slice(8), clipPoses.slice(8), clipRelative, subWidth, subHeight, left, top, right, bottom).styles));\n    }\n\n    return clipStyles;\n  } else if (isCircle || clipType === \"ellipse\") {\n    var center = poses[0];\n    var ry = convertCSSSize(Math.abs(poses[1][1] - center[1]), isCircle ? Math.sqrt((width * width + height * height) / 2) : height, clipRelative);\n    var clipStyles = isCircle ? [ry] : [convertCSSSize(Math.abs(poses[2][0] - center[0]), width, clipRelative), ry];\n    clipStyles.push(\"at\", convertCSSSize(center[0], width, clipRelative), convertCSSSize(center[1], height, clipRelative));\n    return clipStyles;\n  }\n}\n\nfunction getRectPoses(top, right, bottom, left) {\n  var xs = [left, (left + right) / 2, right];\n  var ys = [top, (top + bottom) / 2, bottom];\n  return CLIP_RECT_DIRECTIONS.map(function (_a) {\n    var dirx = _a[0],\n        diry = _a[1],\n        dir = _a[2];\n    var x = xs[dirx + 1];\n    var y = ys[diry + 1];\n    return {\n      vertical: Math.abs(diry),\n      horizontal: Math.abs(dirx),\n      direction: dir,\n      pos: [x, y]\n    };\n  });\n}\n\nfunction getClipPath(target, width, height, defaultClip, customClip) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  var clipText = customClip;\n\n  if (!clipText) {\n    var style = getComputedStyle(target);\n    var clipPath = style.clipPath;\n    clipText = clipPath !== \"none\" ? clipPath : style.clip;\n  }\n\n  if (!clipText || clipText === \"none\" || clipText === \"auto\") {\n    clipText = defaultClip;\n\n    if (!clipText) {\n      return;\n    }\n  }\n\n  var _h = splitBracket(clipText),\n      _j = _h.prefix,\n      clipPrefix = _j === void 0 ? clipText : _j,\n      _k = _h.value,\n      value = _k === void 0 ? \"\" : _k;\n\n  var isCircle = clipPrefix === \"circle\";\n  var splitter = \" \";\n\n  if (clipPrefix === \"polygon\") {\n    var values = splitComma(value || \"0% 0%, 100% 0%, 100% 100%, 0% 100%\");\n    splitter = \",\";\n    var poses = values.map(function (pos) {\n      var _a = pos.split(\" \"),\n          xPos = _a[0],\n          yPos = _a[1];\n\n      return {\n        vertical: 1,\n        horizontal: 1,\n        pos: [convertUnitSize(xPos, width), convertUnitSize(yPos, height)]\n      };\n    });\n    return {\n      type: clipPrefix,\n      clipText: clipText,\n      poses: poses,\n      splitter: splitter\n    };\n  } else if (isCircle || clipPrefix === \"ellipse\") {\n    var xPos = \"\";\n    var yPos = \"\";\n    var radiusX_1 = 0;\n    var radiusY_1 = 0;\n    var values = splitSpace(value);\n\n    if (isCircle) {\n      var radius = \"\";\n      _a = values[0], radius = _a === void 0 ? \"50%\" : _a, _b = values[2], xPos = _b === void 0 ? \"50%\" : _b, _c = values[3], yPos = _c === void 0 ? \"50%\" : _c;\n      radiusX_1 = convertUnitSize(radius, Math.sqrt((width * width + height * height) / 2));\n      radiusY_1 = radiusX_1;\n    } else {\n      var xRadius = \"\";\n      var yRadius = \"\";\n      _d = values[0], xRadius = _d === void 0 ? \"50%\" : _d, _e = values[1], yRadius = _e === void 0 ? \"50%\" : _e, _f = values[3], xPos = _f === void 0 ? \"50%\" : _f, _g = values[4], yPos = _g === void 0 ? \"50%\" : _g;\n      radiusX_1 = convertUnitSize(xRadius, width);\n      radiusY_1 = convertUnitSize(yRadius, height);\n    }\n\n    var centerPos_1 = [convertUnitSize(xPos, width), convertUnitSize(yPos, height)];\n\n    var poses = __spreadArrays([{\n      vertical: 1,\n      horizontal: 1,\n      pos: centerPos_1,\n      direction: \"nesw\"\n    }], CLIP_DIRECTIONS.slice(0, isCircle ? 1 : 2).map(function (dir) {\n      return {\n        vertical: Math.abs(dir[1]),\n        horizontal: dir[0],\n        direction: dir[2],\n        sub: true,\n        pos: [centerPos_1[0] + dir[0] * radiusX_1, centerPos_1[1] + dir[1] * radiusY_1]\n      };\n    }));\n\n    return {\n      type: clipPrefix,\n      clipText: clipText,\n      radiusX: radiusX_1,\n      radiusY: radiusY_1,\n      left: centerPos_1[0] - radiusX_1,\n      top: centerPos_1[1] - radiusY_1,\n      poses: poses,\n      splitter: splitter\n    };\n  } else if (clipPrefix === \"inset\") {\n    var values = splitSpace(value || \"0 0 0 0\");\n    var roundIndex = values.indexOf(\"round\");\n    var rectLength = (roundIndex > -1 ? values.slice(0, roundIndex) : values).length;\n    var radiusValues = values.slice(rectLength + 1);\n\n    var _l = values.slice(0, rectLength),\n        topValue = _l[0],\n        _m = _l[1],\n        rightValue = _m === void 0 ? topValue : _m,\n        _o = _l[2],\n        bottomValue = _o === void 0 ? topValue : _o,\n        _p = _l[3],\n        leftValue = _p === void 0 ? rightValue : _p;\n\n    var _q = [topValue, bottomValue].map(function (pos) {\n      return convertUnitSize(pos, height);\n    }),\n        top = _q[0],\n        bottom = _q[1];\n\n    var _r = [leftValue, rightValue].map(function (pos) {\n      return convertUnitSize(pos, width);\n    }),\n        left = _r[0],\n        right = _r[1];\n\n    var nextRight = width - right;\n    var nextBottom = height - bottom;\n    var radiusPoses = getRadiusValues(radiusValues, nextRight - left, nextBottom - top, left, top);\n\n    var poses = __spreadArrays(getRectPoses(top, nextRight, nextBottom, left), radiusPoses);\n\n    return {\n      type: \"inset\",\n      clipText: clipText,\n      poses: poses,\n      top: top,\n      left: left,\n      right: nextRight,\n      bottom: nextBottom,\n      radius: radiusValues,\n      splitter: splitter\n    };\n  } else if (clipPrefix === \"rect\") {\n    // top right bottom left\n    var values = splitComma(value || \"0px, \" + width + \"px, \" + height + \"px, 0px\");\n    splitter = \",\";\n\n    var _s = values.map(function (pos) {\n      var posValue = splitUnit(pos).value;\n      return posValue;\n    }),\n        top = _s[0],\n        right = _s[1],\n        bottom = _s[2],\n        left = _s[3];\n\n    var poses = getRectPoses(top, right, bottom, left);\n    return {\n      type: \"rect\",\n      clipText: clipText,\n      poses: poses,\n      top: top,\n      right: right,\n      bottom: bottom,\n      left: left,\n      values: values,\n      splitter: splitter\n    };\n  }\n\n  return;\n}\n\nfunction addClipPath(moveable, e) {\n  var _a = caculatePointerDist(moveable, e),\n      distX = _a[0],\n      distY = _a[1];\n\n  var _b = e.datas,\n      clipPath = _b.clipPath,\n      index = _b.index;\n  var _c = clipPath,\n      clipType = _c.type,\n      clipPoses = _c.poses,\n      splitter = _c.splitter;\n  var poses = clipPoses.map(function (pos) {\n    return pos.pos;\n  });\n\n  if (clipType === \"polygon\") {\n    poses.splice(index, 0, [distX, distY]);\n  } else if (clipType === \"inset\") {\n    var horizontalIndex = HORIZONTAL_RADIUS_ORDER.indexOf(index);\n    var verticalIndex = VERTICAL_RADIUS_ORDER.indexOf(index);\n    var length = clipPoses.length;\n    addRadiusPos(clipPoses, poses, 8, horizontalIndex, verticalIndex, distX, distY, poses[4][0], poses[4][1], poses[0][0], poses[0][1]);\n\n    if (length === clipPoses.length) {\n      return;\n    }\n  } else {\n    return;\n  }\n\n  var clipStyles = getClipStyles(moveable, clipPath, poses);\n  triggerEvent(moveable, \"onClip\", fillParams(moveable, e, {\n    clipEventType: \"added\",\n    clipType: clipType,\n    poses: poses,\n    clipStyles: clipStyles,\n    clipStyle: clipType + \"(\" + clipStyles.join(splitter) + \")\",\n    distX: 0,\n    distY: 0\n  }));\n}\n\nfunction removeClipPath(moveable, e) {\n  var _a = e.datas,\n      clipPath = _a.clipPath,\n      index = _a.index;\n  var _b = clipPath,\n      clipType = _b.type,\n      clipPoses = _b.poses,\n      splitter = _b.splitter;\n  var poses = clipPoses.map(function (pos) {\n    return pos.pos;\n  });\n  var length = poses.length;\n\n  if (clipType === \"polygon\") {\n    clipPoses.splice(index, 1);\n    poses.splice(index, 1);\n  } else if (clipType === \"inset\") {\n    if (index < 8) {\n      return;\n    }\n\n    removeRadiusPos(clipPoses, poses, index, 8, length);\n\n    if (length === clipPoses.length) {\n      return;\n    }\n  } else {\n    return;\n  }\n\n  var clipStyles = getClipStyles(moveable, clipPath, poses);\n  triggerEvent(moveable, \"onClip\", fillParams(moveable, e, {\n    clipEventType: \"removed\",\n    clipType: clipType,\n    poses: poses,\n    clipStyles: clipStyles,\n    clipStyle: clipType + \"(\" + clipStyles.join(splitter) + \")\",\n    distX: 0,\n    distY: 0\n  }));\n}\n/**\n * @namespace Moveable.Clippable\n * @description Whether to clip the target.\n */\n\n\nvar Clippable = {\n  name: \"clippable\",\n  props: {\n    clippable: Boolean,\n    defaultClipPath: String,\n    customClipPath: String,\n    clipRelative: Boolean,\n    clipArea: Boolean,\n    dragWithClip: Boolean,\n    clipTargetBounds: Boolean,\n    clipVerticalGuidelines: Array,\n    clipHorizontalGuidelines: Array,\n    clipSnapThreshold: Boolean\n  },\n  events: {\n    onClipStart: \"clipStart\",\n    onClip: \"clip\",\n    onClipEnd: \"clipEnd\"\n  },\n  css: [\".control.clip-control {\\n    background: #6d6;\\n    cursor: pointer;\\n}\\n.control.clip-control.clip-radius {\\n    background: #d66;\\n}\\n.line.clip-line {\\n    background: #6e6;\\n    cursor: move;\\n    z-index: 1;\\n}\\n.clip-area {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n}\\n.clip-ellipse {\\n    position: absolute;\\n    cursor: move;\\n    border: 1px solid #6d6;\\n    border: var(--zoompx) solid #6d6;\\n    border-radius: 50%;\\n    transform-origin: 0px 0px;\\n}\", \":host {\\n    --bounds-color: #d66;\\n}\", \".guideline {\\n    pointer-events: none;\\n    z-index: 2;\\n}\", \".line.guideline.bounds {\\n    background: #d66;\\n    background: var(--bounds-color);\\n}\"],\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        customClipPath = _a.customClipPath,\n        defaultClipPath = _a.defaultClipPath,\n        clipArea = _a.clipArea,\n        zoom = _a.zoom;\n    var _b = moveable.state,\n        target = _b.target,\n        width = _b.width,\n        height = _b.height,\n        allMatrix = _b.allMatrix,\n        is3d = _b.is3d,\n        left = _b.left,\n        top = _b.top,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4,\n        clipPathState = _b.clipPathState,\n        snapBoundInfos = _b.snapBoundInfos;\n\n    if (!target) {\n      return [];\n    }\n\n    var clipPath = getClipPath(target, width, height, defaultClipPath || \"inset\", clipPathState || customClipPath);\n\n    if (!clipPath) {\n      return [];\n    }\n\n    var n = is3d ? 4 : 3;\n    var type = clipPath.type;\n    var clipPoses = clipPath.poses;\n    var poses = clipPoses.map(function (pos) {\n      // return [x, y];\n      var caculatedPos = caculatePosition(allMatrix, pos.pos, n);\n      return [caculatedPos[0] - left, caculatedPos[1] - top];\n    });\n    var controls = [];\n    var lines = [];\n    var isRect = type === \"rect\";\n    var isInset = type === \"inset\";\n    var isPolygon = type === \"polygon\";\n\n    if (isRect || isInset || isPolygon) {\n      var linePoses_1 = isInset ? poses.slice(0, 8) : poses;\n      lines = linePoses_1.map(function (to, i) {\n        var from = i === 0 ? linePoses_1[linePoses_1.length - 1] : linePoses_1[i - 1];\n        var rad = getRad(from, to);\n        var dist = getDiagonalSize(from, to);\n        return React.createElement(\"div\", {\n          key: \"clipLine\" + i,\n          className: prefix(\"line\", \"clip-line\", \"snap-control\"),\n          \"data-clip-index\": i,\n          style: {\n            width: dist + \"px\",\n            transform: \"translate(\" + from[0] + \"px, \" + from[1] + \"px) rotate(\" + rad + \"rad)\"\n          }\n        });\n      });\n    }\n\n    controls = poses.map(function (pos, i) {\n      return React.createElement(\"div\", {\n        key: \"clipControl\" + i,\n        className: prefix(\"control\", \"clip-control\", \"snap-control\"),\n        \"data-clip-index\": i,\n        style: {\n          transform: \"translate(\" + pos[0] + \"px, \" + pos[1] + \"px)\"\n        }\n      });\n    });\n\n    if (isInset) {\n      controls.push.apply(controls, poses.slice(8).map(function (pos, i) {\n        return React.createElement(\"div\", {\n          key: \"clipRadiusControl\" + i,\n          className: prefix(\"control\", \"clip-control\", \"clip-radius\", \"snap-control\"),\n          \"data-clip-index\": 8 + i,\n          style: {\n            transform: \"translate(\" + pos[0] + \"px, \" + pos[1] + \"px)\"\n          }\n        });\n      }));\n    }\n\n    if (type === \"circle\" || type === \"ellipse\") {\n      var clipLeft = clipPath.left,\n          clipTop = clipPath.top,\n          radiusX = clipPath.radiusX,\n          radiusY = clipPath.radiusY;\n\n      var _c = minus(caculatePosition(allMatrix, [clipLeft, clipTop], n), caculatePosition(allMatrix, [0, 0], n)),\n          distLeft = _c[0],\n          distTop = _c[1];\n\n      var ellipseClipPath = \"none\";\n\n      if (!clipArea) {\n        var piece = Math.max(10, radiusX / 5, radiusY / 5);\n        var areaPoses = [];\n\n        for (var i = 0; i <= piece; ++i) {\n          var rad = Math.PI * 2 / piece * i;\n          areaPoses.push([radiusX + (radiusX - zoom) * Math.cos(rad), radiusY + (radiusY - zoom) * Math.sin(rad)]);\n        }\n\n        areaPoses.push([radiusX, -2]);\n        areaPoses.push([-2, -2]);\n        areaPoses.push([-2, radiusY * 2 + 2]);\n        areaPoses.push([radiusX * 2 + 2, radiusY * 2 + 2]);\n        areaPoses.push([radiusX * 2 + 2, -2]);\n        areaPoses.push([radiusX, -2]);\n        ellipseClipPath = \"polygon(\" + areaPoses.map(function (pos) {\n          return pos[0] + \"px \" + pos[1] + \"px\";\n        }).join(\", \") + \")\";\n      }\n\n      controls.push(React.createElement(\"div\", {\n        key: \"clipEllipse\",\n        className: prefix(\"clip-ellipse\", \"snap-control\"),\n        style: {\n          width: radiusX * 2 + \"px\",\n          height: radiusY * 2 + \"px\",\n          clipPath: ellipseClipPath,\n          transform: \"translate(\" + (-left + distLeft) + \"px, \" + (-top + distTop) + \"px) \" + makeMatrixCSS(allMatrix)\n        }\n      }));\n    }\n\n    if (clipArea) {\n      var _d = getRect(__spreadArrays([pos1, pos2, pos3, pos4], poses)),\n          allWidth = _d.width,\n          allHeight = _d.height,\n          allLeft_1 = _d.left,\n          allTop_1 = _d.top;\n\n      if (isPolygon || isRect || isInset) {\n        var areaPoses = isInset ? poses.slice(0, 8) : poses;\n        controls.push(React.createElement(\"div\", {\n          key: \"clipArea\",\n          className: prefix(\"clip-area\", \"snap-control\"),\n          style: {\n            width: allWidth + \"px\",\n            height: allHeight + \"px\",\n            transform: \"translate(\" + allLeft_1 + \"px, \" + allTop_1 + \"px)\",\n            clipPath: \"polygon(\" + areaPoses.map(function (pos) {\n              return pos[0] - allLeft_1 + \"px \" + (pos[1] - allTop_1) + \"px\";\n            }).join(\", \") + \")\"\n          }\n        }));\n      }\n    }\n\n    if (snapBoundInfos) {\n      [\"vertical\", \"horizontal\"].forEach(function (directionType) {\n        var info = snapBoundInfos[directionType];\n        var isHorizontal = directionType === \"horizontal\";\n\n        if (info.isSnap) {\n          lines.push.apply(lines, info.snap.posInfos.map(function (_a, i) {\n            var pos = _a.pos;\n            var snapPos1 = minus(caculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n            var snapPos2 = minus(caculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n            return renderLine(React, \"\", snapPos1, snapPos2, \"clip\" + directionType + \"snap\" + i, \"guideline\");\n          }));\n        }\n\n        if (info.isBound) {\n          lines.push.apply(lines, info.bounds.map(function (_a, i) {\n            var pos = _a.pos;\n            var snapPos1 = minus(caculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n            var snapPos2 = minus(caculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n            return renderLine(React, \"\", snapPos1, snapPos2, \"clip\" + directionType + \"bounds\" + i, \"guideline\", \"bounds\", \"bold\");\n          }));\n        }\n      });\n    }\n\n    return __spreadArrays(controls, lines);\n  },\n  dragControlCondition: function (e) {\n    return e.inputEvent && (e.inputEvent.target.className || \"\").indexOf(\"clip\") > -1;\n  },\n  dragStart: function (moveable, e) {\n    var props = moveable.props;\n    var _a = props.dragWithClip,\n        dragWithClip = _a === void 0 ? true : _a;\n\n    if (dragWithClip) {\n      return false;\n    }\n\n    return this.dragControlStart(moveable, e);\n  },\n  drag: function (moveable, e) {\n    return this.dragControl(moveable, e);\n  },\n  dragEnd: function (moveable, e) {\n    return this.dragControlEnd(moveable, e);\n  },\n  dragControlStart: function (moveable, e) {\n    var state = moveable.state;\n    var _a = moveable.props,\n        defaultClipPath = _a.defaultClipPath,\n        customClipPath = _a.customClipPath;\n    var target = state.target,\n        width = state.width,\n        height = state.height;\n    var inputTarget = e.inputEvent ? e.inputEvent.target : null;\n    var className = inputTarget ? inputTarget.className : \"\";\n    var datas = e.datas;\n    var clipPath = getClipPath(target, width, height, defaultClipPath || \"inset\", customClipPath);\n\n    if (!clipPath) {\n      return false;\n    }\n\n    var clipText = clipPath.clipText,\n        type = clipPath.type,\n        poses = clipPath.poses;\n    var result = triggerEvent(moveable, \"onClipStart\", fillParams(moveable, e, {\n      clipType: type,\n      clipStyle: clipText,\n      poses: poses.map(function (pos) {\n        return pos.pos;\n      })\n    }));\n\n    if (result === false) {\n      datas.isClipStart = false;\n      return false;\n    }\n\n    datas.isControl = className.indexOf(\"clip-control\") > -1;\n    datas.isLine = className.indexOf(\"clip-line\") > -1;\n    datas.isArea = className.indexOf(\"clip-area\") > -1 || className.indexOf(\"clip-ellipse\") > -1;\n    datas.index = inputTarget ? parseInt(inputTarget.getAttribute(\"data-clip-index\"), 10) : -1;\n    datas.clipPath = clipPath;\n    datas.isClipStart = true;\n    state.clipPathState = clipText;\n    setDragStart(moveable, e);\n    return true;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas,\n        originalDatas = e.originalDatas;\n\n    if (!datas.isClipStart) {\n      return false;\n    }\n\n    var draggableData = originalDatas && originalDatas.draggable || {};\n    var _a = datas,\n        isControl = _a.isControl,\n        isLine = _a.isLine,\n        isArea = _a.isArea,\n        index = _a.index,\n        clipPath = _a.clipPath;\n\n    if (!clipPath) {\n      return false;\n    }\n\n    var _b = draggableData.isDrag ? draggableData.prevDist : getDragDist(e),\n        distX = _b[0],\n        distY = _b[1];\n\n    var props = moveable.props;\n    var state = moveable.state;\n    var width = state.width,\n        height = state.height;\n    var isDragWithTarget = !isArea && !isControl && !isLine;\n    var clipType = clipPath.type,\n        clipPoses = clipPath.poses,\n        splitter = clipPath.splitter;\n    var poses = clipPoses.map(function (pos) {\n      return pos.pos;\n    });\n\n    if (isDragWithTarget) {\n      distX = -distX;\n      distY = -distY;\n    }\n\n    var isAll = !isControl || clipPoses[index].direction === \"nesw\";\n    var isRect = clipType === \"inset\" || clipType === \"rect\";\n    var dists = clipPoses.map(function () {\n      return [0, 0];\n    });\n\n    if (isControl && !isAll) {\n      var _c = clipPoses[index],\n          horizontal = _c.horizontal,\n          vertical = _c.vertical;\n      var dist = [distX * Math.abs(horizontal), distY * Math.abs(vertical)];\n      dists = moveControlPos(clipPoses, index, dist, isRect);\n    } else if (isAll) {\n      dists = poses.map(function () {\n        return [distX, distY];\n      });\n    }\n\n    var nextPoses = poses.map(function (pos, i) {\n      return plus(pos, dists[i]);\n    });\n\n    var guidePoses = __spreadArrays(nextPoses);\n\n    state.snapBoundInfos = null;\n    var isCircle = clipPath.type === \"circle\";\n    var isEllipse = clipPath.type === \"ellipse\";\n\n    if (isCircle || isEllipse) {\n      var guideRect = getRect(nextPoses);\n      var ry = Math.abs(guideRect.bottom - guideRect.top);\n      var rx = Math.abs(isEllipse ? guideRect.right - guideRect.left : ry);\n      var bottom = nextPoses[0][1] + ry;\n      var left = nextPoses[0][0] - rx;\n      var right = nextPoses[0][0] + rx; // right\n\n      if (isCircle) {\n        guidePoses.push([right, guideRect.bottom]);\n        dists.push([1, 0]);\n      } // bottom\n\n\n      guidePoses.push([guideRect.left, bottom]);\n      dists.push([0, 1]); // left\n\n      guidePoses.push([left, guideRect.bottom]);\n      dists.push([1, 0]);\n    }\n\n    var guidelines = addGuidelines([], width, height, (props.clipHorizontalGuidelines || []).map(function (v) {\n      return convertUnitSize(\"\" + v, height);\n    }), (props.clipVerticalGuidelines || []).map(function (v) {\n      return convertUnitSize(\"\" + v, width);\n    }));\n    var guideXPoses = [];\n    var guideYPoses = [];\n\n    if (isCircle || isEllipse) {\n      guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n      guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n    } else if (isRect) {\n      var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n      var rectDists_1 = [dists[0], dists[2], dists[4], dists[6]];\n      guideXPoses = rectPoses.filter(function (_, i) {\n        return rectDists_1[i][0];\n      }).map(function (pos) {\n        return pos[0];\n      });\n      guideYPoses = rectPoses.filter(function (_, i) {\n        return rectDists_1[i][1];\n      }).map(function (pos) {\n        return pos[1];\n      });\n    } else {\n      guideXPoses = guidePoses.filter(function (_, i) {\n        return dists[i][0];\n      }).map(function (pos) {\n        return pos[0];\n      });\n      guideYPoses = guidePoses.filter(function (_, i) {\n        return dists[i][1];\n      }).map(function (pos) {\n        return pos[1];\n      });\n    }\n\n    var _loop_1 = function (i) {\n      var _a = checkSnapBounds(guidelines, props.clipTargetBounds && {\n        left: 0,\n        top: 0,\n        right: width,\n        bottom: height\n      }, guideXPoses, guideYPoses, {\n        snapThreshold: 5\n      }),\n          horizontalSnapInfo = _a.horizontal,\n          verticalSnapInfo = _a.vertical;\n\n      var snapOffsetY = horizontalSnapInfo.offset;\n      var snapOffsetX = verticalSnapInfo.offset;\n\n      if ((isEllipse || isCircle) && dists[0][0] === 0 && dists[0][1] === 0) {\n        var guideRect = getRect(nextPoses);\n        var cy = guideRect.bottom - guideRect.top;\n        var cx = isEllipse ? guideRect.right - guideRect.left : cy;\n        var distSnapX = verticalSnapInfo.isBound ? Math.abs(snapOffsetX) : verticalSnapInfo.snapIndex === 0 ? -snapOffsetX : snapOffsetX;\n        var distSnapY = horizontalSnapInfo.isBound ? Math.abs(snapOffsetY) : horizontalSnapInfo.snapIndex === 0 ? -snapOffsetY : snapOffsetY;\n        cx -= distSnapX;\n        cy -= distSnapY;\n\n        if (isCircle) {\n          cy = checkSnapBoundPriority(verticalSnapInfo, horizontalSnapInfo) > 0 ? cy : cx;\n          cx = cy;\n        }\n\n        var center = guidePoses[0];\n        guidePoses[1][1] = center[1] - cy;\n        guidePoses[2][0] = center[0] + cx;\n        guidePoses[3][1] = center[1] + cy;\n        guidePoses[4][0] = center[0] - cx;\n      } else {\n        guidePoses.forEach(function (pos, j) {\n          var dist = dists[j];\n\n          if (dist[0]) {\n            pos[0] -= snapOffsetX;\n          }\n\n          if (dist[1]) {\n            pos[1] -= snapOffsetY;\n          }\n        });\n        return \"break\";\n      }\n    };\n\n    for (var i = 0; i < 2; ++i) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n\n    var nextClipStyles = getClipStyles(moveable, clipPath, nextPoses);\n    var clipStyle = clipType + \"(\" + nextClipStyles.join(splitter) + \")\";\n    state.clipPathState = clipStyle;\n\n    if (isCircle || isEllipse) {\n      guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n      guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n    } else if (isRect) {\n      var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n      guideXPoses = rectPoses.map(function (pos) {\n        return pos[0];\n      });\n      guideYPoses = rectPoses.map(function (pos) {\n        return pos[1];\n      });\n    } else {\n      guideXPoses = guidePoses.map(function (pos) {\n        return pos[0];\n      });\n      guideYPoses = guidePoses.map(function (pos) {\n        return pos[1];\n      });\n    }\n\n    state.snapBoundInfos = checkSnapBounds(guidelines, props.clipTargetBounds && {\n      left: 0,\n      top: 0,\n      right: width,\n      bottom: height\n    }, guideXPoses, guideYPoses, {\n      snapThreshold: 1\n    });\n    triggerEvent(moveable, \"onClip\", fillParams(moveable, e, {\n      clipEventType: \"changed\",\n      clipType: clipType,\n      poses: nextPoses,\n      clipStyle: clipStyle,\n      clipStyles: nextClipStyles,\n      distX: distX,\n      distY: distY\n    }));\n    return true;\n  },\n  dragControlEnd: function (moveable, e) {\n    this.unset(moveable);\n    var isDrag = e.isDrag,\n        datas = e.datas,\n        isDouble = e.isDouble;\n    var isLine = datas.isLine,\n        isClipStart = datas.isClipStart,\n        isControl = datas.isControl;\n\n    if (!isClipStart) {\n      return false;\n    }\n\n    triggerEvent(moveable, \"onClipEnd\", fillEndParams(moveable, e, {}));\n\n    if (isDouble) {\n      if (isControl) {\n        removeClipPath(moveable, e);\n      } else if (isLine) {\n        // add\n        addClipPath(moveable, e);\n      }\n    }\n\n    return isDouble || isDrag;\n  },\n  unset: function (moveable) {\n    moveable.state.clipPathState = \"\";\n    moveable.state.snapBoundInfos = null;\n  }\n};\n/**\n * Whether to clip the target. (default: false)\n * @name Moveable.Clippable#clippable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n *  If clippath is not set, the default value can be set. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#defaultClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (`rect` not possible) (default: false)\n * @name Moveable.Clippable#clipRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can force the custom clipPath. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#customClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When dragging the target, the clip also moves. (default: true)\n * @name Moveable.Clippable#dragWithClip\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can drag the clip by setting clipArea. (default: false)\n * @name Moveable.Clippable#clipArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n* Whether the clip is bound to the target. (default: false)\n* @name Moveable.Clippable#clipTargetBounds\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipTargetBounds: true,\n* });\n* moveable.on(\"clipStart\", e => {\n*     console.log(e);\n* }).on(\"clip\", e => {\n*     if (e.clipType === \"rect\") {\n*         e.target.style.clip = e.clipStyle;\n*     } else {\n*         e.target.style.clipPath = e.clipStyle;\n*     }\n* }).on(\"clipEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* Add clip guidelines in the vertical direction. (default: [])\n* @name Moveable.Clippable#clipVerticalGuidelines\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n\n/**\n* Add clip guidelines in the horizontal direction. (default: [])\n* @name Moveable.Clippable#clipHorizontalGuidelines\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n\n/**\n* istance value that can snap to clip guidelines. (default: 5)\n* @name Moveable.Clippable#clipSnapThreshold\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n\n/**\n * When drag start the clip area or controls, the `clipStart` event is called.\n * @memberof Moveable.Clippable\n * @event clipStart\n * @param {Moveable.Clippable.OnClipStart} - Parameters for the `clipStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag the clip area or controls, the `clip` event is called.\n * @memberof Moveable.Clippable\n * @event clip\n * @param {Moveable.Clippable.OnClip} - Parameters for the `clip` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag end the clip area or controls, the `clipEnd` event is called.\n * @memberof Moveable.Clippable\n * @event clipEnd\n * @param {Moveable.Clippable.OnClipEnd} - Parameters for the `clipEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * @namespace OriginDraggable\n * @memberof Moveable\n * @description Whether to drag origin (default: false)\n */\n\nvar OriginDraggable = {\n  name: \"originDraggable\",\n  props: {\n    originDraggable: Boolean,\n    originRelative: Boolean\n  },\n  events: {\n    onDragOriginStart: \"dragOriginStart\",\n    onDragOrigin: \"dragOrigin\",\n    onDragOriginEnd: \"dragOriginEnd\"\n  },\n  css: [\":host[data-able-origindraggable] .control.origin {\\n    pointer-events: auto;\\n}\"],\n  dragControlCondition: function (e) {\n    if (e.isRequest) {\n      return e.requestAble === \"originDraggable\";\n    }\n\n    return hasClass(e.inputEvent.target, prefix(\"origin\"));\n  },\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas;\n    setDragStart(moveable, e);\n    var params = fillParams(moveable, e, {\n      dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))\n    });\n    var result = triggerEvent(moveable, \"onDragOriginStart\", params);\n    datas.startOrigin = moveable.state.transformOrigin;\n    datas.startTargetOrigin = moveable.state.targetOrigin;\n    datas.prevOrigin = [0, 0];\n    datas.isDragOrigin = true;\n\n    if (result === false) {\n      datas.isDragOrigin = false;\n      return false;\n    }\n\n    return params;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas,\n        isPinch = e.isPinch,\n        isRequest = e.isRequest;\n\n    if (!datas.isDragOrigin) {\n      return false;\n    }\n\n    var _a = getDragDist(e),\n        distX = _a[0],\n        distY = _a[1];\n\n    var state = moveable.state;\n    var width = state.width,\n        height = state.height,\n        offsetMatrix = state.offsetMatrix,\n        targetMatrix = state.targetMatrix,\n        is3d = state.is3d;\n    var _b = moveable.props.originRelative,\n        originRelative = _b === void 0 ? true : _b;\n    var n = is3d ? 4 : 3;\n    var dist = [distX, distY];\n\n    if (isRequest) {\n      var distOrigin = e.distOrigin;\n\n      if (distOrigin[0] || distOrigin[1]) {\n        dist = distOrigin;\n      }\n    }\n\n    var origin = plus(datas.startOrigin, dist);\n    var targetOrigin = plus(datas.startTargetOrigin, dist);\n    var delta = minus(dist, datas.prevOrigin);\n    var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, origin, n);\n    var rect = moveable.getRect();\n    var nextRect = getRect(caculatePoses(nextMatrix, width, height, n));\n    var dragDelta = [rect.left - nextRect.left, rect.top - nextRect.top];\n    datas.prevOrigin = dist;\n    var transformOrigin = [convertCSSSize(targetOrigin[0], width, originRelative), convertCSSSize(targetOrigin[1], height, originRelative)].join(\" \");\n    var params = fillParams(moveable, e, {\n      width: width,\n      height: height,\n      origin: origin,\n      dist: dist,\n      delta: delta,\n      transformOrigin: transformOrigin,\n      drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, dragDelta, !!isPinch, false))\n    });\n    triggerEvent(moveable, \"onDragOrigin\", params);\n    return params;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isDragOrigin) {\n      return false;\n    }\n\n    triggerEvent(moveable, \"onDragOriginEnd\", fillEndParams(moveable, e, {}));\n    return true;\n  },\n  dragGroupControlCondition: function (e) {\n    return this.dragControlCondition(e);\n  },\n  dragGroupControlStart: function (moveable, e) {\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    return true;\n  },\n  dragGroupControl: function (moveable, e) {\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    moveable.transformOrigin = params.transformOrigin;\n    return true;\n  },\n\n  /**\n  * @method Moveable.OriginDraggable#request\n  * @param {object} e - the OriginDraggable's request parameter\n  * @param {number} [e.x] - x position\n  * @param {number} [e.y] - y position\n  * @param {number} [e.deltaX] - x number to move\n  * @param {number} [e.deltaY] - y number to move\n  * @param {array} [e.deltaOrigin] - left, top number to move transform-origin\n  * @param {array} [e.origin] - transform-origin position\n  * @param {number} [e.isInstant] - Whether to execute the request instantly\n  * @return {Moveable.Requester} Moveable Requester\n  * @example\n   * // Instantly Request (requestStart - request - requestEnd)\n  * // Use Relative Value\n  * moveable.request(\"originDraggable\", { deltaX: 10, deltaY: 10 }, true);\n  * // Use Absolute Value\n  * moveable.request(\"originDraggable\", { x: 200, y: 100 }, true);\n  * // Use Transform Value\n  * moveable.request(\"originDraggable\", { deltaOrigin: [10, 0] }, true);\n  * moveable.request(\"originDraggable\", { origin: [100, 0] }, true);\n  * // requestStart\n  * const requester = moveable.request(\"originDraggable\");\n  *\n  * // request\n  * // Use Relative Value\n  * requester.request({ deltaX: 10, deltaY: 10 });\n  * requester.request({ deltaX: 10, deltaY: 10 });\n  * requester.request({ deltaX: 10, deltaY: 10 });\n  * // Use Absolute Value\n  * moveable.request(\"originDraggable\", { x: 200, y: 100 });\n  * moveable.request(\"originDraggable\", { x: 220, y: 100 });\n  * moveable.request(\"originDraggable\", { x: 240, y: 100 });\n  *\n  * // requestEnd\n  * requester.requestEnd();\n  */\n  request: function (moveable) {\n    var datas = {};\n    var rect = moveable.getRect();\n    var distX = 0;\n    var distY = 0;\n    var transformOrigin = rect.transformOrigin;\n    var distOrigin = [0, 0];\n    return {\n      isControl: true,\n      requestStart: function () {\n        return {\n          datas: datas\n        };\n      },\n      request: function (e) {\n        if (\"deltaOrigin\" in e) {\n          distOrigin[0] += e.deltaOrigin[0];\n          distOrigin[1] += e.deltaOrigin[1];\n        } else if (\"origin\" in e) {\n          distOrigin[0] = e.origin[0] - transformOrigin[0];\n          distOrigin[1] = e.origin[1] - transformOrigin[1];\n        } else {\n          if (\"x\" in e) {\n            distX = e.x - rect.left;\n          } else if (\"deltaX\" in e) {\n            distX += e.deltaX;\n          }\n\n          if (\"y\" in e) {\n            distY = e.y - rect.top;\n          } else if (\"deltaY\" in e) {\n            distY += e.deltaY;\n          }\n        }\n\n        return {\n          datas: datas,\n          distX: distX,\n          distY: distY,\n          distOrigin: distOrigin\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n/**\n * Whether to drag origin (default: false)\n * @name Moveable.OriginDraggable#originDraggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n * });\n * let translate = [0, 0];\n * moveable.on(\"dragOriginStart\", e => {\n *     e.dragStart && e.dragStart.set(translate);\n * }).on(\"dragOrigin\", e => {\n *     translate = e.drag.beforeTranslate;\n *     e.target.style.cssText\n *         = `transform-origin: ${e.transformOrigin};`\n *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n * }).on(\"dragOriginEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (default: true)\n * @name Moveable.OriginDraggable#originRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n *     originRelative: false,\n * });\n * moveable.originRelative = true;\n */\n\n/**\n* When drag start the origin, the `dragOriginStart` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginStart\n* @param {Moveable.OriginDraggable.OnDragOriginStart} - Parameters for the `dragOriginStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag the origin, the `dragOrigin` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOrigin\n* @param {Moveable.OriginDraggable.OnDragOrigin} - Parameters for the `dragOrigin` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag end the origin, the `dragOriginEnd` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginEnd\n* @param {Moveable.OriginDraggable.OnDragOriginEnd} - Parameters for the `dragOriginEnd` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\nfunction addBorderRadius(controlPoses, poses, lineIndex, distX, distY, width, height) {\n  var _a = splitRadiusPoses(controlPoses),\n      horizontals = _a.horizontals,\n      verticals = _a.verticals;\n\n  var horizontalsLength = horizontals.length;\n  var verticalsLength = verticals.length; // lineIndex\n  // 0 top\n  // 1 right\n  // 2 left\n  // 3 bottom\n  // 0 top - left\n  // 1 top - right\n  // 2 bottom - right\n  // 3 bottom - left\n  // 0 left - top\n  // 1 right - top\n  // 2 right - bottom\n  // 3 left - bottom\n\n  var horizontalIndex = -1;\n  var verticalIndex = -1;\n\n  if (lineIndex === 0) {\n    if (horizontalsLength === 0) {\n      horizontalIndex = 0;\n    } else if (horizontalsLength === 1) {\n      horizontalIndex = 1;\n    }\n  } else if (lineIndex === 3) {\n    if (horizontalsLength <= 2) {\n      horizontalIndex = 2;\n    } else if (horizontalsLength <= 3) {\n      horizontalIndex = 3;\n    }\n  }\n\n  if (lineIndex === 2) {\n    if (verticalsLength === 0) {\n      verticalIndex = 0;\n    } else if (verticalsLength < 4) {\n      verticalIndex = 3;\n    }\n  } else if (lineIndex === 1) {\n    if (verticalsLength <= 1) {\n      verticalIndex = 1;\n    } else if (verticalsLength <= 2) {\n      verticalIndex = 2;\n    }\n  }\n\n  addRadiusPos(controlPoses, poses, 0, horizontalIndex, verticalIndex, distX, distY, width, height);\n}\n\nfunction getBorderRadius(target, width, height, state) {\n  var borderRadius;\n\n  if (!state) {\n    var style = window.getComputedStyle(target);\n\n    if (!style) {\n      return null;\n    }\n\n    borderRadius = style.borderRadius || \"\";\n  } else {\n    borderRadius = state;\n  }\n\n  if (!borderRadius || !state && borderRadius === \"0px\") {\n    return null;\n  }\n\n  var values = splitSpace(borderRadius);\n  return getRadiusValues(values, width, height, 0, 0);\n}\n\nfunction triggerRoundEvent(moveable, e, dist, delta, controlPoses, nextPoses) {\n  var state = moveable.state;\n  var width = state.width,\n      height = state.height;\n\n  var _a = getRadiusStyles(nextPoses, controlPoses, moveable.props.roundRelative, width, height),\n      raws = _a.raws,\n      styles = _a.styles;\n\n  var _b = splitRadiusPoses(controlPoses, raws),\n      horizontals = _b.horizontals,\n      verticals = _b.verticals;\n\n  var borderRadius = styles.join(\" \");\n  state.borderRadiusState = borderRadius;\n  triggerEvent(moveable, \"onRound\", fillParams(moveable, e, {\n    horizontals: horizontals,\n    verticals: verticals,\n    borderRadius: borderRadius,\n    width: width,\n    height: height,\n    delta: delta,\n    dist: dist\n  }));\n}\n/**\n * @namespace Moveable.Roundable\n * @description Whether to show and drag or double click border-radius\n */\n\n\nvar Roundable = {\n  name: \"roundable\",\n  props: {\n    roundable: Boolean,\n    roundRelative: Boolean\n  },\n  events: {\n    onRoundStart: \"roundStart\",\n    onRound: \"round\",\n    onRoundEnd: \"roundEnd\"\n  },\n  css: [\".control.border-radius {\\n    background: #d66;\\n    cursor: pointer;\\n}\", \":host[data-able-roundable] .line.direction {\\n    cursor: pointer;\\n}\"],\n  render: function (moveable, React) {\n    var _a = moveable.state,\n        target = _a.target,\n        width = _a.width,\n        height = _a.height,\n        allMatrix = _a.allMatrix,\n        is3d = _a.is3d,\n        left = _a.left,\n        top = _a.top,\n        borderRadiusState = _a.borderRadiusState;\n\n    if (!target) {\n      return null;\n    }\n\n    var n = is3d ? 4 : 3;\n    var radiusValues = getBorderRadius(target, width, height, borderRadiusState);\n\n    if (!radiusValues) {\n      return null;\n    }\n\n    return radiusValues.map(function (v, i) {\n      var pos = minus(caculatePosition(allMatrix, v.pos, n), [left, top]);\n      return React.createElement(\"div\", {\n        key: \"borderRadiusControl\" + i,\n        className: prefix(\"control\", \"border-radius\"),\n        \"data-radius-index\": i,\n        style: {\n          transform: \"translate(\" + pos[0] + \"px, \" + pos[1] + \"px)\"\n        }\n      });\n    });\n  },\n  dragControlCondition: function (e) {\n    if (!e.inputEvent || e.isRequest) {\n      return false;\n    }\n\n    var className = e.inputEvent.target.className || \"\";\n    return className.indexOf(\"border-radius\") > -1 || className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1;\n  },\n  dragControlStart: function (moveable, e) {\n    var inputEvent = e.inputEvent,\n        datas = e.datas;\n    var inputTarget = inputEvent.target;\n    var className = inputTarget.className || \"\";\n    var isControl = className.indexOf(\"border-radius\") > -1;\n    var isLine = className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1;\n    var controlIndex = isControl ? parseInt(inputTarget.getAttribute(\"data-radius-index\"), 10) : -1;\n    var lineIndex = isLine ? parseInt(inputTarget.getAttribute(\"data-line-index\"), 10) : -1;\n\n    if (!isControl && !isLine) {\n      return false;\n    }\n\n    var result = triggerEvent(moveable, \"onRoundStart\", fillParams(moveable, e, {}));\n\n    if (result === false) {\n      return false;\n    }\n\n    datas.lineIndex = lineIndex;\n    datas.controlIndex = controlIndex;\n    datas.isControl = isControl;\n    datas.isLine = isLine;\n    setDragStart(moveable, e);\n    var roundRelative = moveable.props.roundRelative;\n    var state = moveable.state;\n    var target = state.target,\n        width = state.width,\n        height = state.height;\n    datas.isRound = true;\n    datas.prevDist = [0, 0];\n    var controlPoses = getBorderRadius(target, width, height) || [];\n    datas.controlPoses = controlPoses;\n    state.borderRadiusState = getRadiusStyles(controlPoses.map(function (pos) {\n      return pos.pos;\n    }), controlPoses, roundRelative, width, height).styles.join(\" \");\n    return true;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isRound || !datas.isControl || !datas.controlPoses.length) {\n      return false;\n    }\n\n    var index = datas.controlIndex;\n    var controlPoses = datas.controlPoses;\n\n    var _a = getDragDist(e),\n        distX = _a[0],\n        distY = _a[1];\n\n    var dist = [distX, distY];\n    var delta = minus(dist, datas.prevDist);\n    var dists = moveControlPos(controlPoses, index, dist);\n    var nextPoses = controlPoses.map(function (pos, i) {\n      return plus(pos.pos, dists[i]);\n    });\n    datas.prevDist = [distX, distY];\n    triggerRoundEvent(moveable, e, dist, delta, controlPoses, nextPoses);\n    return true;\n  },\n  dragControlEnd: function (moveable, e) {\n    var state = moveable.state;\n    state.borderRadiusState = \"\";\n    var datas = e.datas,\n        isDouble = e.isDouble;\n\n    if (!datas.isRound) {\n      return false;\n    }\n\n    var width = state.width,\n        height = state.height;\n    var isControl = datas.isControl,\n        controlIndex = datas.controlIndex,\n        isLine = datas.isLine,\n        lineIndex = datas.lineIndex;\n    var controlPoses = datas.controlPoses;\n    var poses = controlPoses.map(function (pos) {\n      return pos.pos;\n    });\n    var length = poses.length;\n\n    if (isDouble) {\n      if (isControl) {\n        removeRadiusPos(controlPoses, poses, controlIndex, 0);\n      } else if (isLine) {\n        var _a = caculatePointerDist(moveable, e),\n            distX = _a[0],\n            distY = _a[1];\n\n        addBorderRadius(controlPoses, poses, lineIndex, distX, distY, width, height);\n      }\n\n      if (length !== controlPoses.length) {\n        triggerRoundEvent(moveable, e, [0, 0], [0, 0], controlPoses, poses);\n      }\n\n      triggerEvent(moveable, \"onRoundEnd\", fillEndParams(moveable, e, {}));\n    }\n\n    state.borderRadiusState = \"\";\n    return true;\n  },\n  unset: function (moveable) {\n    moveable.state.borderRadiusState = \"\";\n  }\n};\n/**\n * Whether to show and drag or double click border-radius, (default: false)\n * @name Moveable.Roundable#roundable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px\n * @name Moveable.Roundable#roundRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag start the clip area or controls, the `roundStart` event is called.\n * @memberof Moveable.Roundable\n * @event roundStart\n * @param {Moveable.Roundable.OnRoundStart} - Parameters for the `roundStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag or double click the border area or controls, the `round` event is called.\n * @memberof Moveable.Roundable\n * @event round\n * @param {Moveable.Roundable.OnRound} - Parameters for the `round` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag end the border area or controls, the `roundEnd` event is called.\n * @memberof Moveable.Roundable\n * @event roundEnd\n * @param {Moveable.Roundable.onRoundEnd} - Parameters for the `roundEnd` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\nvar BeforeRenderable = {\n  isPinch: true,\n  name: \"beforeRenderable\",\n  props: {},\n  events: {\n    onBeforeRenderStart: \"beforeRenderStart\",\n    onBeforeRender: \"beforeRender\",\n    onBeforeRenderEnd: \"beforeRenderEnd\",\n    onBeforeRenderGroupStart: \"beforeRenderGroupStart\",\n    onBeforeRenderGroup: \"beforeRenderGroup\",\n    onBeforeRenderGroupEnd: \"beforeRenderGroupEnd\"\n  },\n  setTransform: function (moveable, e) {\n    var _a = moveable.state,\n        is3d = _a.is3d,\n        targetMatrix = _a.targetMatrix;\n    var cssMatrix = is3d ? \"matrix3d(\" + targetMatrix.join(\",\") + \")\" : \"matrix(\" + convertMatrixtoCSS(targetMatrix, true) + \")\";\n    e.datas.startTransforms = [cssMatrix];\n  },\n  resetTransform: function (moveable, e) {\n    e.datas.nextTransforms = e.datas.startTransforms;\n    e.datas.nextTransformAppendedIndexes = [];\n  },\n  fillDragStartParams: function (moveable, e) {\n    return fillParams(moveable, e, {\n      setTransform: function (transform) {\n        e.datas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n      },\n      isPinch: !!e.isPinch\n    });\n  },\n  fillDragParams: function (moveable, e) {\n    return fillParams(moveable, e, {\n      isPinch: !!e.isPinch\n    });\n  },\n  dragStart: function (moveable, e) {\n    this.setTransform(moveable, e);\n    triggerEvent(moveable, \"onBeforeRenderStart\", this.fillDragStartParams(moveable, e));\n  },\n  drag: function (moveable, e) {\n    this.resetTransform(moveable, e);\n    triggerEvent(moveable, \"onBeforeRender\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch\n    }));\n  },\n  dragEnd: function (moveable, e) {\n    triggerEvent(moveable, \"onBeforeRenderEnd\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag\n    }));\n  },\n  dragGroupStart: function (moveable, e) {\n    var _this = this;\n\n    this.dragStart(moveable, e);\n    var events = fillChildEvents(moveable, \"beforeRenderable\", e);\n    var moveables = moveable.moveables;\n    var params = events.map(function (childEvent, i) {\n      var childMoveable = moveables[i];\n\n      _this.setTransform(childMoveable, childEvent);\n\n      return _this.fillDragStartParams(childMoveable, childEvent);\n    });\n    triggerEvent(moveable, \"onBeforeRenderGroupStart\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      targets: moveable.props.targets,\n      setTransform: function () {},\n      events: params\n    }));\n  },\n  dragGroup: function (moveable, e) {\n    var _this = this;\n\n    this.drag(moveable, e);\n    var events = fillChildEvents(moveable, \"beforeRenderable\", e);\n    var moveables = moveable.moveables;\n    var params = events.map(function (childEvent, i) {\n      var childMoveable = moveables[i];\n\n      _this.resetTransform(childMoveable, childEvent);\n\n      return _this.fillDragParams(childMoveable, childEvent);\n    });\n    triggerEvent(moveable, \"onBeforeRenderGroup\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      targets: moveable.props.targets,\n      events: params\n    }));\n  },\n  dragGroupEnd: function (moveable, e) {\n    this.dragEnd(moveable, e);\n    triggerEvent(moveable, \"onBeforeRenderGroupEnd\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag,\n      targets: moveable.props.targets\n    }));\n  },\n  dragControlStart: function (moveable, e) {\n    return this.dragStart(moveable, e);\n  },\n  dragControl: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragControlEnd: function (moveable, e) {\n    return this.dragEnd(moveable, e);\n  },\n  dragGroupControlStart: function (moveable, e) {\n    return this.dragGroupStart(moveable, e);\n  },\n  dragGroupControl: function (moveable, e) {\n    return this.dragGroup(moveable, e);\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    return this.dragGroupEnd(moveable, e);\n  }\n};\nvar Renderable = {\n  name: \"Renderable\",\n  props: {},\n  events: {\n    onRenderStart: \"renderStart\",\n    onRender: \"render\",\n    onRenderEnd: \"renderEnd\",\n    onRenderGroupStart: \"renderGroupStart\",\n    onRenderGroup: \"renderGroup\",\n    onRenderGroupEnd: \"renderGroupEnd\"\n  },\n  dragStart: function (moveable, e) {\n    triggerEvent(moveable, \"onRenderStart\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch\n    }));\n  },\n  drag: function (moveable, e) {\n    triggerEvent(moveable, \"onRender\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch\n    }));\n  },\n  dragEnd: function (moveable, e) {\n    triggerEvent(moveable, \"onRenderEnd\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag\n    }));\n  },\n  dragGroupStart: function (moveable, e) {\n    triggerEvent(moveable, \"onRenderGroupStart\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroup: function (moveable, e) {\n    triggerEvent(moveable, \"onRenderGroup\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupEnd: function (moveable, e) {\n    triggerEvent(moveable, \"onRenderGroupEnd\", fillParams(moveable, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag,\n      targets: moveable.props.targets\n    }));\n  },\n  dragControlStart: function (moveable, e) {\n    return this.dragStart(moveable, e);\n  },\n  dragControl: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragControlEnd: function (moveable, e) {\n    return this.dragEnd(moveable, e);\n  },\n  dragGroupControlStart: function (moveable, e) {\n    return this.dragGroupStart(moveable, e);\n  },\n  dragGroupControl: function (moveable, e) {\n    return this.dragGroup(moveable, e);\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    return this.dragGroupEnd(moveable, e);\n  }\n};\n\nfunction triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e, requestInstant) {\n  var isStart = eventType === \"Start\";\n  var target = moveable.state.target;\n  var isRequest = e.isRequest;\n\n  if (!target || isStart && eventAffix.indexOf(\"Control\") > -1 && !isRequest && moveable.areaElement === e.inputEvent.target) {\n    return false;\n  }\n\n  var eventName = \"\" + eventOperation + eventAffix + eventType;\n  var conditionName = \"\" + eventOperation + eventAffix + \"Condition\";\n  var isEnd = eventType === \"End\";\n  var isAfter = eventType.indexOf(\"After\") > -1;\n  var isFirstStart = isStart && (!moveable.targetGesto || !moveable.controlGesto || !moveable.targetGesto.isFlag() || !moveable.controlGesto.isFlag());\n\n  if (isFirstStart) {\n    moveable.updateRect(eventType, true, false);\n  }\n\n  if (eventType === \"\" && !isAfter) {\n    convertDragDist(moveable.state, e);\n  }\n\n  var isGroup = eventAffix.indexOf(\"Group\") > -1;\n\n  var ables = __spreadArrays([BeforeRenderable], moveable[ableType].slice(), [Renderable]);\n\n  if (isRequest) {\n    var requestAble_1 = e.requestAble;\n\n    if (!ables.some(function (able) {\n      return able.name === requestAble_1;\n    })) {\n      ables.push.apply(ables, moveable.props.ables.filter(function (able) {\n        return able.name === requestAble_1;\n      }));\n    }\n  }\n\n  if (!ables.length) {\n    return false;\n  }\n\n  var events = ables.filter(function (able) {\n    return able[eventName];\n  });\n  var datas = e.datas;\n\n  if (isFirstStart) {\n    events.forEach(function (able) {\n      able.unset && able.unset(moveable);\n    });\n  }\n\n  var inputEvent = e.inputEvent;\n  var inputTarget;\n\n  if (isEnd && inputEvent) {\n    inputTarget = document.elementFromPoint(e.clientX, e.clientY) || inputEvent.target;\n  }\n\n  var results = events.filter(function (able) {\n    var hasCondition = isStart && able[conditionName];\n    var ableName = able.name;\n    var nextDatas = datas[ableName] || (datas[ableName] = {});\n\n    if (!hasCondition || able[conditionName](e, moveable)) {\n      return able[eventName](moveable, __assign(__assign({}, e), {\n        datas: nextDatas,\n        originalDatas: datas,\n        inputTarget: inputTarget\n      }));\n    }\n\n    return false;\n  });\n  var isUpdate = results.length;\n  var isForceEnd = isStart && events.length && !isUpdate;\n\n  if (isEnd || isForceEnd) {\n    moveable.state.gesto = null;\n\n    if (moveable.moveables) {\n      moveable.moveables.forEach(function (childMoveable) {\n        childMoveable.state.gesto = null;\n      });\n    }\n  }\n\n  if (isFirstStart && isForceEnd) {\n    events.forEach(function (able) {\n      able.unset && able.unset(moveable);\n    });\n  }\n\n  if (moveable.isUnmounted || isForceEnd) {\n    return false;\n  }\n\n  if (!isStart && isUpdate && !requestInstant || isEnd) {\n    if (results.some(function (able) {\n      return able.updateRect;\n    }) && !isGroup) {\n      moveable.updateRect(eventType, false, false);\n    } else {\n      moveable.updateRect(eventType, true, false);\n    }\n\n    moveable.forceUpdate();\n  }\n\n  if (!isStart && !isEnd && !isAfter && isUpdate && !requestInstant) {\n    triggerAble(moveable, ableType, eventOperation, eventAffix, eventType + \"After\", e);\n  }\n\n  return true;\n}\n\nfunction getTargetAbleGesto(moveable, moveableTarget, eventAffix) {\n  var controlBox = moveable.controlBox.getElement();\n  var targets = [];\n  targets.push(controlBox);\n\n  if (!moveable.props.dragArea) {\n    targets.push(moveableTarget);\n  }\n\n  var startFunc = function (e) {\n    var eventTarget = e.inputEvent.target;\n    var areaElement = moveable.areaElement;\n    return eventTarget === areaElement || !moveable.isMoveableElement(eventTarget) || eventTarget.className.indexOf(\"moveable-area\") > -1 || eventTarget.className.indexOf(\"moveable-padding\") > -1;\n  };\n\n  return getAbleGesto(moveable, targets, \"targetAbles\", eventAffix, {\n    dragStart: startFunc,\n    pinchStart: startFunc\n  });\n}\n\nfunction getAbleGesto(moveable, target, ableType, eventAffix, conditionFunctions) {\n  if (conditionFunctions === void 0) {\n    conditionFunctions = {};\n  }\n\n  var _a = moveable.props,\n      pinchOutside = _a.pinchOutside,\n      pinchThreshold = _a.pinchThreshold;\n  var options = {\n    container: window,\n    pinchThreshold: pinchThreshold,\n    pinchOutside: pinchOutside\n  };\n  var gesto = new Gesto(target, options);\n  [\"drag\", \"pinch\"].forEach(function (eventOperation) {\n    [\"Start\", \"\", \"End\"].forEach(function (eventType) {\n      gesto.on(\"\" + eventOperation + eventType, function (e) {\n        var eventName = e.eventType;\n\n        if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\n          e.stop();\n          return;\n        }\n\n        var result = triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);\n\n        if (!result) {\n          e.stop();\n        }\n      });\n    });\n  });\n  return gesto;\n}\n\nvar MoveableManager = /*#__PURE__*/function (_super) {\n  __extends(MoveableManager, _super);\n\n  function MoveableManager() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = __assign({\n      container: null,\n      target: null,\n      gesto: null,\n      renderPoses: [[0, 0], [0, 0], [0, 0], [0, 0]]\n    }, getTargetInfo(null));\n    _this.targetAbles = [];\n    _this.controlAbles = [];\n    _this.rotation = 0;\n    _this.scale = [1, 1];\n    _this.isUnmounted = false;\n    return _this;\n  }\n\n  var __proto = MoveableManager.prototype;\n\n  __proto.render = function () {\n    var props = this.props;\n    var state = this.state;\n    var edge = props.edge,\n        parentPosition = props.parentPosition,\n        className = props.className,\n        propsTarget = props.target,\n        zoom = props.zoom,\n        cspNonce = props.cspNonce,\n        translateZ = props.translateZ,\n        ControlBoxElement = props.cssStyled;\n    this.checkUpdate();\n    this.updateRenderPoses();\n\n    var _a = parentPosition || {\n      left: 0,\n      top: 0\n    },\n        parentLeft = _a.left,\n        parentTop = _a.top;\n\n    var left = state.left,\n        top = state.top,\n        stateTarget = state.target,\n        direction = state.direction,\n        renderPoses = state.renderPoses;\n    var groupTargets = props.targets;\n    var isDisplay = (groupTargets && groupTargets.length || propsTarget) && stateTarget;\n    var isDragging = this.isDragging();\n    var ableAttributes = {};\n    var Renderer = {\n      createElement: createElement\n    };\n    this.getEnabledAbles().forEach(function (able) {\n      ableAttributes[\"data-able-\" + able.name.toLowerCase()] = true;\n    });\n    return createElement(ControlBoxElement, __assign({\n      cspNonce: cspNonce,\n      ref: ref(this, \"controlBox\"),\n      className: prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\", isDragging ? \"dragging\" : \"\") + \" \" + className\n    }, ableAttributes, {\n      style: {\n        \"position\": \"absolute\",\n        \"display\": isDisplay ? \"block\" : \"none\",\n        \"transform\": \"translate(\" + (left - parentLeft) + \"px, \" + (top - parentTop) + \"px) translateZ(\" + translateZ + \"px)\",\n        \"--zoom\": zoom,\n        \"--zoompx\": zoom + \"px\"\n      }\n    }), this.renderAbles(), renderLine(Renderer, edge ? \"n\" : \"\", renderPoses[0], renderPoses[1], 0), renderLine(Renderer, edge ? \"e\" : \"\", renderPoses[1], renderPoses[3], 1), renderLine(Renderer, edge ? \"w\" : \"\", renderPoses[0], renderPoses[2], 2), renderLine(Renderer, edge ? \"s\" : \"\", renderPoses[2], renderPoses[3], 3));\n  };\n\n  __proto.componentDidMount = function () {\n    this.controlBox.getElement();\n    var props = this.props;\n    var parentMoveable = props.parentMoveable,\n        container = props.container;\n    this.updateEvent(props);\n\n    if (!container && !parentMoveable) {\n      this.updateRect(\"End\", false, true);\n    }\n\n    this.updateCheckInput();\n  };\n\n  __proto.componentDidUpdate = function (prevProps) {\n    this.updateEvent(prevProps);\n    this.updateCheckInput();\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.isUnmounted = true;\n    unset(this, \"targetGesto\");\n    unset(this, \"controlGesto\");\n  };\n\n  __proto.getContainer = function () {\n    var _a = this.props,\n        parentMoveable = _a.parentMoveable,\n        container = _a.container;\n    return container || parentMoveable && parentMoveable.getContainer() || this.controlBox.getElement().parentElement;\n  };\n  /**\n   * Check if the target is an element included in the moveable.\n   * @method Moveable#isMoveableElement\n   * @param - the target\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"click\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *         moveable.target = e.target;\n   *     }\n   * });\n   */\n\n\n  __proto.isMoveableElement = function (target) {\n    return target && (target.getAttribute(\"class\") || \"\").indexOf(PREFIX) > -1;\n  };\n  /**\n   * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n   * @method Moveable#dragStart\n   * @param - external `MouseEvent`or `TouchEvent`\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *          moveable.dragStart(e);\n   *     }\n   * });\n   */\n\n\n  __proto.dragStart = function (e) {\n    if (this.targetGesto) {\n      this.targetGesto.triggerDragStart(e);\n    }\n\n    return this;\n  };\n  /**\n   * Hit test an element or rect on a moveable target.\n   * @method Moveable#hitTest\n   * @param - element or rect to test\n   * @return - Get hit test rate (rate > 0 is hitted)\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (moveable.hitTest(e.target) > 0) {\n   *          console.log(\"hiited\");\n   *     }\n   * });\n   */\n\n\n  __proto.hitTest = function (el) {\n    var rect;\n\n    if (el instanceof Element) {\n      var clientRect = el.getBoundingClientRect();\n      rect = {\n        left: clientRect.left,\n        top: clientRect.top,\n        width: clientRect.width,\n        height: clientRect.height\n      };\n    } else {\n      rect = __assign({\n        width: 0,\n        height: 0\n      }, el);\n    }\n\n    var _a = this.state.targetClientRect,\n        rectLeft = _a.left,\n        rectTop = _a.top,\n        rectWidth = _a.width,\n        rectHeight = _a.height;\n    var left = rect.left,\n        top = rect.top,\n        width = rect.width,\n        height = rect.height;\n    var right = left + width;\n    var bottom = top + height;\n    var rectRight = rectLeft + rectWidth;\n    var rectBottom = rectTop + rectHeight;\n    var testLeft = Math.max(rectLeft, left);\n    var testRight = Math.min(rectRight, right);\n    var testTop = Math.max(rectTop, top);\n    var testBottom = Math.min(rectBottom, bottom);\n\n    if (testRight < testLeft || testBottom < testTop) {\n      return 0;\n    }\n\n    var rectSize = (Math.min(rectRight, right) - Math.max(left, rectLeft)) * (Math.min(rectBottom, bottom) - Math.max(rectTop, top));\n    return Math.min(100, (testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n  };\n  /**\n   * Whether the coordinates are inside Moveable\n   * @method Moveable#isInside\n   * @param - x coordinate\n   * @param - y coordinate\n   * @return - True if the coordinate is in moveable or false\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (moveable.isInside(e.clientX, e.clientY)) {\n   *          console.log(\"inside\");\n   *     }\n   * });\n   */\n\n\n  __proto.isInside = function (clientX, clientY) {\n    var _a = this.state,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        target = _a.target,\n        targetClientRect = _a.targetClientRect;\n\n    if (!target) {\n      return false;\n    }\n\n    var left = targetClientRect.left,\n        top = targetClientRect.top;\n    var pos = [clientX - left, clientY - top];\n    return isInside(pos, pos1, pos2, pos3, pos4);\n  };\n  /**\n   * If the width, height, left, and top of all elements change, update the shape of the moveable.\n   * @method Moveable#updateRect\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"resize\", e => {\n   *     moveable.updateRect();\n   * });\n   */\n\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    var props = this.props;\n    var parentMoveable = props.parentMoveable;\n    var state = this.state;\n    var target = state.target || this.props.target;\n    var container = this.getContainer();\n    var rootContainer = parentMoveable ? parentMoveable.props.rootContainer : props.rootContainer;\n    this.updateState(getTargetInfo(this.controlBox && this.controlBox.getElement(), target, container, container, rootContainer || container, isTarget ? state : undefined), parentMoveable ? false : isSetState);\n  };\n\n  __proto.updateEvent = function (prevProps) {\n    var controlBoxElement = this.controlBox.getElement();\n    var hasTargetAble = this.targetAbles.length;\n    var hasControlAble = this.controlAbles.length;\n    var props = this.props;\n    var target = props.dragTarget || props.target;\n    var prevTarget = prevProps.dragTarget || prevProps.target;\n    var dragArea = props.dragArea;\n    var prevDragArea = prevProps.dragArea;\n    var isTargetChanged = !dragArea && prevTarget !== target;\n    var isUnset = !hasTargetAble && this.targetGesto || isTargetChanged || prevDragArea !== dragArea;\n\n    if (isUnset) {\n      unset(this, \"targetGesto\");\n      this.updateState({\n        gesto: null\n      });\n    }\n\n    if (!hasControlAble) {\n      unset(this, \"controlGesto\");\n    }\n\n    if (target && hasTargetAble && !this.targetGesto) {\n      this.targetGesto = getTargetAbleGesto(this, target, \"\");\n    }\n\n    if (!this.controlGesto && hasControlAble) {\n      this.controlGesto = getAbleGesto(this, controlBoxElement, \"controlAbles\", \"Control\");\n    }\n\n    if (isUnset) {\n      this.unsetAbles();\n    }\n  };\n  /**\n   * Check if the moveable state is being dragged.\n   * @method Moveable#isDragging\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // false\n   * console.log(moveable.isDragging());\n   *\n   * moveable.on(\"drag\", () => {\n   *   // true\n   *   console.log(moveable.isDragging());\n   * });\n   */\n\n\n  __proto.isDragging = function () {\n    return (this.targetGesto ? this.targetGesto.isFlag() : false) || (this.controlGesto ? this.controlGesto.isFlag() : false);\n  };\n  /**\n   * If the width, height, left, and top of the only target change, update the shape of the moveable.\n   * @method Moveable#updateTarget\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.updateTarget();\n   */\n\n\n  __proto.updateTarget = function (type) {\n    this.updateRect(type, true);\n  };\n  /**\n   * You can get the vertex information, position and offset size information of the target based on the container.\n   * @method Moveable#getRect\n   * @return - The Rect Info\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * const rectInfo = moveable.getRect();\n   */\n\n\n  __proto.getRect = function () {\n    var state = this.state;\n    var poses = getAbsolutePosesByState(this.state);\n    var pos1 = poses[0],\n        pos2 = poses[1],\n        pos3 = poses[2],\n        pos4 = poses[3];\n    var rect = getRect(poses);\n    var offsetWidth = state.width,\n        offsetHeight = state.height;\n    var width = rect.width,\n        height = rect.height,\n        left = rect.left,\n        top = rect.top;\n    var statePos = [state.left, state.top];\n    var origin = plus(statePos, state.origin);\n    var beforeOrigin = plus(statePos, state.beforeOrigin);\n    var transformOrigin = state.transformOrigin;\n    return {\n      width: width,\n      height: height,\n      left: left,\n      top: top,\n      pos1: pos1,\n      pos2: pos2,\n      pos3: pos3,\n      pos4: pos4,\n      offsetWidth: offsetWidth,\n      offsetHeight: offsetHeight,\n      beforeOrigin: beforeOrigin,\n      origin: origin,\n      transformOrigin: transformOrigin,\n      rotation: this.getRotation()\n    };\n  };\n\n  __proto.getRotation = function () {\n    var _a = this.state,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        direction = _a.direction;\n    var deg = getRad(pos1, pos2) / Math.PI * 180;\n    deg = direction >= 0 ? deg : 180 - deg;\n    deg = deg >= 0 ? deg : 360 + deg;\n    return deg;\n  };\n  /**\n   * Request able through a method rather than an event.\n   * At the moment of execution, requestStart is executed,\n   * and then request and requestEnd can be executed through Requester.\n   * @method Moveable#request\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}\n   * @param - ableName\n   * @param - request to be able params.\n   * @param - If isInstant is true, request and requestEnd are executed immediately.\n   * @return - Able Requester. If there is no request in able, nothing will work.\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n   *\n   * // Start move\n   * const requester = moveable.request(\"draggable\");\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.requestEnd();\n   */\n\n\n  __proto.request = function (ableName, param, isInstant) {\n    if (param === void 0) {\n      param = {};\n    }\n\n    var _a = this.props,\n        ables = _a.ables,\n        groupable = _a.groupable;\n    var requsetAble = ables.filter(function (able) {\n      return able.name === ableName;\n    })[0];\n\n    if (this.isDragging() || !requsetAble || !requsetAble.request) {\n      return {\n        request: function () {\n          return this;\n        },\n        requestEnd: function () {\n          return this;\n        }\n      };\n    }\n\n    var self = this;\n    var ableRequester = requsetAble.request(this);\n    var requestInstant = isInstant || param.isInstant;\n    var ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\n    var eventAffix = \"\" + (groupable ? \"Group\" : \"\") + (ableRequester.isControl ? \"Control\" : \"\");\n    var requester = {\n      request: function (ableParam) {\n        triggerAble(self, ableType, \"drag\", eventAffix, \"\", __assign(__assign({}, ableRequester.request(ableParam)), {\n          requestAble: ableName,\n          isRequest: true\n        }), requestInstant);\n        return this;\n      },\n      requestEnd: function () {\n        triggerAble(self, ableType, \"drag\", eventAffix, \"End\", __assign(__assign({}, ableRequester.requestEnd()), {\n          requestAble: ableName,\n          isRequest: true\n        }), requestInstant);\n        return this;\n      }\n    };\n    triggerAble(self, ableType, \"drag\", eventAffix, \"Start\", __assign(__assign({}, ableRequester.requestStart(param)), {\n      requestAble: ableName,\n      isRequest: true\n    }), requestInstant);\n    return requestInstant ? requester.request(param).requestEnd() : requester;\n  };\n  /**\n   * Remove the Moveable object and the events.\n   * @method Moveable#destroy\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.destroy();\n   */\n\n\n  __proto.destroy = function () {\n    this.componentWillUnmount();\n  };\n\n  __proto.updateRenderPoses = function () {\n    var state = this.state;\n    var props = this.props;\n    var beforeOrigin = state.beforeOrigin,\n        transformOrigin = state.transformOrigin,\n        allMatrix = state.allMatrix,\n        is3d = state.is3d,\n        pos1 = state.pos1,\n        pos2 = state.pos2,\n        pos3 = state.pos3,\n        pos4 = state.pos4,\n        stateLeft = state.left,\n        stateTop = state.top;\n\n    var _a = props.padding || {},\n        _b = _a.left,\n        left = _b === void 0 ? 0 : _b,\n        _c = _a.top,\n        top = _c === void 0 ? 0 : _c,\n        _d = _a.bottom,\n        bottom = _d === void 0 ? 0 : _d,\n        _e = _a.right,\n        right = _e === void 0 ? 0 : _e;\n\n    var n = is3d ? 4 : 3;\n    var absoluteOrigin = props.groupable ? beforeOrigin : plus(beforeOrigin, [stateLeft, stateTop]);\n    state.renderPoses = [plus(pos1, caculatePadding(allMatrix, [-left, -top], transformOrigin, absoluteOrigin, n)), plus(pos2, caculatePadding(allMatrix, [right, -top], transformOrigin, absoluteOrigin, n)), plus(pos3, caculatePadding(allMatrix, [-left, bottom], transformOrigin, absoluteOrigin, n)), plus(pos4, caculatePadding(allMatrix, [right, bottom], transformOrigin, absoluteOrigin, n))];\n  };\n\n  __proto.checkUpdate = function () {\n    var _a = this.props,\n        target = _a.target,\n        container = _a.container,\n        parentMoveable = _a.parentMoveable;\n    var _b = this.state,\n        stateTarget = _b.target,\n        stateContainer = _b.container;\n\n    if (!stateTarget && !target) {\n      return;\n    }\n\n    this.updateAbles();\n    var isChanged = !equals(stateTarget, target) || !equals(stateContainer, container);\n\n    if (!isChanged) {\n      return;\n    }\n\n    this.updateState({\n      target: target,\n      container: container\n    });\n\n    if (!parentMoveable && (container || this.controlBox)) {\n      this.updateRect(\"End\", false, false);\n    }\n  };\n\n  __proto.triggerEvent = function (name, e) {\n    var callback = this.props[name];\n    return callback && callback(e);\n  };\n\n  __proto.unsetAbles = function () {\n    var _this = this;\n\n    if (this.targetAbles.filter(function (able) {\n      if (able.unset) {\n        able.unset(_this);\n        return true;\n      }\n\n      return false;\n    }).length) {\n      this.forceUpdate();\n    }\n  };\n\n  __proto.updateAbles = function (ables, eventAffix) {\n    if (ables === void 0) {\n      ables = this.props.ables;\n    }\n\n    if (eventAffix === void 0) {\n      eventAffix = \"\";\n    }\n\n    var props = this.props;\n    var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n    var enabledAbles = ables.filter(function (able) {\n      return able && (able.always || props[able.name]);\n    });\n    var dragStart = \"drag\" + eventAffix + \"Start\";\n    var pinchStart = \"pinch\" + eventAffix + \"Start\";\n    var dragControlStart = \"drag\" + eventAffix + \"ControlStart\";\n    var targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\n    var controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\n    this.targetAbles = targetAbles;\n    this.controlAbles = controlAbles;\n  };\n\n  __proto.updateState = function (nextState, isSetState) {\n    if (isSetState) {\n      this.setState(nextState);\n    } else {\n      var state = this.state;\n\n      for (var name in nextState) {\n        state[name] = nextState[name];\n      }\n    }\n  };\n\n  __proto.getEnabledAbles = function () {\n    var props = this.props;\n    var ables = props.ables;\n    return ables.filter(function (able) {\n      return able && props[able.name];\n    });\n  };\n\n  __proto.renderAbles = function () {\n    var _this = this;\n\n    var props = this.props;\n    var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n    var Renderer = {\n      createElement: createElement\n    };\n    return groupByMap(flat(filterAbles(this.getEnabledAbles(), [\"render\"], triggerAblesSimultaneously).map(function (_a) {\n      var render = _a.render;\n      return render(_this, Renderer) || [];\n    })).filter(function (el) {\n      return el;\n    }), function (_a) {\n      var key = _a.key;\n      return key;\n    }).map(function (group) {\n      return group[0];\n    });\n  };\n\n  __proto.updateCheckInput = function () {\n    this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);\n  };\n\n  MoveableManager.defaultProps = {\n    target: null,\n    dragTarget: null,\n    container: null,\n    rootContainer: null,\n    origin: true,\n    edge: false,\n    parentMoveable: null,\n    parentPosition: null,\n    ables: [],\n    pinchThreshold: 20,\n    dragArea: false,\n    passDragArea: false,\n    transformOrigin: \"\",\n    className: \"\",\n    zoom: 1,\n    triggerAblesSimultaneously: false,\n    padding: {},\n    pinchOutside: true,\n    checkInput: false,\n    groupable: false,\n    cspNonce: \"\",\n    translateZ: 50,\n    cssStyled: null\n  };\n  return MoveableManager;\n}(PureComponent);\n/**\n * The target to indicate Moveable Control Box.\n * @name Moveable#target\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n */\n\n/**\n * Zooms in the elements of a moveable. (default: 1)\n * @name Moveable#zoom\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.zoom = 2;\n */\n\n/**\n * Resize, Scale Events at edges\n * @name Moveable#edge\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.edge = true;\n */\n\n/**\n * You can specify the className of the moveable controlbox. (default: \"\")\n * @name Moveable#className\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   className: \"\",\n * });\n *\n * moveable.className = \"moveable1\";\n */\n\n/**\n * The target(s) to drag Moveable target(s) (default: target)\n * @name Moveable#dragTarget\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n * moveable.dragTarget = document.querySelector(\".dragTarget\");\n */\n\n/**\n * `renderStart` event occurs at the first start of all events.\n * @memberof Moveable\n * @event renderStart\n * @param {Moveable.OnRenderStart} - Parameters for the `renderStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderStart\", ({ target }) => {\n *     console.log(\"onRenderStart\", target);\n * });\n */\n\n/**\n * `render` event occurs before the target is drawn on the screen.\n * @memberof Moveable\n * @event render\n * @param {Moveable.OnRender} - Parameters for the `render` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"render\", ({ target }) => {\n *     console.log(\"onRender\", target);\n * });\n */\n\n/**\n * `renderEnd` event occurs at the end of all events.\n * @memberof Moveable\n * @event renderEnd\n * @param {Moveable.OnRenderEnd} - Parameters for the `renderEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderEnd\", ({ target }) => {\n *     console.log(\"onRenderEnd\", target);\n * });\n */\n\n/**\n * `renderGroupStart` event occurs at the first start of all events in group.\n * @memberof Moveable\n * @event renderGroupStart\n * @param {Moveable.OnRenderGroupStart} - Parameters for the `renderGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupStart\", ({ targets }) => {\n *     console.log(\"onRenderGroupStart\", targets);\n * });\n */\n\n/**\n * `renderGroup` event occurs before the target is drawn on the screen in group.\n * @memberof Moveable\n * @event renderGroup\n * @param {Moveable.OnRenderGroup} - Parameters for the `renderGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroup\", ({ targets }) => {\n *     console.log(\"onRenderGroup\", targets);\n * });\n */\n\n/**\n * `renderGroupEnd` event occurs at the end of all events in group.\n * @memberof Moveable\n * @event renderGroupEnd\n * @param {Moveable.OnRenderGroupEnd} - Parameters for the `renderGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupEnd\", ({ targets }) => {\n *     console.log(\"onRenderGroupEnd\", targets);\n * });\n */\n\n\nvar Groupable = {\n  name: \"groupable\",\n  props: {\n    defaultGroupRotate: Number,\n    defaultGroupOrigin: String,\n    groupable: Boolean\n  },\n  events: {},\n  render: function (moveable, React) {\n    var targets = moveable.props.targets || [];\n    moveable.moveables = [];\n    var _a = moveable.state,\n        left = _a.left,\n        top = _a.top;\n    var position = {\n      left: left,\n      top: top\n    };\n    return targets.map(function (target, i) {\n      return React.createElement(MoveableManager, {\n        key: \"moveable\" + i,\n        ref: refs(moveable, \"moveables\", i),\n        target: target,\n        origin: false,\n        cssStyled: moveable.props.cssStyled,\n        parentMoveable: moveable,\n        parentPosition: position\n      });\n    });\n  }\n};\nvar Clickable = {\n  name: \"clickable\",\n  props: {},\n  events: {\n    onClick: \"click\",\n    onClickGroup: \"clickGroup\"\n  },\n  always: true,\n  dragStart: function () {},\n  dragGroupStart: function (moveable, e) {\n    e.datas.inputTarget = e.inputEvent && e.inputEvent.target;\n  },\n  dragEnd: function (moveable, e) {\n    var target = moveable.state.target;\n    var inputEvent = e.inputEvent;\n    var inputTarget = e.inputTarget;\n\n    if (!inputEvent || !inputTarget || e.isDrag || moveable.isMoveableElement(inputTarget) // External event duplicate target or dragAreaElement\n    ) {\n        return;\n      }\n\n    var containsTarget = target.contains(inputTarget);\n    triggerEvent(moveable, \"onClick\", fillParams(moveable, e, {\n      isDouble: e.isDouble,\n      inputTarget: inputTarget,\n      isTarget: target === inputTarget,\n      containsTarget: containsTarget\n    }));\n  },\n  dragGroupEnd: function (moveable, e) {\n    var inputEvent = e.inputEvent;\n    var inputTarget = e.inputTarget;\n\n    if (!inputEvent || !inputTarget || e.isDrag || moveable.isMoveableElement(inputTarget) // External event duplicate target or dragAreaElement\n    || e.datas.inputTarget === inputTarget) {\n      return;\n    }\n\n    var targets = moveable.props.targets;\n    var targetIndex = targets.indexOf(inputTarget);\n    var isTarget = targetIndex > -1;\n    var containsTarget = false;\n\n    if (targetIndex === -1) {\n      targetIndex = findIndex(targets, function (parentTarget) {\n        return parentTarget.contains(inputTarget);\n      });\n      containsTarget = targetIndex > -1;\n    }\n\n    triggerEvent(moveable, \"onClickGroup\", fillParams(moveable, e, {\n      isDouble: e.isDouble,\n      targets: targets,\n      inputTarget: inputTarget,\n      targetIndex: targetIndex,\n      isTarget: isTarget,\n      containsTarget: containsTarget\n    }));\n  }\n};\n/**\n * When you click on the element, the `click` event is called.\n * @memberof Moveable\n * @event click\n * @param {Moveable.OnClick} - Parameters for the `click` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"click\", ({ hasTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", target, hasTarget, containsTarget, targetIndex);\n * });\n */\n\n/**\n * When you click on the element inside the group, the `clickGroup` event is called.\n * @memberof Moveable\n * @event clickGroup\n * @param {Moveable.OnClickGroup} - Parameters for the `clickGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"clickGroup\", ({ inputTarget, isTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", inputTarget, isTarget, containsTarget, targetIndex);\n * });\n */\n\nvar MOVEABLE_ABLES = /*#__PURE__*/[BeforeRenderable, Default, Snappable, Pinchable, Draggable, Rotatable, Resizable, Scalable, Warpable, Scrollable, Padding, Origin, OriginDraggable, Clippable, Roundable, Groupable, Clickable, DragArea, Renderable];\nvar MOVEABLE_EVENTS_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce(function (current, able) {\n  return __assign(__assign({}, current), able.events);\n}, {});\nvar MOVEABLE_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce(function (current, able) {\n  return __assign(__assign({}, current), able.props);\n}, {});\nvar MOVEABLE_EVENTS_MAP = /*#__PURE__*/invertObject(MOVEABLE_EVENTS_PROPS_MAP);\nvar MOVEABLE_EVENTS = Object.keys(MOVEABLE_EVENTS_MAP);\nvar MOVEABLE_PROPS = Object.keys(MOVEABLE_PROPS_MAP);\n\nfunction getMaxPos(poses, index) {\n  return Math.max.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getMinPos(poses, index) {\n  return Math.min.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getGroupRect(moveables, rotation) {\n  if (!moveables.length) {\n    return [0, 0, 0, 0];\n  }\n\n  var moveablePoses = moveables.map(function (_a) {\n    var state = _a.state;\n    return getAbsolutePosesByState(state);\n  });\n  var minX = MAX_NUM;\n  var minY = MAX_NUM;\n  var groupWidth = 0;\n  var groupHeight = 0;\n  var fixedRotation = throttle(rotation, TINY_NUM);\n\n  if (fixedRotation % 90) {\n    var rad_1 = rotation / 180 * Math.PI;\n    var a1_1 = Math.tan(rad_1);\n    var a2_1 = -1 / a1_1;\n    var b1s_1 = [MIN_NUM, MAX_NUM];\n    var b2s_1 = [MIN_NUM, MAX_NUM];\n    moveablePoses.forEach(function (poses) {\n      poses.forEach(function (pos) {\n        // ax + b = y\n        // ㅠ = y - ax\n        var b1 = pos[1] - a1_1 * pos[0];\n        var b2 = pos[1] - a2_1 * pos[0];\n        b1s_1[0] = Math.max(b1s_1[0], b1);\n        b1s_1[1] = Math.min(b1s_1[1], b1);\n        b2s_1[0] = Math.max(b2s_1[0], b2);\n        b2s_1[1] = Math.min(b2s_1[1], b2);\n      });\n    });\n    b1s_1.forEach(function (b1) {\n      // a1x + b1 = a2x + b2\n      b2s_1.forEach(function (b2) {\n        // (a1 - a2)x = b2 - b1\n        var x = (b2 - b1) / (a1_1 - a2_1);\n        var y = a1_1 * x + b1;\n        minX = Math.min(minX, x);\n        minY = Math.min(minY, y);\n      });\n    });\n    var rotatePoses = moveablePoses.map(function (_a) {\n      var pos1 = _a[0],\n          pos2 = _a[1],\n          pos3 = _a[2],\n          pos4 = _a[3];\n      return [rotate(pos1, -rad_1), rotate(pos2, -rad_1), rotate(pos3, -rad_1), rotate(pos4, -rad_1)];\n    });\n    groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);\n    groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);\n  } else {\n    minX = getMinPos(moveablePoses, 0);\n    minY = getMinPos(moveablePoses, 1);\n    groupWidth = getMaxPos(moveablePoses, 0) - minX;\n    groupHeight = getMaxPos(moveablePoses, 1) - minY;\n\n    if (fixedRotation % 180) {\n      var changedWidth = groupWidth;\n      groupWidth = groupHeight;\n      groupHeight = changedWidth;\n    }\n  }\n\n  return [minX, minY, groupWidth, groupHeight];\n}\n/**\n * @namespace Moveable.Group\n * @description You can make targets moveable.\n */\n\n\nvar MoveableGroup = /*#__PURE__*/function (_super) {\n  __extends(MoveableGroup, _super);\n\n  function MoveableGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.differ = new ChildrenDiffer();\n    _this.moveables = [];\n    _this.transformOrigin = \"50% 50%\";\n    return _this;\n  }\n\n  var __proto = MoveableGroup.prototype;\n\n  __proto.updateEvent = function (prevProps) {\n    var state = this.state;\n    var props = this.props;\n\n    if (!state.target) {\n      state.target = this.areaElement;\n      this.controlBox.getElement().style.display = \"block\";\n      this.targetGesto = getTargetAbleGesto(this, state.target, \"Group\");\n      this.controlGesto = getAbleGesto(this, this.controlBox.getElement(), \"controlAbles\", \"GroupControl\");\n    }\n\n    var isContainerChanged = !equals(prevProps.container, props.container);\n\n    if (isContainerChanged) {\n      state.container = props.container;\n    }\n\n    var _a = this.differ.update(props.targets),\n        added = _a.added,\n        changed = _a.changed,\n        removed = _a.removed;\n\n    if (isContainerChanged || added.length || changed.length || removed.length) {\n      this.updateRect();\n    }\n  };\n\n  __proto.checkUpdate = function () {\n    this.updateAbles();\n  };\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    var _a;\n\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    if (!this.controlBox) {\n      return;\n    }\n\n    this.moveables.forEach(function (moveable) {\n      moveable.updateRect(type, false, false);\n    });\n    var state = this.state;\n    var props = this.props;\n    var target = state.target || props.target;\n\n    if (!isTarget || type !== \"\" && props.updateGroup) {\n      // reset rotataion\n      this.rotation = props.defaultGroupRotate;\n      this.transformOrigin = props.defaultGroupOrigin || \"50% 50%\";\n      this.scale = [1, 1];\n    }\n\n    var rotation = this.rotation;\n    var scale = this.scale;\n\n    var _b = getGroupRect(this.moveables, rotation),\n        left = _b[0],\n        top = _b[1],\n        width = _b[2],\n        height = _b[3]; // tslint:disable-next-line: max-line-length\n\n\n    target.style.cssText += \"left:0px;top:0px; transform-origin: \" + this.transformOrigin + \"; width:\" + width + \"px; height:\" + height + \"px;transform:rotate(\" + rotation + \"deg)\" + (\" scale(\" + (scale[0] >= 0 ? 1 : -1) + \", \" + (scale[1] >= 0 ? 1 : -1) + \")\");\n    state.width = width;\n    state.height = height;\n    var container = this.getContainer();\n    var info = getTargetInfo(this.controlBox.getElement(), target, this.controlBox.getElement(), this.getContainer(), this.props.rootContainer || container, state);\n    var pos = [info.left, info.top];\n    _a = getAbsolutePosesByState(info), info.pos1 = _a[0], info.pos2 = _a[1], info.pos3 = _a[2], info.pos4 = _a[3];\n    info.origin = plus(pos, info.origin);\n    info.beforeOrigin = plus(pos, info.beforeOrigin);\n    var clientRect = info.targetClientRect;\n    clientRect.top += top - info.top - state.top;\n    clientRect.left += left - info.left - state.left;\n    var direction = scale[0] * scale[1] > 0 ? 1 : -1;\n    this.updateState(__assign(__assign({}, info), {\n      direction: direction,\n      beforeDirection: direction,\n      left: left - info.left,\n      top: top - info.top\n    }), isSetState);\n  };\n\n  __proto.getRect = function () {\n    return __assign(__assign({}, _super.prototype.getRect.call(this)), {\n      children: this.moveables.map(function (child) {\n        return child.getRect();\n      })\n    });\n  };\n\n  __proto.triggerEvent = function (name, e, isManager) {\n    if (isManager || name.indexOf(\"Group\") > -1) {\n      return _super.prototype.triggerEvent.call(this, name, e);\n    }\n  };\n\n  __proto.updateAbles = function () {\n    _super.prototype.updateAbles.call(this, __spreadArrays(this.props.ables, [Groupable]), \"Group\");\n  };\n\n  MoveableGroup.defaultProps = __assign(__assign({}, MoveableManager.defaultProps), {\n    transformOrigin: [\"50%\", \"50%\"],\n    groupable: true,\n    dragArea: true,\n    keepRatio: true,\n    targets: [],\n    defaultGroupRotate: 0,\n    defaultGroupOrigin: \"50% 50%\"\n  });\n  return MoveableGroup;\n}(MoveableManager);\n\nvar InitialMoveable = /*#__PURE__*/function (_super) {\n  __extends(InitialMoveable, _super);\n\n  function InitialMoveable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refTargets = [];\n    _this.selectorMap = {};\n    return _this;\n  }\n\n  var __proto = InitialMoveable.prototype;\n\n  InitialMoveable.makeStyled = function () {\n    var cssMap = {};\n    var ables = this.getTotalAbles();\n    ables.forEach(function (_a) {\n      var css = _a.css;\n\n      if (!css) {\n        return;\n      }\n\n      css.forEach(function (text) {\n        cssMap[text] = true;\n      });\n    });\n    var style = getKeys(cssMap).join(\"\\n\");\n    this.defaultStyled = styled(\"div\", prefixCSS(PREFIX, MOVEABLE_CSS + style));\n  };\n\n  InitialMoveable.getTotalAbles = function () {\n    return __spreadArrays([Default, Groupable, DragArea], this.defaultAbles);\n  };\n\n  __proto.render = function () {\n    var moveableContructor = this.constructor;\n\n    if (!moveableContructor.defaultStyled) {\n      moveableContructor.makeStyled();\n    }\n\n    var refTargets = getRefTargets(this.props.target || this.props.targets);\n    var elementTargets = getElementTargets(refTargets, this.selectorMap);\n    this.refTargets = refTargets;\n    var isGroup = elementTargets.length > 1;\n    var totalAbles = moveableContructor.getTotalAbles();\n    var userAbles = this.props.ables || [];\n\n    var ables = __spreadArrays(totalAbles, userAbles);\n\n    if (isGroup) {\n      return createElement(MoveableGroup, __assign({\n        key: \"group\",\n        ref: ref(this, \"moveable\"),\n        cssStyled: moveableContructor.defaultStyled\n      }, this.props, {\n        target: null,\n        targets: elementTargets,\n        ables: ables\n      }));\n    } else {\n      return createElement(MoveableManager, __assign({\n        key: \"single\",\n        ref: ref(this, \"moveable\"),\n        cssStyled: moveableContructor.defaultStyled\n      }, this.props, {\n        target: elementTargets[0],\n        ables: ables\n      }));\n    }\n  };\n\n  __proto.componentDidMount = function () {\n    this.updateRefs();\n  };\n\n  __proto.componentDidUpdate = function () {\n    this.updateRefs();\n  };\n\n  __proto.updateRefs = function (isReset) {\n    var refTargets = getRefTargets(this.props.target || this.props.targets);\n    var isUpdate = this.refTargets.some(function (target, i) {\n      var nextTarget = refTargets[i];\n\n      if (!target && !nextTarget) {\n        return false;\n      } else if (target !== nextTarget) {\n        return true;\n      }\n\n      return false;\n    });\n    var selectorMap = isReset ? {} : this.selectorMap;\n    var nextSelectorMap = {};\n    this.refTargets.forEach(function (target) {\n      if (isString(target)) {\n        if (!selectorMap[target]) {\n          isUpdate = true;\n          nextSelectorMap[target] = [].slice.call(document.querySelectorAll(target));\n        } else {\n          nextSelectorMap[target] = selectorMap[target];\n        }\n      }\n    });\n    this.selectorMap = nextSelectorMap;\n\n    if (isUpdate) {\n      this.forceUpdate();\n    }\n  };\n\n  InitialMoveable.defaultAbles = [];\n  InitialMoveable.defaultStyled = null;\n\n  __decorate([withMethods(MOVEABLE_METHODS)], InitialMoveable.prototype, \"moveable\", void 0);\n\n  return InitialMoveable;\n}(PureComponent);\n\nvar Moveable = /*#__PURE__*/function (_super) {\n  __extends(Moveable, _super);\n\n  function Moveable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Moveable.defaultAbles = MOVEABLE_ABLES;\n  return Moveable;\n}(InitialMoveable);\n\nfunction makeMoveable(ables) {\n  var _a;\n\n  return _a = /*#__PURE__*/function (_super) {\n    __extends(Moveable, _super);\n\n    function Moveable() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    return Moveable;\n  }(InitialMoveable), _a.defaultAbles = ables, _a;\n}\n\nexport default Moveable;\nexport { InitialMoveable, MOVEABLE_ABLES, MOVEABLE_EVENTS, MOVEABLE_EVENTS_MAP, MOVEABLE_EVENTS_PROPS_MAP, MOVEABLE_METHODS, MOVEABLE_PROPS, MOVEABLE_PROPS_MAP, getElementInfo, makeMoveable };","map":{"version":3,"sources":["../src/react-moveable/consts.ts","../src/react-moveable/matrix/index.ts","../src/react-moveable/utils.ts","../src/react-moveable/ables/Pinchable.ts","../src/react-moveable/gesto/CustomGesto.ts","../src/react-moveable/groupUtils.ts","../src/react-moveable/gesto/GestoUtils.ts","../src/react-moveable/ables/snappable/snap.ts","../src/react-moveable/ables/snappable/innerBounds.ts","../src/react-moveable/ables/snappable/bounds.ts","../src/react-moveable/ables/Snappable.tsx","../src/react-moveable/ables/Draggable.tsx","../src/react-moveable/ables/Rotatable.tsx","../src/react-moveable/renderDirection.tsx","../src/react-moveable/ables/Resizable.ts","../src/react-moveable/ables/Scalable.ts","../src/react-moveable/ables/Warpable.tsx","../src/react-moveable/classNames.ts","../src/react-moveable/ables/DragArea.tsx","../src/react-moveable/ables/Origin.tsx","../src/react-moveable/ables/Scrollable.ts","../src/react-moveable/ables/Default.ts","../src/react-moveable/ables/Padding.tsx","../src/react-moveable/ables/roundable/borderRadius.tsx","../src/react-moveable/ables/Clippable.tsx","../src/react-moveable/ables/OriginDraggable.tsx","../src/react-moveable/ables/Roundable.tsx","../src/react-moveable/ables/BeforeRenderable.ts","../src/react-moveable/ables/Renderable.ts","../src/react-moveable/gesto/getAbleGesto.ts","../src/react-moveable/MoveableManager.tsx","../src/react-moveable/ables/Groupable.tsx","../src/react-moveable/ables/Clickable.ts","../src/react-moveable/ables/consts.ts","../src/react-moveable/MoveableGroup.tsx","../src/react-moveable/InitialMoveable.tsx","../src/react-moveable/Moveable.tsx","../src/react-moveable/makeMoveable.ts"],"names":["x1","getSVGCursor","x2","degree45","Math","degree","defaultCursor","agent","getAgent","IS_WEBKIT","PREFIX","MOVEABLE_CSS","getCursorCSS","NEARBY_POS","TINY_NUM","MIN_SCALE","MAX_NUM","MIN_NUM","DIRECTIONS","DIRECTION_INDEXES","n","s","w","e","nw","ne","sw","se","DIRECTION_ROTATIONS","MOVEABLE_METHODS","i","x","startIndex","fromX","fromIndex","matrix","inverseMatrix","v","iv","ignoreDimension","m","newMatrix","invert","createIdentityMatrix","identityIndex","j","swap","divide","targetStartIndex","targetIndex","target","add","transpose","getRad","pos1","pos2","distX","distY","rad","getOrigin","originMatrix","fromTranslation","pos","convertPositionMatrix","convertDimension","length","multiplies","matrixes","multiply","matrix2","k","l","average","nums","total","plus","nextPos","minus","convertCSStoMatrix","a","convertMatrixtoCSS","caculate","result","rotate","createRotateMatrix","cos","sin","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","y0","y1","y2","y3","v0","v1","v2","v3","h","multiply2","prefix","prefixNames","getTransformMatrix","transform","isObject","value","splitBracket","getAbsoluteMatrix","measureSVGSize","el","unit","isHorizontal","viewBox","getSVGViewBox","getBeforeTransformOrigin","relativeOrigin","getTransformOrigin","getComputedStyle","splitUnit","style","transformOrigin","getOffsetInfo","lastParent","isParent","body","document","isEnd","position","isStatic","offsetParent","getOffsetPosInfo","container","isFixed","tagName","offsetLeft","offsetTop","containerClientRect","isSVG","isUndefined","hasOffset","targetOrigin","_a","getSVGGraphicsOffset","offset","getMatrixStackInfo","is3d","offsetContainer","matrixesLength","offsetPos","getSVGMatrix","isOffsetEnd","parentClientLeft","parentClientTop","targetMatrix","targetTransformOrigin","cacaulateElementInfo","isAbsolute3d","state","width","height","rotation","allResult","getSize","caculateMatrixStack","caculateMoveablePosition","getRotationRad","rootMatrix","beforeMatrix","offsetMatrix","allMatrix","targetTransform","left","top","right","bottom","pos4","direction","getElementInfo","prevTargetMatrix","rootMatrixes","isRoot3d","isNext3d","isSVGGraphicElement","originalContainer","endContainer","getSVGOffset","isMatrix3d","makeMatrixCSS","clientWidth","clientHeight","baseVal","y","viewBoxWidth","viewBoxHeight","scaleX","scaleY","preserveAspectRatio","align","meetOrSlice","svgOrigin","translate","xAlign","yAlign","scaleDimension","scaleMatrix","bbox","caculatePosition","caculatePoses","getRect","poses","posesX","posesY","rectWidth","rectHeight","caculateRect","absoluteMatrix","rect","rectLeft","rectTop","mat","prevLeft","prevTop","prevWidth","prevHeight","posOrigin","prevOrigin","rectOrigin","count","inverseBeforeMatrix","mat2","nextLeft","nextTop","distLeft","distTop","_b","_c","_d","x3","_e","x4","y4","originX","originY","center","pos1Rad","pos2Rad","getDistSize","vec","getDiagonalSize","getLineStyle","getControlTransform","getCSSSize","window","parseFloat","isOffset","borderLeft","borderRight","borderTop","borderBottom","paddingLeft","paddingRight","paddingTop","paddingBottom","getTargetInfo","moveableElement","parentContainer","rootContainer","beforeDirection","beforeOrigin","targetClientRect","resetClientRect","moveableClientRect","beforePosition","getClientRect","clientLeft","clientTop","scrollWidth","scrollHeight","isExtends","getDirection","direciton","dir","getAbsolutePoses","dist","getAbsolutePosesByState","roundSign","num","throttle","throttleArray","unset","self","name","getOrientationDirection","isInside","k1","k2","k3","k4","k5","k6","signs1","signs2","fillParams","moveable","params","datas","nextParams","__assign","clientX","clientY","inputEvent","currentTarget","fillEndParams","isDrag","lastEvent","isDouble","triggerEvent","isManager","pseudoElt","filterAbles","ables","methods","triggerAblesSimultaneously","enabledAbles","ableGroups","able","getKeepRatioHeight","isWidth","ratio","getKeepRatioWidth","equals","a1","a2","selectValue","values","groupBy","arr","func","groups","groupKeys","groupKey","keyIndex","group","groupByMap","flat","prev","maxOffset","args","minOffset","caculateInversePosition","convertDragDist","caculatePadding","checkSize","targetSize","compareSize","isMax","caculateBoundSize","size","minSize","maxSize","keepRatio","minWidth","minHeight","maxWidth","maxHeight","convertCSSSize","isRelative","moveControlPos","controlPoses","index","isRect","sub","dists","directions","verticalDirection_1","horizontalDirection_1","controlDir","controlPose","isVertical","dirDir","dirHorizontal","dirVertical","getTinyDist","directionCondition","hasClass","invertObject","obj","nextObj","getTransform","transforms","beforeFunctionTexts","targetFunctionText","afterFunctionTexts","beforeFunctions","parse","targetFunctions","afterFunctions","beforeFunctionMatrix","toMat","targetFunctionMatrix","afterFunctionMatrix","targetFunction","isArrayFormat","isArray","getRefTargets","targets","userTargets","isString","getElementTargets","selectorMap","elementTargets","between","min","max","updateRect","props","pinchable","Boolean","events","onPinchStart","onPinch","onPinchEnd","onPinchGroupStart","onPinchGroup","onPinchGroupEnd","dragStart","pinchStart","angle","originalDatas","eventName","controlEventName","pinchAbles","isPinch","ableEvent","parentRotate","request","pinch","pinchScale","distance","parentDistance","pinchEnd","pinchGroupStart","pinchGroup","pinchGroupEnd","setCustomDrag","delta","isConvert","draggableDatas","parentEvent","draggable","type","client","deltaX","deltaY","parentGesto","fillChildEvents","groupableDatas","childDatas","triggerChildGesto","isStart","moveables","childs","childMoveable","childEvent","parentFlag","triggerChildAble","_","ev","callback","eachEvent","caculatePointerDist","posX","posY","getDragDist","setDragStart","resolveTransformEvent","event","functionName","nextTransforms","nextTransformAppendedIndexes","nextIndex","matFunctionName","convertTransformFormat","getTransformDist","bx","by","getBeforeDragDist","res","getTransfromMatrix","isAfter","afterTransform","targetAllTransform","nextTargetMatrix","res1","afterTargetMatrix","startDragBeforeDist","absoluteOrigin","isBefore","startDragDist","getInverseDragDist","caculateTransformOrigin","prevSize","isNaN","measureRatio","getPosIndexesByDirection","indexes","getPosesByDirection","getPosByDirection","nextPoses","getPosByReverseDirection","startPos","getNextMatrix","getNextTransformMatrix","parseMat","fillTransformStartEvent","setTransform","splitSpace","setTransformIndex","setDefaultTransformIndex","info","fillOriginalTransform","fillTransformEvent","nextTransform","drag","Draggable","getTranslateDist","fixedPosition","fixedDirection","groupable","nextMatrix","groupLeft","groupTop","nextFixedPosition","getDirectionOffset","getScaleDist","scaleDist","getOriginDirection","nextFixedOffset","getRotateDist","rotateDist","getResizeDist","nextOrigin","getDist","getStartDirection","baseDirection","getAbsoluteFixedPosition","getGapGuidelines","guidelines","snapThreshold","start","end","otherStart","otherEnd","totalGuidelines","otherIndex","otherType","elementGuidelines","guidelineType","element","sizes","elementStart","guideline1","elementEnd","guideline2Pos","guideline2Sizes","guideline2Element","targetStart","targetEnd","gap","canSnap","gapGuidelines","centerPos","addGuidelines","horizontalGuidelines","verticalGuidelines","getTotalGuidelines","containerHeight","containerWidth","_f","snapHorizontal","snapVertical","checkMoveableSnapPoses","snapCenter","customSnapThreshold","checkSnapPoses","snapElement","options","vertical","checkSnap","horizontal","checkSnapKeepRatio","endPos","endY","startY","dx","dy","isBottom","isRight","verticalInfo","isSnap","horizontalInfo","verticalSnapInfo","horizontalSnapInfo","isVerticalSnap","verticalGuideline","getNearestSnapGuidelineInfo","isHorizontalSnap","horizontalGuideline","horizontalPos","verticalPos","endX","b","checkSnaps","isCenter","isSnapCenter","verticalNames","horizontalNames","snapInfo","guideline","posInfo","guidelineInfo","posInfos","targetType","posType","snapPosInfos","guidelineInfos","targetPos","snapPosInfo","getSnapInfosByDirection","snapDirection","alignPoses","checkSnapBoundPriority","aDist","bDist","getNearOffsetInfo","offsets","aSign","bSign","aOffset","bOffset","isBound","cx","line","cy","dot","test1","test2","centerSign","hitTestLine","dots","sign","bounds","isAllBound","isVerticalBound","isHorizontalBound","leftLine","topLine","rightLine","bottomLine","isHorizontalStart","isVerticalStart","isStartLine","isSameStartLine","topBoundInfo","checkLineBoundCollision","bottomBoundInfo","leftBoundInfo","rightBoundInfo","isAllVerticalBound","isAllHorizontalBound","verticalOffset","horizontalOffset","dot1","dot2","boundDot1","boundLine","boundDot2","dy1","dx1","dy2","dx2","isRender","checkInnerBoundDot","threshold","getInnerBoundInfo","lines","multiple","checkInnerBound","sizeOffset","getInnerBoundDragInfo","innerBoundInfo","widthOffsetInfo","heightOffsetInfo","getCheckSnapLineDirections","lineDirections","getCheckSnapLines","dir1","dir2","checkRotateInnerBounds","prevPoses","relativeLeft","relativeRight","relativeTop","relativeBottom","isBoundRotate","dotInfos","lineRad","solveReverseLine","lineDist","getDistPointLine","dotDist","dotRad","distRad","nextRad1","nextRad2","nextRad","checkInnerBoundPoses","innerBounds","horizontalPoses","verticalPoses","boundMap","checkBoundPoses","Infinity","nextBounds","checkBounds","checkBoundKeepRatio","startBoundPos","endBoundPos","minPos","maxPos","boundInfos","relativePoses","boundRect","boundRotate","boundPos","r","checkRotateBounds","relativeRad1","caculateContainerPos","containerRect","clientPos","snapStart","containerLeft","containerTop","targetLeft","targetTop","elementLeft","elementTop","elementRight","elementBottom","hasGuidelines","ableName","snappable","enableSnap","solveEquation","widthOffset","heightOffset","boundInfo","checkSnapBoundsKeepRatio","isRequest","horizontalBoundInfo","verticalBoundInfo","getSnapBoundOffset","horizontalDist","verticalDist","checkMoveableSnapBounds","horizontalBoundInfos","verticalBoundInfos","getSnapBound","snapIndex","snap","checkSnapBounds","guideines","normalized","checkMaxBounds","fixedPos","isCheckVertical","otherDirection","isCheckHorizontal","otherPos","verticalDirection","horizontalDirection","deg","nextOtherPos","solveNextOffset","startDirection","endDirection","otherStartPos","otherEndPos","snapBoundInfo","otherHorizontalDist","otherHorizontalOffset","isOtherHorizontalBound","isOtherHorizontalSnap","otherVerticalDist","otherVerticalOffset","isOtherVerticalBound","isOtherVerticalSnap","getCheckSnapDirections","getSizeOffsetInfo","getSnapBoundInfo","recheckSizeByTwoDirection","snapPos","nextWidthOffset","nextHeightOffset","nextWidth","nextHeight","checkSizeDist","getNextPoses","isWidthBound","isHeightBound","widthDist","heightDist","isGetWidthOffset","checkSnapRotate","checkSnapSize","getNextFixedPoses","checkSnapScale","sizeDist","snapOffset","startCheckSnapDrag","checkThrottleDragRotate","throttleDragRotate","offsetX","offsetY","adjustPoses","adjustPos","prevDistY","checkSnapDrag","snapPoses","verticalSnapBoundInfo","horizontalSnapBoundInfo","verticalInnerBoundInfo","horizontalInnerBoundInfo","relativePos","elementPos","groupInfos","groupInfo","find","groupElement","groupPos","getElementGuidelineDist","directionName","posName1","posName2","sizeName","isFirstRenderSize","linePos","lineSize","isRenderSize","snapSize","isDisplaySnapDigit","className","snapDistFormat","key","absGap","guidelinePos","targetSizes","gapPos","aPos","bPos","gapSizes","renderPos","gapGuideline","getGapGuidelinesToStart","getGapGuidelinesToEnd","externalBounds","verticalSnapPoses","horizontalSnapPoses","verticalInnerBoundPoses","horizontalInnerBoundPoses","innerPos","snapGap","snapDigit","Function","onSnap","css","render","snapRenderInfo","minLeft","minTop","containerPos","_g","externalPoses","snapInfos","hasExternalPoses","externalRect","verticalPosInfos","horizontalPosInfos","getSnapGuidelines","addBoundGuidelines","elementHorizontalGroup","groupByElementGuidelines","elementVerticalGroup","gapVerticalGuidelines","gapHorizontalGuidelines","allGuidelines","elements","gaps","renderGapGuidelines","renderElementGroup","renderSnapPoses","renderGuidelines","dragEnd","dragControlCondition","rotatableDragControlCondtion","dragControlStart","dragControlEnd","dragGroupStart","dragGroupEnd","dragGroupControlStart","dragGroupControlEnd","throttleDrag","startDragRotate","Number","onDragStart","onDrag","onDragEnd","onDragGroupStart","onDragGroup","onDragGroupEnd","dragInfo","gesto","set","startRect","prevDist","prevBeforeDist","startValue","parentMoveable","dragRotateRad","ry","rx","beforeTranslate","beforeDist","beforeDelta","dragGroup","passDeltaX","passDeltaY","isControl","requestStart","requestEnd","startAbsoluteOrigin","prevSnapDeg","startDeg","prevLoop","prevDeg","loop","absolutePrevSnapDeg","absoluteDeg","getDeg","getPositions","rotationPosition","radPoses","isReverse","canPinch","rotatable","throttleRotate","onRotateStart","onRotate","onRotateEnd","onRotateGroupStart","onRotateGroup","onRotateGroupEnd","renderPoses","rotationRad","externalRotate","controlRect","setRotateStartInfo","rotatation","dragControl","groupDelta","beforeInfo","afterInfo","isRotate","_h","parentDist","getParentDeg","beforeRotate","getRotateInfo","inverseDist","inverseDelta","dragGroupControlCondition","parentLeft","parentTop","parentBeforeOrigin","child","childClient","dragGroupControl","prevX","prevY","rotateMatrix","distRotate","startRotation","renderControls","defaultDirections","React","directionMap","directionRotation","renderLine","renderAllDirections","renderDiagonalDirections","ableGroup","resizable","throttleResize","renderDirections","onResizeStart","onResize","onResizeEnd","onResizeGroupStart","onResizeGroup","onResizeGroupEnd","edge","parentDirection","padding","startWidth","startHeight","setMin","setMax","setOrigin","parentScale","parentKeepRatio","dragClient","isResize","startOffsetWidth","startOffsetHeight","sizeDirection","distWidth","distHeight","standardRad","ratioRad","signSize","snapDist","isNoSnap","offsetWidth","offsetHeight","dragControlAfter","errorWidth","errorHeight","isErrorWidth","isErrorHeight","originalX","originalY","scalable","throttleScale","onScaleStart","onScale","onScaleEnd","onScaleGroupStart","onScaleGroup","onScaleGroupEnd","isScale","dragDist","stateDirection","snapHeight","snapWidth","moveableScale","rad1","rad2","getTriangleRad","poses1","poses2","pi","warpable","Array","onWarpStart","onWarp","onWarpEnd","linePosFrom1","getMiddleLinePos","linePosFrom2","linePosFrom3","linePosFrom4","linePosTo1","linePosTo2","linePosTo3","linePosTo4","inputTarget","prevMatrix","isWarp","posIndexes","absolutePoses","selectedPoses","afterMatrix","totalMatrix","AREA_PIECES","AREA_PIECE","AVOID","removeClass","dragArea","passDragArea","onClick","onClickGroup","ref","renderPieces","areaElement","rects","children","addClass","restoreStyle","scrollContainer","scrollable","scrollThreshold","getScrollPosition","onScroll","onScrollGroup","dragScroll","gestoName","checkScroll","getDefaultScrollPosition","dragGroupContro","dragGroupControEnd","dragTarget","zoom","pinchThreshold","pinchOutside","checkInput","cspNonce","translateZ","Object","paddingDirections","paddingPos1","paddingPos2","paddingPos3","paddingPos4","RADIUS_DIRECTIONS","sumSize","sumRatio","HORIZONTAL_RADIUS_ORDER","VERTICAL_RADIUS_ORDER","HORIZONTAL_RADIUS_DIRECTIONS","VERTICAL_RADIUS_DIRECTIONS","getRadiusStyles","clipStyles","raws","rawPos","styles","getRadiusRange","horizontalRange","verticalRange","clipPose","getRadiusValues","splitIndex","splitLength","horizontalValues","verticalValues","nwValue","neValue","_k","wnValue","_l","_m","enValue","horizontalRawPoses","verticalRawPoses","caculateRatio","nextHorizontalPoses","nextVerticalPoses","raw","removeRadiusPos","radiuslIndex","deleteCount","addRadiusPos","horizontalIndex","verticalIndex","radiusX","radiusY","startVerticalIndex","splitRadiusPoses","horizontals","verticals","CLIP_DIRECTIONS","CLIP_RECT_DIRECTIONS","clipType","clipPoses","isCircle","subWidth","subHeight","xs","ys","dirx","diry","clipText","clipPath","_j","clipPrefix","splitter","splitComma","xPos","yPos","convertUnitSize","radiusX_1","radiusY_1","radius","xRadius","yRadius","centerPos_1","roundIndex","rectLength","radiusValues","topValue","_o","_p","rightValue","nextRight","nextBottom","radiusPoses","getRectPoses","posValue","getClipStyles","clipEventType","clipStyle","clippable","defaultClipPath","customClipPath","clipRelative","clipArea","dragWithClip","clipTargetBounds","clipVerticalGuidelines","clipHorizontalGuidelines","clipSnapThreshold","onClipStart","onClip","onClipEnd","clipPathState","snapBoundInfos","getClipPath","caculatedPos","controls","isInset","isPolygon","linePoses_1","from","clipLeft","clipTop","ellipseClipPath","piece","areaPoses","allWidth","allHeight","allLeft_1","allTop_1","directionType","snapPos1","snapPos2","parseInt","draggableData","isLine","isArea","isDragWithTarget","isAll","guidePoses","isEllipse","guideRect","guideXPoses","guideYPoses","rectPoses","rectDists_1","snapOffsetY","snapOffsetX","distSnapX","distSnapY","nextClipStyles","isClipStart","removeClipPath","addClipPath","originDraggable","originRelative","onDragOriginStart","onDragOrigin","onDragOriginEnd","distOrigin","nextRect","dragDelta","horizontalsLength","verticalsLength","lineIndex","borderRadius","roundable","roundRelative","onRoundStart","onRound","onRoundEnd","borderRadiusState","getBorderRadius","controlIndex","triggerRoundEvent","addBorderRadius","onBeforeRenderStart","onBeforeRender","onBeforeRenderEnd","onBeforeRenderGroupStart","onBeforeRenderGroup","onBeforeRenderGroupEnd","cssMatrix","resetTransform","fillDragStartParams","fillDragParams","_this","onRenderStart","onRender","onRenderEnd","onRenderGroupStart","onRenderGroup","onRenderGroupEnd","triggerAble","ableType","eventOperation","eventAffix","eventType","requestInstant","conditionName","isFirstStart","isGroup","BeforeRenderable","requestAble_1","results","hasCondition","nextDatas","isUpdate","isForceEnd","getTargetAbleGesto","moveableTarget","controlBox","startFunc","eventTarget","getAbleGesto","conditionFunctions","__extends","MoveableManager","parentPosition","cssStyled","propsTarget","ControlBoxElement","stateTarget","groupTargets","isDisplay","isDragging","ableAttributes","Renderer","createElement","clientRect","rectRight","rectBottom","testLeft","testRight","testTop","testBottom","rectSize","isTarget","controlBoxElement","hasTargetAble","hasControlAble","prevTarget","prevProps","prevDragArea","isTargetChanged","isUnset","statePos","requsetAble","ableRequester","isInstant","param","requester","requestAble","stateLeft","stateTop","stateContainer","isChanged","targetAbles","controlAbles","nextState","defaultGroupRotate","defaultGroupOrigin","refs","always","containsTarget","findIndex","MOVEABLE_ABLES","MOVEABLE_EVENTS_PROPS_MAP","current","MOVEABLE_PROPS_MAP","MOVEABLE_EVENTS_MAP","MOVEABLE_EVENTS","MOVEABLE_PROPS","moveablePoses","minX","minY","groupWidth","groupHeight","fixedRotation","rad_1","a1_1","a2_1","b1s_1","b2s_1","b1","b2","rotatePoses","getMaxPos","getMinPos","changedWidth","MoveableGroup","defaultProps","isContainerChanged","added","changed","removed","getGroupRect","_super","InitialMoveable","cssMap","getKeys","styled","prefixCSS","Default","Groupable","DragArea","withMethods","__decorate","moveableContructor","refTargets","totalAbles","userAbles","defaultStyled","nextTarget","isReset","nextSelectorMap","Moveable","makeMoveable"],"mappings":"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","sourcesContent":["import getAgent from \"@egjs/agent\";\nimport { IObject } from \"@daybrush/utils\";\nimport { MoveableInterface } from \"./types\";\n\nfunction getSVGCursor(scale: number, degree: number) {\n    return `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${32 * scale}px\" height=\"${32 * scale}px\" viewBox=\"0 0 32 32\" ><path d=\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\" stroke-linejoin=\"round\" stroke-width=\"1.2\" fill=\"black\" stroke=\"white\" style=\"transform:rotate(${degree}deg);transform-origin: 16px 16px\"></path></svg>`;\n}\nfunction getCursorCSS(degree: number) {\n    const x1 = getSVGCursor(1, degree);\n    const x2 = getSVGCursor(2, degree);\n    const degree45 = (Math.round(degree / 45) * 45) % 180;\n    const defaultCursor\n        = degree45 === 135\n        ? \"nwse-resize\"\n        : degree45 === 45\n        ? \"nesw-resize\"\n        : degree45 === 90\n        ? \"ew-resize\"\n        : \"ns-resize\"; // 135\n\n    // tslint:disable-next-line: max-line-length\n    return `cursor:${defaultCursor};cursor: url('${x1}') 16 16, ${defaultCursor};cursor: -webkit-image-set(url('${x1}') 1x, url('${x2}') 2x) 16 16, ${defaultCursor};`;\n}\n\nexport const agent = getAgent();\nexport const IS_WEBKIT = agent.browser.webkit;\n\nexport const PREFIX = \"moveable-\";\nexport const MOVEABLE_CSS = `\n{\n\tposition: fixed;\n\twidth: 1px;\n\theight: 1px;\n\tleft: 0;\n\ttop: 0;\n    z-index: 3000;\n    --zoom: 1;\n    --zoompx: 1px;\n}\n.control-box {\n    z-index: 0;\n}\n.line, .control {\n\tleft: 0;\n    top: 0;\n    will-change: transform;\n}\n.control {\n\tposition: absolute;\n\twidth: 14px;\n\theight: 14px;\n\tborder-radius: 50%;\n\tborder: 2px solid #fff;\n\tbox-sizing: border-box;\n\tbackground: #4af;\n\tmargin-top: -7px;\n    margin-left: -7px;\n    width: calc(14 * var(--zoompx));\n    height: calc(14 * var(--zoompx));\n    margin-top: calc(-7 * var(--zoompx));\n    margin-left: calc(-7 * var(--zoompx));\n    border: calc(2 * var(--zoompx)) solid #fff;\n    z-index: 10;\n}\n.padding {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100px;\n    height: 100px;\n    transform-origin: 0 0;\n}\n.line {\n\tposition: absolute;\n\twidth: 1px;\n    height: 1px;\n    width: var(--zoompx);\n    height: var(--zoompx);\n\tbackground: #4af;\n\ttransform-origin: 0px 50%;\n}\n.line.dashed {\n    box-sizing: border-box;\n    background: transparent;\n}\n.line.dashed.horizontal {\n    border-top: 1px dashed #4af;\n    border-top: var(--zoompx) dashed #4af;\n}\n.line.dashed.vertical {\n    border-left: 1px dashed #4af;\n    border-left: var(--zoompx) dashed #4af;\n}\n.line.dashed:before {\n    position: absolute;\n    content: attr(data-size);\n    color: #4af;\n    font-size: 12px;\n    font-weight: bold;\n}\n.line.dashed.horizontal:before, .line.gap.horizontal:before {\n    left: 50%;\n    transform: translateX(-50%);\n    bottom: 5px;\n}\n.line.dashed.vertical:before, .line.gap.vertical:before {\n    top: 50%;\n    transform: translateY(-50%);\n    left: 5px;\n}\n.line.rotation-line {\n\theight: 40px;\n    width: 1px;\n    transform-origin: 50% calc(100% - 0.5px);\n    top: -40px;\n    width: var(--zoompx);\n    height: calc(40 * var(--zoompx));\n    top: calc(-40 * var(--zoompx));\n    transform-origin: 50% calc(100% - 0.5 * var(--zoompx));\n}\n.line.rotation-line .control {\n\tborder-color: #4af;\n\tbackground:#fff;\n    cursor: alias;\n    left: 50%;\n}\n.line.vertical {\n    transform: translateX(-50%);\n}\n.line.horizontal {\n    transform: translateY(-50%);\n}\n.line.vertical.bold {\n    width: 2px;\n    width: calc(2 * var(--zoompx));\n}\n.line.horizontal.bold {\n    height: 2px;\n    height: calc(2 * var(--zoompx));\n}\n\n.line.gap {\n    background: #f55;\n}\n.line.gap:before {\n    position: absolute;\n    content: attr(data-size);\n    color: #f55;\n    font-size: 12px;\n    font-weight: bold;\n}\n.control.origin {\n\tborder-color: #f55;\n\tbackground: #fff;\n\twidth: 12px;\n\theight: 12px;\n\tmargin-top: -6px;\n    margin-left: -6px;\n    width: calc(12 * var(--zoompx));\n    height: calc(12 * var(--zoompx));\n    margin-top: calc(-6 * var(--zoompx));\n    margin-left: calc(-6 * var(--zoompx));\n\tpointer-events: none;\n}\n${[0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(degree => `\n.direction[data-rotation=\"${degree}\"] {\n\t${getCursorCSS(degree)}\n}\n`).join(\"\\n\")}\n.group {\n    z-index: -1;\n}\n.area {\n    position: absolute;\n}\n.area-pieces {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: none;\n}\n.area.avoid, .area.pass {\n    pointer-events: none;\n}\n.area.avoid+.area-pieces {\n    display: block;\n}\n.area-piece {\n    position: absolute;\n}\n\n${IS_WEBKIT ? `:global svg *:before {\n\tcontent:\"\";\n\ttransform-origin: inherit;\n}` : \"\"}\n`;\nexport const DRAGGER_EVENTS = [\"dragstart\", \"drag\", \"dragend\", \"pinchstart\", \"pinch\", \"pinchend\"];\n\nexport const NEARBY_POS = [\n    [0, 1, 2],\n    [1, 0, 3],\n    [2, 0, 3],\n    [3, 1, 2],\n];\n\nexport const TINY_NUM = 0.0000001;\nexport const MIN_SCALE = 0.000000001;\nexport const MAX_NUM = Math.pow(10, 10);\nexport const MIN_NUM = -MAX_NUM;\n\nexport const DIRECTIONS = [\"nw\", \"ne\", \"sw\", \"se\", \"n\", \"w\", \"s\", \"e\"];\n\nexport const DIRECTION_INDEXES: IObject<number[]> = {\n    n: [0, 1],\n    s: [2, 3],\n    w: [2, 0],\n    e: [1, 3],\n    nw: [0],\n    ne: [1],\n    sw: [2],\n    se: [3],\n};\nexport const DIRECTION_ROTATIONS: IObject<number> = {\n    n: 0,\n    s: 180,\n    w: 270,\n    e: 90,\n    nw: 315,\n    ne: 45,\n    sw: 225,\n    se: 135,\n};\n\nexport const MOVEABLE_METHODS: Array<keyof MoveableInterface> = [\n    \"isMoveableElement\",\n    \"updateRect\",\n    \"updateTarget\",\n    \"destroy\",\n    \"dragStart\",\n    \"isInside\",\n    \"hitTest\",\n    \"setState\",\n    \"getRect\",\n    \"request\",\n    \"isDragging\",\n];\n","function add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        const v = matrix[x];\n        const iv = inverseMatrix[x];\n\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        // diagonal\n        const identityIndex = n * i + i;\n\n        if (newMatrix[identityIndex] === 0) {\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (newMatrix[identityIndex]) {\n            divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        } else {\n            // no inverse matrix\n            return [];\n        }\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = j;\n            const targetIndex = j + i * n;\n            const target = newMatrix[targetIndex];\n\n            if (target === 0 || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\nexport function getRad(pos1: number[], pos2: number[]) {\n    const distX = pos2[0] - pos1[0];\n    const distY = pos2[1] - pos1[1];\n    const rad = Math.atan2(distY, distX);\n\n    return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n    const w = matrix[n * n - 1];\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\nexport function fromTranslation(pos: number[], n: number) {\n    const newMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n - 1; ++i) {\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\nexport function multiply(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[j * n + i] = 0;\n            for (let l = 0; l < m; ++l) {\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\nexport function sum(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return total;\n}\nexport function average(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return length ? total / length : 0;\n}\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\nexport function convertCSStoMatrix(a: number[], is2d: boolean = a.length === 6) {\n    if (is2d) {\n        return [\n            a[0], a[1], 0,\n            a[2], a[3], 0,\n            a[4], a[5], 1,\n        ];\n    }\n    return a;\n}\nexport function convertMatrixtoCSS(a: number[], is2d: boolean = a.length === 9) {\n    if (is2d) {\n        return [\n            a[0], a[1],\n            a[3], a[4],\n            a[6], a[7],\n        ];\n    }\n    return a;\n}\n\nexport function caculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\nexport function rotate(pos: number[], rad: number) {\n    return caculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, 0, x1, 0, x2, 0, x3, 0,\n        y0, 0, y1, 0, y2, 0, y3, 0,\n        1, 0, 1, 0, 1, 0, 1, 0,\n        0, x0, 0, x1, 0, x2, 0, x3,\n        0, y0, 0, y1, 0, y2, 0, y3,\n        0, 1, 0, 1, 0, 1, 0, 1,\n        -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3,\n        -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n","import { PREFIX, IS_WEBKIT, TINY_NUM } from \"./consts\";\nimport { prefixNames } from \"framework-utils\";\nimport { splitBracket, isUndefined, isObject, splitUnit, IObject, hasClass, isArray, isString } from \"@daybrush/utils\";\nimport {\n    multiply, invert,\n    convertDimension, createIdentityMatrix,\n    createOriginMatrix, convertPositionMatrix, caculate,\n    multiplies,\n    minus,\n    getOrigin,\n    createScaleMatrix,\n    plus,\n    getRad,\n    ignoreDimension,\n    convertCSStoMatrix,\n    convertMatrixtoCSS,\n} from \"./matrix\";\nimport {\n    MoveableManagerState, Able, MoveableClientRect,\n    MoveableProps, ControlPose, InvertTypes, ArrayFormat, MoveableRefType\n} from \"./types\";\nimport { parse, toMat } from \"css-to-mat\";\n\nexport function round(num: number) {\n    return Math.round(num);\n}\nexport function multiply2(pos1: number[], pos2: number[]) {\n    return [\n        pos1[0] * pos2[0],\n        pos1[1] * pos2[1],\n    ];\n}\nexport function prefix(...classNames: string[]) {\n    return prefixNames(PREFIX, ...classNames);\n}\n\nexport function createIdentityMatrix3() {\n    return createIdentityMatrix(3);\n}\n\nexport function getTransformMatrix(transform: string | number[]) {\n    if (!transform || transform === \"none\") {\n        return [1, 0, 0, 1, 0, 0];\n\n    }\n    if (isObject(transform)) {\n        return transform;\n    }\n    const value = splitBracket(transform).value!;\n    return value.split(/s*,\\s*/g).map(v => parseFloat(v));\n}\nexport function getAbsoluteMatrix(matrix: number[], n: number, origin: number[]) {\n    return multiplies(\n        n,\n        createOriginMatrix(origin, n),\n        matrix,\n        createOriginMatrix(origin.map(a => -a), n),\n    );\n}\nexport function measureSVGSize(el: SVGElement, unit: string, isHorizontal: boolean) {\n    if (unit === \"%\") {\n        const viewBox = getSVGViewBox(el.ownerSVGElement!);\n        return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n    }\n    return 1;\n}\nexport function getBeforeTransformOrigin(el: SVGElement) {\n    const relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\n\n    return relativeOrigin.map((o, i) => {\n        const { value, unit } = splitUnit(o);\n\n        return value * measureSVGSize(el, unit, i === 0);\n    });\n}\nexport function getTransformOrigin(style: CSSStyleDeclaration) {\n    const transformOrigin = style.transformOrigin;\n\n    return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\nexport function getOffsetInfo(\n    el: SVGElement | HTMLElement | null | undefined,\n    lastParent: SVGElement | HTMLElement | null | undefined,\n    isParent?: boolean,\n) {\n    const body = document.body;\n    let target = !el || isParent ? el : el.parentElement;\n    let isEnd = false;\n    let position = \"relative\";\n\n    while (target && target !== body) {\n        if (lastParent === target) {\n            isEnd = true;\n        }\n        const style = getComputedStyle(target);\n        const transform = style.transform;\n        position = style.position!;\n\n        if (position !== \"static\" || (transform && transform !== \"none\")) {\n            break;\n        }\n        target = target.parentElement;\n        position = \"relative\";\n    }\n    return {\n        isStatic: position === \"static\",\n        isEnd: isEnd || !target || target === body,\n        offsetParent: target as HTMLElement || body,\n    };\n\n}\nexport function getOffsetPosInfo(\n    el: HTMLElement | SVGElement,\n    container: SVGElement | HTMLElement | null | undefined,\n    style: CSSStyleDeclaration,\n    isFixed: boolean,\n) {\n    const tagName = el.tagName.toLowerCase();\n    let offsetLeft = (el as HTMLElement).offsetLeft;\n    let offsetTop = (el as HTMLElement).offsetTop;\n\n    if (isFixed) {\n        const containerClientRect = (container || document.documentElement).getBoundingClientRect();\n\n        offsetLeft -= containerClientRect.left;\n        offsetTop -= containerClientRect.top;\n    }\n    // svg\n    const isSVG = isUndefined(offsetLeft);\n    let hasOffset = !isSVG;\n    let origin: number[];\n    let targetOrigin: number[];\n    // inner svg element\n    if (!hasOffset && tagName !== \"svg\") {\n        origin = IS_WEBKIT\n            ? getBeforeTransformOrigin(el as SVGElement)\n            : getTransformOrigin(style).map(pos => parseFloat(pos));\n\n        targetOrigin = origin.slice();\n        hasOffset = true;\n\n        if (tagName === \"g\") {\n            offsetLeft = 0;\n            offsetTop = 0;\n        } else {\n            [\n                offsetLeft, offsetTop, origin[0], origin[1],\n            ] = getSVGGraphicsOffset(el as SVGGraphicsElement, origin);\n        }\n    } else {\n        origin = getTransformOrigin(style).map(pos => parseFloat(pos));\n        targetOrigin = origin.slice();\n    }\n    return {\n        isSVG,\n        hasOffset,\n        offset: [offsetLeft, offsetTop],\n        origin,\n        targetOrigin,\n    };\n}\nexport function getMatrixStackInfo(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    // prevMatrix?: number[],\n) {\n    let el: SVGElement | HTMLElement | null = target;\n    const matrixes: number[][] = [];\n    let isEnd = false;\n    let is3d = false;\n    let n = 3;\n    let transformOrigin!: number[];\n    let targetTransformOrigin!: number[];\n    let targetMatrix!: number[];\n\n    const offsetContainer = getOffsetInfo(container, container, true).offsetParent;\n\n    // if (prevMatrix) {\n    //     isEnd = target === container;\n    //     if (prevMatrix.length > 10) {\n    //         is3d = true;\n    //         n = 4;\n    //     }\n    //     container = target.parentElement;\n    // }\n\n    while (el && !isEnd) {\n        const style: CSSStyleDeclaration = getComputedStyle(el);\n        const tagName = el.tagName.toLowerCase();\n        const position = style.position;\n        const isFixed = position === \"fixed\";\n        let matrix: number[] = convertCSStoMatrix(getTransformMatrix(style.transform!));\n\n        // convert 3 to 4\n        const length = matrix.length;\n        if (!is3d && length === 16) {\n            is3d = true;\n            n = 4;\n            const matrixesLength = matrixes.length;\n\n            for (let i = 0; i < matrixesLength; ++i) {\n                matrixes[i] = convertDimension(matrixes[i], 3, 4);\n            }\n        }\n        if (is3d && length === 9) {\n            matrix = convertDimension(matrix, 3, 4);\n        }\n        const {\n            hasOffset,\n            isSVG,\n            origin,\n            targetOrigin,\n            offset: offsetPos,\n        } = getOffsetPosInfo(el, container, style, isFixed);\n        let [\n            offsetLeft,\n            offsetTop,\n        ] = offsetPos;\n        if (tagName === \"svg\" && targetMatrix) {\n            matrixes.push(\n                // scale matrix for svg's SVGElements.\n                getSVGMatrix(el as SVGSVGElement, n),\n                createIdentityMatrix(n),\n            );\n        }\n        const {\n            offsetParent,\n            isEnd: isOffsetEnd,\n            isStatic,\n        } = getOffsetInfo(el, container);\n\n        if (IS_WEBKIT && hasOffset && !isSVG && isStatic && (position === \"relative\" || position === \"static\")) {\n            offsetLeft -= offsetParent.offsetLeft;\n            offsetTop -= offsetParent.offsetTop;\n            isEnd = isEnd || isOffsetEnd;\n        }\n        let parentClientLeft = 0;\n        let parentClientTop = 0;\n\n        if (hasOffset && offsetContainer !== offsetParent) {\n            // border\n            parentClientLeft = offsetParent.clientLeft;\n            parentClientTop = offsetParent.clientTop;\n        }\n        matrixes.push(\n            // absolute matrix\n            getAbsoluteMatrix(matrix, n, origin),\n            // offset matrix (offsetPos + clientPos(border))\n            createOriginMatrix(hasOffset ? [\n                offsetLeft - el.scrollLeft + parentClientLeft,\n                offsetTop - el.scrollTop + parentClientTop,\n            ] : [el, origin] as any, n),\n        );\n        if (!targetMatrix) {\n            targetMatrix = matrix;\n        }\n        if (!transformOrigin) {\n            transformOrigin = origin;\n        }\n        if (!targetTransformOrigin) {\n            targetTransformOrigin = targetOrigin;\n        }\n        if (isEnd || isFixed) {\n            break;\n        } else {\n            el = offsetParent;\n            isEnd = isOffsetEnd;\n        }\n    }\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(n);\n    }\n    if (!transformOrigin) {\n        transformOrigin = [0, 0];\n    }\n    if (!targetTransformOrigin) {\n        targetTransformOrigin = [0, 0];\n    }\n    return {\n        offsetContainer,\n        matrixes,\n        targetMatrix,\n        transformOrigin,\n        targetOrigin: targetTransformOrigin,\n        is3d,\n    };\n}\nexport function cacaulateElementInfo(\n    target?: SVGElement | HTMLElement | null,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: HTMLElement | SVGElement | null | undefined = container,\n    isAbsolute3d?: boolean,\n    state?: Partial<MoveableManagerState> | false,\n) {\n    // const prevMatrix = state ? state.beforeMatrix : undefined;\n    // const prevRootMatrix = state ? state.rootMatrix : undefined;\n    // const prevN = state ? (state.is3d ? 4 : 3) : undefined;\n    let width: number = 0;\n    let height: number = 0;\n    let rotation = 0;\n    let allResult: {} = {};\n    if (state) {\n        width = state.width!;\n        height = state.height!;\n    } else if (target) {\n        const style = getComputedStyle(target);\n\n        width = (target as HTMLElement).offsetWidth;\n        height = (target as HTMLElement).offsetHeight;\n\n        if (isUndefined(width)) {\n            [width, height] = getSize(target, style, true);\n        }\n    }\n\n    if (target) {\n        const result = caculateMatrixStack(\n            target, container, rootContainer, isAbsolute3d,\n            // prevMatrix, prevRootMatrix, prevN,\n        );\n        const position = caculateMoveablePosition(\n            result.allMatrix,\n            result.transformOrigin,\n            width, height,\n        );\n        allResult = {\n            ...result,\n            ...position,\n        };\n        rotation = getRotationRad([position.pos1, position.pos2], position.direction);\n    }\n    const n = isAbsolute3d ? 4 : 3;\n    return {\n        width,\n        height,\n        rotation,\n        // rootMatrix: number[];\n        // beforeMatrix: number[];\n        // offsetMatrix: number[];\n        // allMatrix: number[];\n        // targetMatrix: number[];\n        // targetTransform: string;\n        // transformOrigin: number[];\n        // targetOrigin: number[];\n        // is3d: boolean;\n        rootMatrix: createIdentityMatrix(n),\n        beforeMatrix: createIdentityMatrix(n),\n        offsetMatrix: createIdentityMatrix(n),\n        allMatrix: createIdentityMatrix(n),\n        targetMatrix: createIdentityMatrix(n),\n        targetTransform: \"\",\n        transformOrigin: [0, 0],\n        targetOrigin: [0, 0],\n        is3d: !!isAbsolute3d,\n        // left: number;\n        // top: number;\n        // right: number;\n        // bottom: number;\n        // origin: number[];\n        // pos1: number[];\n        // pos2: number[];\n        // pos3: number[];\n        // pos4: number[];\n        // direction: 1 | -1;\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        origin: [0, 0],\n        pos1: [0, 0],\n        pos2: [0, 0],\n        pos3: [0, 0],\n        pos4: [0, 0],\n        direction: 1,\n        ...allResult,\n    };\n}\nexport function getElementInfo(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: SVGElement | HTMLElement | null | undefined = container,\n) {\n    return cacaulateElementInfo(target, container, rootContainer, true);\n}\nexport function caculateMatrixStack(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: SVGElement | HTMLElement | null | undefined = container,\n    isAbsolute3d?: boolean,\n    // prevMatrix?: number[],\n    // prevRootMatrix?: number[],\n    // prevN?: number,\n) {\n    const {\n        matrixes,\n        is3d,\n        targetMatrix: prevTargetMatrix,\n        transformOrigin,\n        targetOrigin,\n        offsetContainer,\n    } = getMatrixStackInfo(target, container); // prevMatrix\n    const {\n        matrixes: rootMatrixes,\n        is3d: isRoot3d,\n    } = getMatrixStackInfo(offsetContainer, rootContainer); // prevRootMatrix\n\n    // if (rootContainer === document.body) {\n    //     console.log(offsetContainer, rootContainer, rootMatrixes);\n    // }\n    const isNext3d = isAbsolute3d || isRoot3d || is3d;\n    const n = isNext3d ? 4 : 3;\n    const isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\n    const originalContainer = container || document.body;\n    let targetMatrix = prevTargetMatrix;\n    // let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    // let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);\n    // let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    let allMatrix = createIdentityMatrix(n);\n    let rootMatrix = createIdentityMatrix(n);\n    let beforeMatrix = createIdentityMatrix(n);\n    let offsetMatrix = createIdentityMatrix(n);\n    const length = matrixes.length;\n    const endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;\n\n    rootMatrixes.reverse();\n    matrixes.reverse();\n\n    if (!is3d && isNext3d) {\n        targetMatrix = convertDimension(targetMatrix, 3, 4);\n        matrixes.forEach((matrix, i) => {\n            matrixes[i] = convertDimension(matrix, 3, 4);\n        });\n    }\n    if (!isRoot3d && isNext3d) {\n        rootMatrixes.forEach((matrix, i) => {\n            rootMatrixes[i] = convertDimension(matrix, 3, 4);\n        });\n    }\n\n    // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\n    // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\n    // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\n\n    // if (!prevRootMatrix) {\n    rootMatrixes.forEach(matrix => {\n        rootMatrix = multiply(rootMatrix, matrix, n);\n    });\n    // }\n    matrixes.forEach((matrix, i) => {\n        if (length - 2 === i) {\n            // length - 3\n            beforeMatrix = allMatrix.slice();\n        }\n        if (length - 1 === i) {\n            // length - 2\n            offsetMatrix = allMatrix.slice();\n        }\n\n        // caculate for SVGElement\n        if (isObject(matrix[n * (n - 1)])) {\n            [matrix[n * (n - 1)], matrix[n * (n - 1) + 1]] =\n                getSVGOffset(\n                    matrix[n * (n - 1)] as any,\n                    endContainer,\n                    n,\n                    matrix[n * (n - 1) + 1] as any,\n                    allMatrix,\n                    matrixes[i + 1],\n                );\n        }\n        allMatrix = multiply(allMatrix, matrix, n);\n    });\n    const isMatrix3d = !isSVGGraphicElement && is3d;\n\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);\n    }\n    const targetTransform = makeMatrixCSS(\n        isSVGGraphicElement && targetMatrix.length === 16\n            ? convertDimension(targetMatrix, 4, 3) : targetMatrix,\n        isMatrix3d,\n    );\n\n    rootMatrix = ignoreDimension(rootMatrix, n, n);\n\n    return {\n        rootMatrix,\n        beforeMatrix,\n        offsetMatrix,\n        allMatrix,\n        targetMatrix,\n        targetTransform,\n        transformOrigin,\n        targetOrigin,\n        is3d: isNext3d,\n    };\n}\nexport function makeMatrixCSS(matrix: number[], is3d: boolean = matrix.length > 9) {\n    return `${is3d ? \"matrix3d\" : \"matrix\"}(${convertMatrixtoCSS(matrix, !is3d).join(\",\")})`;\n}\nexport function getSVGViewBox(el: SVGSVGElement) {\n    const clientWidth = el.clientWidth;\n    const clientHeight = el.clientHeight;\n    const viewBox = el.viewBox;\n    const baseVal = (viewBox && viewBox.baseVal) || { x: 0, y: 0, width: 0, height: 0 };\n\n    return {\n        x: baseVal.x,\n        y: baseVal.y,\n        width: baseVal.width || clientWidth,\n        height: baseVal.height || clientHeight,\n    };\n}\nexport function getSVGMatrix(\n    el: SVGSVGElement,\n    n: number,\n) {\n    const clientWidth = el.clientWidth;\n    const clientHeight = el.clientHeight;\n    const {\n        width: viewBoxWidth,\n        height: viewBoxHeight,\n    } = getSVGViewBox(el);\n    const scaleX = clientWidth / viewBoxWidth;\n    const scaleY = clientHeight / viewBoxHeight;\n\n    const preserveAspectRatio = el.preserveAspectRatio.baseVal;\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n    const align = preserveAspectRatio.align;\n    // 1 : meet 2: slice\n    const meetOrSlice = preserveAspectRatio.meetOrSlice;\n    const svgOrigin = [0, 0];\n    const scale = [scaleX, scaleY];\n    const translate = [0, 0];\n\n    if (align !== 1) {\n        const xAlign = (align - 2) % 3;\n        const yAlign = Math.floor((align - 2) / 3);\n\n        svgOrigin[0] = viewBoxWidth * xAlign / 2;\n        svgOrigin[1] = viewBoxHeight * yAlign / 2;\n\n        const scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n\n        scale[0] = scaleDimension;\n        scale[1] = scaleDimension;\n\n        translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n        translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n    }\n    const scaleMatrix = createScaleMatrix(scale, n);\n    [\n        scaleMatrix[n * (n - 1)],\n        scaleMatrix[n * (n - 1) + 1],\n    ] = translate;\n\n    return getAbsoluteMatrix(\n        scaleMatrix,\n        n,\n        svgOrigin,\n    );\n}\nexport function getSVGGraphicsOffset(\n    el: SVGGraphicsElement,\n    origin: number[],\n) {\n    if (!el.getBBox) {\n        return [0, 0];\n    }\n    const bbox = el.getBBox();\n    const viewBox = getSVGViewBox(el.ownerSVGElement!);\n    const left = bbox.x - viewBox.x;\n    const top = bbox.y - viewBox.y;\n\n    return [\n        left,\n        top,\n        origin[0] - left,\n        origin[1] - top,\n    ];\n}\nexport function caculatePosition(matrix: number[], pos: number[], n: number) {\n    return caculate(matrix, convertPositionMatrix(pos, n), n);\n}\nexport function caculatePoses(matrix: number[], width: number, height: number, n: number) {\n    return [[0, 0], [width, 0], [0, height], [width, height]].map(pos => caculatePosition(matrix, pos, n));\n}\nexport function getRect(poses: number[][]) {\n    const posesX = poses.map(pos => pos[0]);\n    const posesY = poses.map(pos => pos[1]);\n    const left = Math.min(...posesX);\n    const top = Math.min(...posesY);\n    const right = Math.max(...posesX);\n    const bottom = Math.max(...posesY);\n    const rectWidth = right - left;\n    const rectHeight = bottom - top;\n\n    return {\n        left, top,\n        right, bottom,\n        width: rectWidth,\n        height: rectHeight,\n    };\n}\nexport function caculateRect(matrix: number[], width: number, height: number, n: number) {\n    const poses = caculatePoses(matrix, width, height, n);\n\n    return getRect(poses);\n}\nexport function getSVGOffset(\n    el: SVGElement,\n    container: HTMLElement | SVGElement,\n    n: number, origin: number[], beforeMatrix: number[], absoluteMatrix: number[]) {\n\n    const [width, height] = getSize(el, undefined, true);\n    const containerClientRect = container.getBoundingClientRect();\n    const rect = el.getBoundingClientRect();\n    const rectLeft = rect.left - containerClientRect.left + container.scrollLeft - (container.clientLeft || 0);\n    const rectTop = rect.top - containerClientRect.top + container.scrollTop - (container.clientTop || 0);\n    const rectWidth = rect.width;\n    const rectHeight = rect.height;\n    const mat = multiplies(\n        n,\n        beforeMatrix,\n        absoluteMatrix,\n    );\n    const {\n        left: prevLeft,\n        top: prevTop,\n        width: prevWidth,\n        height: prevHeight,\n    } = caculateRect(mat, width, height, n);\n    const posOrigin = caculatePosition(mat, origin, n);\n    const prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n    const rectOrigin = [\n        rectLeft + prevOrigin[0] * rectWidth / prevWidth,\n        rectTop + prevOrigin[1] * rectHeight / prevHeight,\n    ];\n    const offset = [0, 0];\n    let count = 0;\n\n    while (++count < 10) {\n        const inverseBeforeMatrix = invert(beforeMatrix, n);\n        [offset[0], offset[1]] = minus(\n            caculatePosition(inverseBeforeMatrix, rectOrigin, n),\n            caculatePosition(inverseBeforeMatrix, posOrigin, n),\n        );\n        const mat2 = multiplies(\n            n,\n            beforeMatrix,\n            createOriginMatrix(offset, n),\n            absoluteMatrix,\n        );\n        const {\n            left: nextLeft,\n            top: nextTop,\n        } = caculateRect(mat2, width, height, n);\n        const distLeft = nextLeft - rectLeft;\n        const distTop = nextTop - rectTop;\n\n        if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {\n            break;\n        }\n        rectOrigin[0] -= distLeft;\n        rectOrigin[1] -= distTop;\n    }\n    return offset.map(p => Math.round(p));\n}\nexport function caculateMoveablePosition(matrix: number[], origin: number[], width: number, height: number) {\n    const is3d = matrix.length === 16;\n    const n = is3d ? 4 : 3;\n    let [\n        [x1, y1],\n        [x2, y2],\n        [x3, y3],\n        [x4, y4],\n    ] = caculatePoses(matrix, width, height, n);\n    let [originX, originY] = caculatePosition(matrix, origin, n);\n\n    const left = Math.min(x1, x2, x3, x4);\n    const top = Math.min(y1, y2, y3, y4);\n    const right = Math.max(x1, x2, x3, x4);\n    const bottom = Math.max(y1, y2, y3, y4);\n\n    x1 = (x1 - left) || 0;\n    x2 = (x2 - left) || 0;\n    x3 = (x3 - left) || 0;\n    x4 = (x4 - left) || 0;\n\n    y1 = (y1 - top) || 0;\n    y2 = (y2 - top) || 0;\n    y3 = (y3 - top) || 0;\n    y4 = (y4 - top) || 0;\n\n    originX = (originX - left) || 0;\n    originY = (originY - top) || 0;\n\n    const center = [\n        (x1 + x2 + x3 + x4) / 4,\n        (y1 + y2 + y3 + y4) / 4,\n    ];\n    const pos1Rad = getRad(center, [x1, y1]);\n    const pos2Rad = getRad(center, [x2, y2]);\n    const direction: 1 | -1 =\n        (pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI) || (pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI)\n            ? 1 : -1;\n\n    return {\n        left,\n        top,\n        right,\n        bottom,\n        origin: [originX, originY],\n        pos1: [x1, y1],\n        pos2: [x2, y2],\n        pos3: [x3, y3],\n        pos4: [x4, y4],\n        direction,\n    };\n}\nexport function getDistSize(vec: number[]) {\n    return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\nexport function getDiagonalSize(pos1: number[], pos2: number[]) {\n    return getDistSize([\n        pos2[0] - pos1[0],\n        pos2[1] - pos1[1],\n    ]);\n}\nexport function getLineStyle(pos1: number[], pos2: number[], rad: number = getRad(pos1, pos2)) {\n    const width = getDiagonalSize(pos1, pos2);\n\n    return {\n        transform: `translateY(-50%) translate(${pos1[0]}px, ${pos1[1]}px) rotate(${rad}rad)`,\n        width: `${width}px`,\n    };\n}\nexport function getControlTransform(rotation: number, ...poses: number[][]) {\n    const length = poses.length;\n\n    const x = poses.reduce((prev, pos) => prev + pos[0], 0) / length;\n    const y = poses.reduce((prev, pos) => prev + pos[1], 0) / length;\n    return {\n        transform: `translate(${x}px, ${y}px) rotate(${rotation}rad)`,\n    };\n}\nexport function getCSSSize(target: SVGElement | HTMLElement) {\n    const style = window.getComputedStyle(target);\n\n    return [\n        parseFloat(style.width!),\n        parseFloat(style.height!),\n    ];\n}\nexport function getSize(\n    target: SVGElement | HTMLElement,\n    style: CSSStyleDeclaration = window.getComputedStyle(target),\n    isOffset?: boolean,\n    isBoxSizing: boolean = isOffset || style.boxSizing === \"border-box\",\n) {\n    let width = (target as HTMLElement).offsetWidth;\n    let height = (target as HTMLElement).offsetHeight;\n    const hasOffset = !isUndefined(width);\n\n    if ((isOffset || isBoxSizing) && hasOffset) {\n        return [width, height];\n    }\n    if (!hasOffset && target.tagName.toLowerCase() !== \"svg\") {\n        const bbox = (target as SVGGraphicsElement).getBBox();\n        return [bbox.width, bbox.height];\n    }\n\n    width = target.clientWidth;\n    height = target.clientHeight;\n\n    if (isOffset || isBoxSizing) {\n        const borderLeft = parseFloat(style.borderLeftWidth!) || 0;\n        const borderRight = parseFloat(style.borderRightWidth!) || 0;\n        const borderTop = parseFloat(style.borderTopWidth!) || 0;\n        const borderBottom = parseFloat(style.borderBottomWidth!) || 0;\n\n        return [\n            width + borderLeft + borderRight,\n            height + borderTop + borderBottom,\n        ];\n    } else {\n        const paddingLeft = parseFloat(style.paddingLeft!) || 0;\n        const paddingRight = parseFloat(style.paddingRight!) || 0;\n        const paddingTop = parseFloat(style.paddingTop!) || 0;\n        const paddingBottom = parseFloat(style.paddingBottom!) || 0;\n\n        return [\n            width - paddingLeft - paddingRight,\n            height - paddingTop - paddingBottom,\n        ];\n    }\n}\nexport function getRotationRad(\n    poses: number[][],\n    direction: number,\n) {\n    return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\nexport function getTargetInfo(\n    moveableElement?: HTMLElement | null,\n    target?: HTMLElement | SVGElement | null,\n    container?: HTMLElement | SVGElement | null,\n    parentContainer?: HTMLElement | SVGElement | null,\n    rootContainer?: HTMLElement | SVGElement | null,\n    state?: Partial<MoveableManagerState> | false | undefined,\n) {\n    let beforeDirection: 1 | -1 = 1;\n    let beforeOrigin = [0, 0];\n    let targetClientRect = resetClientRect();\n    let containerClientRect = resetClientRect();\n    let moveableClientRect = resetClientRect();\n\n    const result = cacaulateElementInfo(\n        target, container!, rootContainer!, false, state,\n    );\n    if (target) {\n        const n = result.is3d ? 4 : 3;\n        const beforePosition = caculateMoveablePosition(\n            result.offsetMatrix,\n            plus(result.transformOrigin, getOrigin(result.targetMatrix, n)),\n            result.width, result.height,\n        );\n        beforeDirection = beforePosition.direction;\n        beforeOrigin = plus(\n            beforePosition.origin,\n            [beforePosition.left - result.left, beforePosition.top - result.top],\n        );\n\n        targetClientRect = getClientRect(target);\n        containerClientRect = getClientRect(\n            getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body,\n            true,\n        );\n        if (moveableElement) {\n            moveableClientRect = getClientRect(moveableElement);\n        }\n    }\n\n    return {\n        targetClientRect,\n        containerClientRect,\n        moveableClientRect,\n        beforeDirection,\n        beforeOrigin,\n        target,\n        ...result,\n    };\n}\nexport function resetClientRect(): MoveableClientRect {\n    return {\n        left: 0, right: 0,\n        top: 0, bottom: 0,\n        width: 0, height: 0,\n        clientLeft: 0, clientTop: 0,\n        clientWidth: 0, clientHeight: 0,\n        scrollWidth: 0, scrollHeight: 0,\n    };\n}\nexport function getClientRect(el: HTMLElement | SVGElement, isExtends?: boolean) {\n    const { left, width, top, bottom, right, height } = el.getBoundingClientRect();\n\n    const rect: MoveableClientRect = {\n        left,\n        right,\n        top,\n        bottom,\n        width,\n        height,\n    };\n\n    if (isExtends) {\n        rect.clientLeft = el.clientLeft;\n        rect.clientTop = el.clientTop;\n        rect.clientWidth = el.clientWidth;\n        rect.clientHeight = el.clientHeight;\n        rect.scrollWidth = el.scrollWidth;\n        rect.scrollHeight = el.scrollHeight;\n    }\n    return rect;\n}\nexport function getDirection(target: SVGElement | HTMLElement) {\n    if (!target) {\n        return;\n    }\n    const direciton = target.getAttribute(\"data-direction\")!;\n\n    if (!direciton) {\n        return;\n    }\n    const dir = [0, 0];\n\n    (direciton.indexOf(\"w\") > -1) && (dir[0] = -1);\n    (direciton.indexOf(\"e\") > -1) && (dir[0] = 1);\n    (direciton.indexOf(\"n\") > -1) && (dir[1] = -1);\n    (direciton.indexOf(\"s\") > -1) && (dir[1] = 1);\n\n    return dir;\n}\nexport function getAbsolutePoses(poses: number[][], dist: number[]) {\n    return [\n        plus(dist, poses[0]),\n        plus(dist, poses[1]),\n        plus(dist, poses[2]),\n        plus(dist, poses[3]),\n    ];\n}\nexport function getAbsolutePosesByState({\n    left,\n    top,\n    pos1,\n    pos2,\n    pos3,\n    pos4,\n}: {\n    left: number,\n    top: number,\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    pos4: number[],\n}) {\n    return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\nexport function roundSign(num: number) {\n    return Math.round(num % 1 === -0.5 ? num - 1 : num);\n}\nexport function throttle(num: number, unit: number) {\n    if (!unit) {\n        return num;\n    }\n    return Math.round(num / unit) * unit;\n}\nexport function throttleArray(nums: number[], unit: number) {\n    nums.forEach((_, i) => {\n        nums[i] = throttle(nums[i], unit);\n    });\n    return nums;\n}\n\nexport function unset(self: any, name: string) {\n    if (self[name]) {\n        self[name].unset();\n        self[name] = null;\n    }\n}\n\nexport function getOrientationDirection(pos: number[], pos1: number[], pos2: number[]) {\n    return (pos[0] - pos1[0]) * (pos2[1] - pos1[1]) - (pos[1] - pos1[1]) * (pos2[0] - pos1[0]);\n}\nexport function isInside(pos: number[], pos1: number[], pos2: number[], pos3: number[], pos4: number[]) {\n    const k1 = getOrientationDirection(pos, pos1, pos2);\n    const k2 = getOrientationDirection(pos, pos2, pos3);\n    const k3 = getOrientationDirection(pos, pos3, pos1);\n\n    const k4 = getOrientationDirection(pos, pos2, pos3);\n    const k5 = getOrientationDirection(pos, pos3, pos4);\n    const k6 = getOrientationDirection(pos, pos4, pos2);\n    const signs1 = [k1, k2, k3];\n    const signs2 = [k4, k5, k6];\n\n    if (\n        signs1.every(sign => sign >= 0)\n        || signs1.every(sign => sign <= 0)\n        || signs2.every(sign => sign >= 0)\n        || signs2.every(sign => sign <= 0)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function fillParams<T extends IObject<any>>(\n    moveable: any,\n    e: any,\n    params: Pick<T, Exclude<keyof T, \"target\" | \"clientX\" | \"clientY\" | \"inputEvent\" | \"datas\" | \"currentTarget\">>,\n): T {\n    const datas = e.datas;\n\n    if (!datas.datas) {\n        datas.datas = {};\n    }\n    const nextParams = {\n        ...params,\n        target: moveable.state.target,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        inputEvent: e.inputEvent,\n        currentTarget: moveable,\n        datas: datas.datas,\n    } as any;\n\n    if (datas.isStartEvent) {\n        datas.lastEvent = nextParams;\n    } else {\n        datas.isStartEvent = true;\n    }\n    return nextParams;\n}\nexport function fillEndParams<T extends IObject<any>>(\n    moveable: any,\n    e: any,\n    params: Pick<T, Exclude<\n        keyof T,\n        \"target\" | \"clientX\" | \"clientY\" | \"inputEvent\" |\n        \"datas\" | \"currentTarget\" | \"lastEvent\" | \"isDrag\" | \"isDouble\">\n    > & { isDrag?: boolean },\n): T {\n    const datas = e.datas;\n    const isDrag = \"isDrag\" in params ? params.isDrag : e.isDrag;\n\n    if (!datas.datas) {\n        datas.datas = {};\n    }\n\n    return {\n        isDrag,\n        ...params,\n        target: moveable.state.target,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        inputEvent: e.inputEvent,\n        currentTarget: moveable,\n        lastEvent: datas.lastEvent,\n        isDouble: e.isDouble,\n        datas: datas.datas,\n    } as any;\n}\n\nexport function triggerEvent<T extends IObject<any> = MoveableProps, U extends keyof T = string>(\n    moveable: any,\n    name: U,\n    params: T[U] extends ((e: infer P) => any) | undefined ? P : IObject<any>,\n    isManager?: boolean,\n): any {\n    return moveable.triggerEvent(name, params, isManager);\n}\n\nexport function getComputedStyle(el: HTMLElement | SVGElement, pseudoElt?: string | null) {\n    return window.getComputedStyle(el, pseudoElt);\n}\n\nexport function filterAbles(\n    ables: Able[], methods: Array<keyof Able>,\n    triggerAblesSimultaneously?: boolean,\n) {\n    const enabledAbles: IObject<boolean> = {};\n    const ableGroups: IObject<boolean> = {};\n\n    return ables.filter(able => {\n        const name = able.name;\n\n        if (enabledAbles[name] || !methods.some(method => able[method])) {\n            return false;\n        }\n        if (!triggerAblesSimultaneously && able.ableGroup) {\n            if (ableGroups[able.ableGroup]) {\n                return false;\n            }\n            ableGroups[able.ableGroup] = true;\n        }\n        enabledAbles[name] = true;\n        return true;\n    });\n}\n\nexport function getKeepRatioHeight(width: number, isWidth: boolean, ratio: number) {\n    return width * (isWidth ? ratio : 1 / ratio);\n}\nexport function getKeepRatioWidth(height: number, isWidth: boolean, ratio: number) {\n    return height * (isWidth ? 1 / ratio : ratio);\n}\n\nexport function equals(a1: any, a2: any) {\n    return a1 === a2 || (a1 == null && a2 == null);\n}\n\nexport function selectValue<T = any>(...values: any[]): T {\n    const length = values.length - 1;\n    for (let i = 0; i < length; ++i) {\n        const value = values[i];\n\n        if (!isUndefined(value)) {\n            return value;\n        }\n    }\n\n    return values[length];\n}\n\nexport function groupBy<T>(arr: T[], func: (el: T, index: number, arr: T[]) => any) {\n    const groups: T[][] = [];\n    const groupKeys: any[] = [];\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        const keyIndex = groupKeys.indexOf(groupKey);\n        const group = groups[keyIndex] || [];\n\n        if (keyIndex === -1) {\n            groupKeys.push(groupKey);\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function groupByMap<T>(arr: T[], func: (el: T, index: number, arr: T[]) => string | number) {\n    const groups: T[][] = [];\n    const groupKeys: IObject<T[]> = {};\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        let group = groupKeys[groupKey];\n\n        if (!group) {\n            group = [];\n            groupKeys[groupKey] = group;\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function flat<T>(arr: T[][]): T[] {\n    return arr.reduce((prev, cur) => {\n        return prev.concat(cur);\n    }, []);\n}\n\nexport function equalSign(a: number, b: number) {\n    return (a >= 0 && b >= 0) || (a < 0 && b < 0);\n}\n\nexport function maxOffset(...args: number[]) {\n    args.sort((a, b) => Math.abs(b) - Math.abs(a));\n\n    return args[0];\n}\nexport function minOffset(...args: number[]) {\n    args.sort((a, b) => Math.abs(a) - Math.abs(b));\n\n    return args[0];\n}\n\nexport function caculateInversePosition(matrix: number[], pos: number[], n: number) {\n    return caculate(\n        invert(matrix, n),\n        convertPositionMatrix(pos, n),\n        n,\n    );\n}\nexport function convertDragDist(state: MoveableManagerState, e: any) {\n    const {\n        is3d,\n        rootMatrix,\n    } = state;\n    const n = is3d ? 4 : 3;\n    [\n        e.distX, e.distY,\n    ] = caculateInversePosition(rootMatrix, [e.distX, e.distY], n);\n\n    return e;\n}\n\nexport function caculatePadding(\n    matrix: number[], pos: number[],\n    transformOrigin: number[], origin: number[], n: number,\n) {\n    return minus(caculatePosition(matrix, plus(transformOrigin, pos), n), origin);\n}\nexport function checkSize(targetSize: number[], compareSize: number[], isMax: boolean) {\n    return [\n        [compareSize[0], compareSize[0] * targetSize[1] / targetSize[0]],\n        [compareSize[1] * targetSize[0] / targetSize[1], compareSize[1]],\n    ].filter(size => size.every((value, i) => {\n        return isMax ? value <= compareSize[i] : value >= compareSize[i];\n    }))[0] || targetSize;\n}\nexport function caculateBoundSize(\n    size: number[], minSize: number[],\n    maxSize: number[], keepRatio?: boolean,\n) {\n    if (!keepRatio) {\n        return size.map((value, i) => between(value, minSize[i], maxSize[i]));\n    }\n    let [width, height] = size;\n    // width : height = minWidth : minHeight;\n    const [minWidth, minHeight] = checkSize(size, minSize, false);\n    const [maxWidth, maxHeight] = checkSize(size, maxSize, true);\n\n    if (width < minWidth || height < minHeight) {\n        width = minWidth;\n        height = minHeight;\n    } else if (width > maxWidth || height > maxHeight) {\n        width = maxWidth;\n        height = maxHeight;\n    }\n    return [width, height];\n}\n\nexport function convertCSSSize(value: number, size: number, isRelative?: boolean) {\n    return isRelative ? `${value / size * 100}%` : `${value}px`;\n}\n\nexport function moveControlPos(\n    controlPoses: ControlPose[],\n    index: number,\n    dist: number[],\n    isRect?: boolean,\n) {\n    const { direction, sub } = controlPoses[index];\n    const dists = controlPoses.map(() => [0, 0]);\n    const directions = direction ? direction.split(\"\") : [];\n\n    if (isRect && index < 8) {\n        const verticalDirection = directions.filter(dir => dir === \"w\" || dir === \"e\")[0];\n        const horizontalDirection = directions.filter(dir => dir === \"n\" || dir === \"s\")[0];\n\n        dists[index] = dist;\n        controlPoses.forEach((controlPose, i) => {\n            const {\n                direction: controlDir,\n            } = controlPose;\n\n            if (!controlDir) {\n                return;\n            }\n            if (controlDir.indexOf(verticalDirection) > -1) {\n                dists[i][0] = dist[0];\n            }\n            if (controlDir.indexOf(horizontalDirection) > -1) {\n                dists[i][1] = dist[1];\n            }\n        });\n        if (verticalDirection) {\n            dists[1][0] = dist[0] / 2;\n            dists[5][0] = dist[0] / 2;\n        }\n        if (horizontalDirection) {\n            dists[3][1] = dist[1] / 2;\n            dists[7][1] = dist[1] / 2;\n        }\n    } else if (direction && !sub) {\n        directions.forEach(dir => {\n            const isVertical = dir === \"n\" || dir === \"s\";\n\n            controlPoses.forEach((controlPose, i) => {\n                const {\n                    direction: dirDir,\n                    horizontal: dirHorizontal,\n                    vertical: dirVertical,\n                } = controlPose;\n\n                if (!dirDir || dirDir.indexOf(dir) === -1) {\n                    return;\n                }\n                dists[i] = [\n                    isVertical || !dirHorizontal ? 0 : dist[0],\n                    !isVertical || !dirVertical ? 0 : dist[1],\n                ];\n            });\n        });\n    } else {\n        dists[index] = dist;\n    }\n\n    return dists;\n}\n\nexport function getTinyDist(v: number) {\n    return Math.abs(v) <= TINY_NUM ? 0 : v;\n}\n\nexport function directionCondition(e: any) {\n    if (e.isRequest) {\n        if (e.requestAble === \"resizable\" || e.requestAble === \"scalable\") {\n            return e.parentDirection!;\n        } else {\n            return false;\n        }\n    }\n    return hasClass(e.inputEvent.target, prefix(\"direction\"));\n}\n\nexport function invertObject<T extends IObject<any>>(obj: T): InvertTypes<T> {\n    const nextObj: IObject<any> = {};\n\n    for (const name in obj) {\n        nextObj[obj[name]] = name;\n    }\n    return nextObj as any;\n}\n\nexport function getTransform(transforms: string[], index: number) {\n    const beforeFunctionTexts = transforms.slice(0, index < 0 ? undefined : index);\n    const targetFunctionText = transforms[index] || \"\";\n    const afterFunctionTexts = index < 0 ? [] : transforms.slice(index);\n    const beforeFunctions = parse(beforeFunctionTexts);\n    const targetFunctions = parse([targetFunctionText]);\n    const afterFunctions = parse(afterFunctionTexts);\n\n    return {\n        transforms,\n        beforeFunctionMatrix: toMat(beforeFunctions),\n        targetFunctionMatrix: toMat(targetFunctions),\n        afterFunctionMatrix: toMat(afterFunctions),\n        beforeFunctions,\n        targetFunction: targetFunctions[0],\n        afterFunctions,\n        beforeFunctionTexts,\n        targetFunctionText,\n        afterFunctionTexts,\n    };\n}\n\nexport function isArrayFormat<T = any>(arr: any): arr is ArrayFormat<T> {\n    if (!arr || !isObject(arr)) {\n        return false;\n    }\n    return isArray(arr) || \"length\" in arr;\n}\n\nexport function getRefTargets(targets: MoveableRefType | MoveableRefType[]) {\n    if (!targets) {\n        return [];\n    }\n    const userTargets = isArrayFormat(targets) ? [].slice.call(targets) : [targets];\n\n    return userTargets.map(target => {\n        if (!target) {\n            return null;\n        }\n        if (isString(target)) {\n            return target;\n        }\n        if (\"current\" in target) {\n            return target.current;\n        }\n        return target;\n    }) as Array<SVGElement | HTMLElement | string | null | undefined>;\n}\n\nexport function getElementTargets(\n    targets: Array<SVGElement | HTMLElement | string | null | undefined>,\n    selectorMap: IObject<Array<HTMLElement | SVGElement>>,\n) {\n    const elementTargets: Array<SVGElement | HTMLElement> = [];\n    targets.forEach(target => {\n        if (!target) {\n            return;\n        }\n        if (isString(target)) {\n            if (selectorMap[target]) {\n                elementTargets.push(...selectorMap[target]);\n            }\n            return;\n        }\n        elementTargets.push(target);\n    });\n\n    return elementTargets;\n}\n\nexport function between(value: number, min: number, max: number) {\n    return Math.max(min, Math.min(value, max));\n}\n\nexport function minmax(...values: number[]) {\n    return [Math.min(...values), Math.max(...values)];\n}\n","import { triggerEvent, fillParams, fillEndParams } from \"../utils\";\nimport {\n    PinchableProps, Able, SnappableState,\n    OnPinchStart, OnPinch, OnPinchEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\n\n/**\n * @namespace Moveable.Pinchable\n * @description Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n */\nexport default {\n    name: \"pinchable\",\n    updateRect: true,\n    props: {\n        pinchable: Boolean,\n    } as const,\n    events: {\n        onPinchStart: \"pinchStart\",\n        onPinch: \"pinch\",\n        onPinchEnd: \"pinchEnd\",\n        onPinchGroupStart: \"pinchGroupStart\",\n        onPinchGroup: \"pinchGroup\",\n        onPinchGroupEnd: \"pinchGroupEnd\",\n    } as const,\n    dragStart() {\n        return true;\n    },\n    pinchStart(\n        moveable: MoveableManagerInterface<PinchableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, targets, angle, originalDatas } = e;\n        const { pinchable, ables } = moveable.props;\n\n        if (!pinchable) {\n            return false;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}Start` as \"onPinchStart\";\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlStart` as \"dragControlStart\";\n\n        const pinchAbles = (pinchable === true ? moveable.controlAbles : ables!.filter(able => {\n            return pinchable.indexOf(able.name as any) > -1;\n        })).filter(able => able.canPinch && able[controlEventName]);\n\n        const params = fillParams<OnPinchStart>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const result = triggerEvent(moveable, eventName, params);\n\n        datas.isPinch = result !== false;\n        datas.ables = pinchAbles;\n\n        const isPinch = datas.isPinch;\n\n        if (!isPinch) {\n            return false;\n        }\n        pinchAbles.forEach(able => {\n            originalDatas[able.name] = originalDatas[able.name] || {};\n\n            if (!able[controlEventName]) {\n                return;\n            }\n            const ableEvent: any = {\n                ...e,\n                datas: originalDatas[able.name],\n                parentRotate: angle,\n                isPinch: true,\n            };\n            able[controlEventName]!(moveable, ableEvent);\n        });\n\n        moveable.state.snapRenderInfo = {\n            request: e.isRequest,\n            direction: [0, 0],\n        };\n        return isPinch;\n    },\n    pinch(\n        moveable: MoveableManagerInterface<PinchableProps>,\n        e: any,\n    ) {\n        const {\n            datas, scale: pinchScale, distance,\n            originalDatas,\n            inputEvent, targets,\n            angle,\n        } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const parentDistance = distance * (1 - 1 / pinchScale);\n        const params = fillParams<OnPinch>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}` as \"onPinch\";\n        triggerEvent(moveable, eventName, params);\n\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}Control` as \"dragControl\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                datas: originalDatas[able.name],\n                inputEvent,\n                parentDistance,\n                parentRotate: angle,\n                isPinch: true,\n            } as any);\n        });\n        return params;\n    },\n    pinchEnd(\n        moveable: MoveableManagerInterface<PinchableProps>,\n        e: any,\n    ) {\n        const { datas, isPinch, inputEvent, targets, originalDatas } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}End` as \"onPinchEnd\";\n\n        const params = fillEndParams<OnPinchEnd>(moveable, e, { isDrag: isPinch }) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        triggerEvent(moveable, eventName, params);\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlEnd` as \"dragControlEnd\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                isDrag: isPinch,\n                datas: originalDatas[able.name],\n                inputEvent,\n                isPinch: true,\n            } as any);\n        });\n        return isPinch;\n    },\n    pinchGroupStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        return this.pinchStart(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.pinch(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroupEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.pinchEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n};\n\n/**\n * Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n * @name Moveable.Pinchable#pinchable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.pinchable = true;\n */\n\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable.Pinchable\n * @event pinchStart\n * @param {Moveable.Pinchable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable.Pinchable\n * @event pinch\n * @param {Moveable.Pinchable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable.Pinchable\n * @event pinchEnd\n * @param {Moveable.Pinchable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When the group pinch starts, the `pinchGroupStart` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupStart\n * @param {Moveable.Pinchable.OnPinchGroupStart} - Parameters for the `pinchGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupStart\", ({ targets }) => {\n *     console.log(\"onPinchGroupStart\", targets);\n * });\n */\n\n/**\n * When the group pinch, the `pinchGroup` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroup\n * @param {Moveable.Pinchable.OnPinchGroup} - Parameters for the `pinchGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroup\", ({ targets, events }) => {\n *     console.log(\"onPinchGroup\", targets);\n * });\n */\n\n/**\n * When the group pinch finishes, the `pinchGroupEnd` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupEnd\n * @param {Moveable.Pinchable.OnPinchGroupEnd} - Parameters for the `pinchGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onPinchGroupEnd\", targets, isDrag);\n * });\n */\n","import { MoveableManagerState, OnCustomDrag } from \"../types\";\nimport { convertDragDist } from \"../utils\";\n\nexport function setCustomDrag(\n    e: any,\n    state: MoveableManagerState<any>,\n    delta: number[],\n    isPinch: boolean,\n    isConvert: boolean,\n) {\n\n    const result = state.gesto!.move(delta, e.inputEvent);\n    const datas = result.originalDatas || result.datas;\n    const draggableDatas = datas.draggable || (datas.draggable = {});\n\n    return {\n        ...(isConvert ? convertDragDist(state, result) : result),\n        isDrag: true,\n        isPinch: !!isPinch,\n        parentEvent: true,\n        datas: draggableDatas,\n        originalDatas: e.originalDatas,\n    };\n}\n\nexport default class CustomGesto {\n    private prevX = 0;\n    private prevY = 0;\n    private startX = 0;\n    private startY = 0;\n    private isDrag = false;\n    private isFlag = false;\n    private datas: any = {\n        draggable: {},\n    };\n\n    public dragStart(client: number[], e: any) {\n        this.isDrag = false;\n        this.isFlag = false;\n        const originalDatas = e.originalDatas;\n\n        this.datas = originalDatas;\n        if (!originalDatas.draggable) {\n            originalDatas.draggable = {};\n        }\n        return {\n            ...this.move(client, e.inputEvent),\n            type: \"dragstart\",\n        };\n    }\n    public drag(client: number[], inputEvent: any) {\n        return this.move([\n            client[0] - this.prevX,\n            client[1] - this.prevY,\n        ], inputEvent);\n    }\n    public move(delta: number[], inputEvent: any): OnCustomDrag {\n        let clientX!: number;\n        let clientY!: number;\n        if (!this.isFlag) {\n            this.prevX = delta[0];\n            this.prevY = delta[1];\n            this.startX = delta[0];\n            this.startY = delta[1];\n\n            clientX = delta[0];\n            clientY = delta[1];\n\n            this.isFlag = true;\n        } else {\n\n            clientX = this.prevX + delta[0];\n            clientY = this.prevY + delta[1];\n            this.isDrag = true;\n        }\n\n        this.prevX = clientX;\n        this.prevY = clientY;\n\n        return {\n            type: \"drag\",\n            clientX,\n            clientY,\n            inputEvent,\n            isDrag: this.isDrag,\n            distX: clientX - this.startX,\n            distY: clientY - this.startY,\n            deltaX: delta[0],\n            deltaY: delta[1],\n            datas: this.datas.draggable,\n            originalDatas: this.datas,\n            parentEvent: true,\n            parentGesto: this,\n        };\n    }\n}\n","import { Able, MoveableGroupInterface, MoveableManagerInterface } from \"./types\";\nimport CustomGesto, { setCustomDrag } from \"./gesto/CustomGesto\";\n\nexport function fillChildEvents(\n    moveable: MoveableGroupInterface,\n    name: string,\n    e: any,\n): any[] {\n    const datas = e.originalDatas;\n\n    datas.groupable = datas.groupable || {};\n\n    const groupableDatas = datas.groupable;\n\n    groupableDatas.childDatas = groupableDatas.childDatas || [];\n\n    const childDatas = groupableDatas.childDatas;\n    const {\n        inputEvent,\n        isPinch,\n        clientX,\n        clientY,\n        distX,\n        distY,\n    } = e;\n\n    return moveable.moveables.map((child, i) => {\n        childDatas[i] = childDatas[i] || {};\n        childDatas[i][name] = childDatas[i][name] || {};\n\n        return {\n            inputEvent,\n            datas: childDatas[i][name],\n            originalDatas: childDatas[i],\n            isPinch,\n            clientX,\n            clientY,\n            distX,\n            distY,\n        };\n    });\n}\nexport function triggerChildGesto(\n    moveable: MoveableGroupInterface<any, any>,\n    able: Able,\n    type: string,\n    delta: number[],\n    e: any,\n    isConvert: boolean,\n) {\n    const isStart = !!type.match(/Start$/g);\n    const isEnd = !!type.match(/End$/g);\n    const isPinch = e.isPinch;\n    const datas = e.datas;\n    const events = fillChildEvents(moveable, able.name, e);\n\n    const moveables = moveable.moveables;\n    const childs = events.map((ev, i) => {\n        const childMoveable = moveables[i];\n        let childEvent: any = ev;\n\n        if (isStart) {\n            childEvent = new CustomGesto().dragStart(delta, ev);\n        } else {\n            if (!childMoveable.state.gesto) {\n                childMoveable.state.gesto = datas.childGestos[i];\n            }\n            childEvent = setCustomDrag(ev, childMoveable.state, delta, isPinch, isConvert);\n        }\n        const result = (able as any)[type]!(childMoveable,  { ...childEvent, parentFlag: true });\n\n        if (isEnd) {\n            childMoveable.state.gesto = null;\n        }\n        return result;\n    });\n    if (isStart) {\n        datas.childGestos = moveables.map(child => child.state.gesto);\n    }\n    return childs;\n}\nexport function triggerChildAble<T extends Able>(\n    moveable: MoveableGroupInterface<any, any>,\n    able: T,\n    type: keyof T & string,\n    e: any,\n    eachEvent: (movebale: MoveableManagerInterface<any, any>, ev: any) => any = (_, ev) => ev,\n    callback?: (moveable: MoveableManagerInterface<any, any>, ev: any, result: any, index: number) => any,\n) {\n    const isEnd = !!type.match(/End$/g);\n    const events = fillChildEvents(moveable, able.name, e);\n    const moveables = moveable.moveables;\n    const childs = events.map((ev, i) => {\n        const childMoveable = moveables[i];\n        let childEvent = ev;\n\n        childEvent = eachEvent(childMoveable, ev);\n\n        const result = (able as any)[type]!(childMoveable,  { ...childEvent, parentFlag: true });\n\n        result && callback && callback(childMoveable, ev, result, i);\n\n        if (isEnd) {\n            childMoveable.state.gesto = null;\n        }\n        return result;\n    });\n\n    return childs;\n}\n","import {\n    invert, caculate, minus, plus,\n    convertPositionMatrix, average,\n    createScaleMatrix, multiply, fromTranslation, convertDimension,\n} from \"../matrix\";\nimport {\n    caculatePoses, getAbsoluteMatrix, getAbsolutePosesByState,\n    caculatePosition, caculateInversePosition, getTransform\n} from \"../utils\";\nimport { splitUnit, isArray, splitSpace } from \"@daybrush/utils\";\nimport {\n    MoveableManagerState, ResizableProps, MoveableManagerInterface,\n    OnTransformEvent, OnTransformStartEvent, DraggableProps, OnDrag\n} from \"../types\";\nimport Draggable from \"../ables/Draggable\";\nimport { setCustomDrag } from \"./CustomGesto\";\nimport { parse, parseMat } from \"css-to-mat\";\n\nexport function caculatePointerDist(moveable: MoveableManagerInterface, e: any) {\n    const { clientX, clientY, datas } = e;\n    const {\n        moveableClientRect,\n        rootMatrix,\n        is3d,\n        pos1,\n    } = moveable.state;\n    const { left, top } = moveableClientRect;\n    const n = is3d ? 4 : 3;\n    const [posX, posY] = minus(caculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), pos1);\n    const [distX, distY] = getDragDist({ datas, distX: posX, distY: posY });\n\n    return [distX, distY];\n}\n\nexport function setDragStart(moveable: MoveableManagerInterface<any>, { datas }: any) {\n    const {\n        allMatrix,\n        beforeMatrix,\n        is3d,\n        left,\n        top,\n        origin,\n        offsetMatrix,\n        targetMatrix,\n        transformOrigin,\n    } = moveable.state;\n    const n = is3d ? 4 : 3;\n\n    datas.is3d = is3d;\n    datas.matrix = allMatrix;\n    datas.targetMatrix = targetMatrix;\n    datas.beforeMatrix = beforeMatrix;\n    datas.offsetMatrix = offsetMatrix;\n    datas.transformOrigin = transformOrigin;\n    datas.inverseMatrix = invert(allMatrix, n);\n    datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n    datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n    datas.startDragBeforeDist = caculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n    datas.startDragDist = caculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\nexport function resolveTransformEvent(event: any, functionName: string) {\n    const {\n        datas,\n        originalDatas: {\n            beforeRenderable: originalDatas,\n        },\n    } = event;\n\n    const index = datas.transformIndex;\n    const nextTransforms = originalDatas.nextTransforms;\n    const nextTransformAppendedIndexes = originalDatas.nextTransformAppendedIndexes;\n    const nextIndex = index === -1 ? nextTransforms.length\n        : index + nextTransformAppendedIndexes.filter((i: number) => i < index).length;\n\n    const result = getTransform(nextTransforms, nextIndex);\n    const targetFunction = result.targetFunction;\n    const matFunctionName = functionName === \"rotate\" ? \"rotateZ\" : functionName;\n\n    datas.targetAllTransform = multiply(\n        result.beforeFunctionMatrix as number[],\n        result.afterFunctionMatrix as number[],\n        4);\n    datas.beforeFunctionTexts = result.beforeFunctionTexts;\n    datas.afterFunctionTexts = result.afterFunctionTexts;\n    datas.beforeTransform = result.beforeFunctionMatrix;\n    datas.targetTansform = result.targetFunctionMatrix;\n    datas.afterTransform = result.afterFunctionMatrix;\n\n    if (targetFunction.functionName === matFunctionName) {\n        datas.afterFunctionTexts.splice(0, 1);\n        datas.isAppendTransform = false;\n    } else {\n        datas.isAppendTransform = true;\n        originalDatas.nextTransformAppendedIndexes = [...nextTransformAppendedIndexes, nextIndex];\n    }\n}\n\nexport function convertTransformFormat(datas: any, value: any, dist: any) {\n    return `${datas.beforeFunctionTexts.join(\" \")} ${datas.isAppendTransform ? dist : value} ${datas.afterFunctionTexts.join(\" \")}`;\n}\nexport function getTransformDist({ datas, distX, distY }: any) {\n    const [bx, by] = getBeforeDragDist({ datas, distX, distY });\n    // B * [tx, ty] * A = [bx, by] * targetMatrix;\n    // [tx, ty] = B-1 * [bx, by] * targetMatrix * A-1 * [0, 0];\n\n    const res = getTransfromMatrix(datas, fromTranslation([bx, by], 4));\n\n    return caculate(res, convertPositionMatrix([0, 0, 0], 4), 4);\n}\nexport function getTransfromMatrix(datas: any, targetMatrix: number[], isAfter?: boolean) {\n    const {\n        beforeTransform,\n        afterTransform,\n        targetAllTransform,\n    } = datas;\n\n    // B * afterTargetMatrix * A = (targetMatrix * targetAllTransform)\n    // afterTargetMatrix = B-1 * targetMatrix * targetAllTransform * A-1\n    // nextTargetMatrix = (targetMatrix * targetAllTransform)\n    const nextTargetMatrix\n        = isAfter\n        ? multiply(targetAllTransform, targetMatrix, 4)\n        : multiply(targetMatrix, targetAllTransform, 4);\n\n    // res1 = B-1 * nextTargetMatrix\n    const res1 = multiply(invert(beforeTransform, 4), nextTargetMatrix, 4);\n\n    // res3 = res2 * A-1\n    const afterTargetMatrix = multiply(res1, invert(afterTransform, 4), 4);\n\n    return afterTargetMatrix;\n}\nexport function getBeforeDragDist({ datas, distX, distY }: any) {\n    // TT = BT\n    const {\n        inverseBeforeMatrix,\n        is3d,\n        startDragBeforeDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    // ABS_ORIGIN * [distX, distY] = BM * (ORIGIN + [tx, ty])\n    // BM -1 * ABS_ORIGIN * [distX, distY] - ORIGIN = [tx, ty]\n    return minus(\n        caculate(\n            inverseBeforeMatrix,\n            plus(absoluteOrigin, [distX, distY]),\n            n,\n        ),\n        startDragBeforeDist,\n    );\n}\nexport function getDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        inverseBeforeMatrix,\n        inverseMatrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        caculate(\n            isBefore ? inverseBeforeMatrix : inverseMatrix,\n            plus(absoluteOrigin, [distX, distY]),\n            n,\n        ),\n        isBefore ? startDragBeforeDist : startDragDist,\n    );\n}\nexport function getInverseDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        beforeMatrix,\n        matrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        caculate(\n            isBefore ? beforeMatrix : matrix,\n            plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]),\n            n,\n        ),\n        absoluteOrigin,\n    );\n}\n\nexport function caculateTransformOrigin(\n    transformOrigin: string[],\n    width: number,\n    height: number,\n    prevWidth: number = width,\n    prevHeight: number = height,\n    prevOrigin: number[] = [0, 0],\n) {\n\n    if (!transformOrigin) {\n        return prevOrigin;\n    }\n    return transformOrigin.map((pos, i) => {\n        const { value, unit } = splitUnit(pos);\n\n        const prevSize = (i ? prevHeight : prevWidth);\n        const size = (i ? height : width);\n        if (pos === \"%\" || isNaN(value)) {\n            // no value but %\n\n            const measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n\n            return size * measureRatio;\n        } else if (unit !== \"%\") {\n            return value;\n        }\n        return size * value / 100;\n    });\n}\nexport function getPosIndexesByDirection(direction: number[]) {\n    const indexes: number[] = [];\n\n    if (direction[1] >= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(3);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(2);\n        }\n    }\n    if (direction[1] <= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(1);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(0);\n        }\n    }\n    return indexes;\n}\nexport function getPosesByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n    */\n    return getPosIndexesByDirection(direction).map(index => poses[index]);\n}\nexport function getPosByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n    */\n    const nextPoses = getPosesByDirection(poses, direction);\n\n    return [\n        average(...nextPoses.map(pos => pos[0])),\n        average(...nextPoses.map(pos => pos[1])),\n    ];\n}\nexport function getPosByReverseDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)\n    [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)\n    [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)\n    */\n\n    return getPosByDirection(poses, direction.map(dir => -dir));\n}\n\nfunction getDist(\n    startPos: number[],\n    matrix: number[],\n    width: number,\n    height: number,\n    n: number,\n    direction: number[],\n) {\n    const poses = caculatePoses(matrix, width, height, n);\n    const pos = getPosByReverseDirection(poses, direction);\n    const distX = startPos[0] - pos[0];\n    const distY = startPos[1] - pos[1];\n\n    return [distX, distY];\n}\nexport function getNextMatrix(\n    offsetMatrix: number[],\n    targetMatrix: number[],\n    origin: number[],\n    n: number,\n) {\n    return multiply(\n        offsetMatrix,\n        getAbsoluteMatrix(targetMatrix, n, origin),\n        n,\n    );\n}\nexport function getNextTransformMatrix(\n    state: MoveableManagerState<any>,\n    datas: any,\n    transform: string,\n) {\n    const {\n        transformOrigin,\n        offsetMatrix,\n        is3d,\n    } = state;\n    const {\n        beforeTransform,\n        afterTransform,\n    } = datas;\n    const n = is3d ? 4 : 3;\n    const targetTransform = parseMat([transform]);\n\n    return getNextMatrix(\n        offsetMatrix,\n        convertDimension(multiply(multiply(beforeTransform, targetTransform as any, 4), afterTransform, 4), 4, n),\n        transformOrigin,\n        n,\n    );\n}\nexport function scaleMatrix(\n    state: MoveableManagerState<any>,\n    scale: number[],\n) {\n    const {\n        transformOrigin,\n        offsetMatrix,\n        is3d,\n        targetMatrix,\n    } = state;\n    const n = is3d ? 4 : 3;\n\n    return getNextMatrix(\n        offsetMatrix,\n        multiply(targetMatrix, createScaleMatrix(scale, n), n),\n        transformOrigin,\n        n,\n    );\n}\nexport function getScaleDelta(\n    moveable: MoveableManagerInterface<any>,\n    scale: number[],\n    direction: number[],\n    fixedPosition: number[],\n) {\n    const state = moveable.state;\n    const {\n        is3d,\n        left,\n        top,\n        width,\n        height,\n    } = state;\n\n    const n = is3d ? 4 : 3;\n    const groupable = moveable.props.groupable;\n    const nextMatrix = scaleMatrix(moveable.state, scale);\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n\n    const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\n\nexport function fillTransformStartEvent(e: any): OnTransformStartEvent {\n    const originalDatas = e.originalDatas.beforeRenderable;\n    return {\n        setTransform: (transform: string | string[], index: number = -1) => {\n            originalDatas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n            setTransformIndex(e, index);\n        },\n        setTransformIndex: (index: number) => {\n            setTransformIndex(e, index);\n        },\n    };\n}\nexport function setDefaultTransformIndex(e: any) {\n    setTransformIndex(e, -1);\n}\nexport function setTransformIndex(e: any, index: number) {\n    const originalDatas = e.originalDatas.beforeRenderable;\n    const datas = e.datas;\n    datas.transformIndex = index;\n    if (index === -1) {\n        return;\n    }\n    const transform = originalDatas.startTransforms[index];\n\n    if (!transform) {\n        return;\n    }\n    const info = parse([transform]);\n\n    datas.startValue = info[0].functionValue;\n}\nexport function fillOriginalTransform(\n    e: any,\n    transform: string,\n) {\n    const originalDatas = e.originalDatas.beforeRenderable;\n\n    originalDatas.nextTransforms = splitSpace(transform);\n}\nexport function fillTransformEvent(\n    moveable: MoveableManagerInterface<DraggableProps>,\n    nextTransform: string,\n    delta: number[],\n    isPinch: boolean,\n    e: any,\n): OnTransformEvent {\n    fillOriginalTransform(e, nextTransform);\n    return {\n        transform: nextTransform,\n        drag: Draggable.drag(\n            moveable,\n            setCustomDrag(e, moveable.state, delta, isPinch, false),\n        ) as OnDrag,\n    };\n}\nexport function getTranslateDist(\n    moveable: MoveableManagerInterface<any>,\n    transform: string,\n    fixedPosition: number[],\n    fixedDirection: number[],\n    datas: any,\n) {\n    const state = moveable.state;\n    const {\n        left,\n        top,\n    } = state;\n\n    const groupable = moveable.props.groupable;\n    const nextMatrix = getNextTransformMatrix(moveable.state, datas, transform);\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n    // const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n    const nextFixedPosition = getDirectionOffset(moveable, fixedDirection, nextMatrix);\n    const dist = minus(fixedPosition, nextFixedPosition);\n    return minus(dist, [groupLeft, groupTop]);\n}\nexport function getScaleDist(\n    moveable: MoveableManagerInterface<any>,\n    scaleDist: number[],\n    direction: number[],\n    fixedPosition: number[],\n    datas: any,\n) {\n    return getTranslateDist(\n        moveable,\n        `scale(${scaleDist.join(\", \")})`,\n        fixedPosition,\n        direction.map(dir => -dir),\n        datas,\n    );\n}\nexport function getOriginDirection(moveable: MoveableManagerInterface<any>) {\n    const {\n        width,\n        height,\n        transformOrigin,\n    } = moveable.state;\n    return [\n        -1 + transformOrigin[0] / (width / 2),\n        -1 + transformOrigin[1] / (height / 2),\n    ];\n}\nexport function getDirectionOffset(\n    moveable: MoveableManagerInterface, direction: number[],\n    nextMatrix: number[] = moveable.state.allMatrix,\n) {\n    const {\n        width,\n        height,\n        is3d,\n    } = moveable.state;\n    const n = is3d ? 4 : 3;\n    const nextFixedOffset = [\n        width / 2 * (1 + direction[0]),\n        height / 2 * (1 + direction[1]),\n    ];\n    return caculatePosition(nextMatrix, nextFixedOffset, n);\n}\nexport function getRotateDist(\n    moveable: MoveableManagerInterface<any>,\n    rotateDist: number,\n    fixedPosition: number[],\n    datas: any,\n) {\n    const fixedDirection = getOriginDirection(moveable);\n\n    return getTranslateDist(\n        moveable,\n        `rotate(${rotateDist}deg)`,\n        fixedPosition,\n        fixedDirection,\n        datas,\n    );\n}\nexport function getResizeDist(\n    moveable: MoveableManagerInterface<any>,\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPosition: number[],\n    transformOrigin: string[],\n) {\n    const {\n        groupable,\n    } = moveable.props;\n    const {\n        transformOrigin: prevOrigin,\n        targetMatrix,\n        offsetMatrix,\n        is3d,\n        width: prevWidth,\n        height: prevHeight,\n        left,\n        top,\n    } = moveable.state;\n\n    const n = is3d ? 4 : 3;\n    const nextOrigin = caculateTransformOrigin(\n        transformOrigin!,\n        width,\n        height,\n        prevWidth,\n        prevHeight,\n        prevOrigin,\n    );\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n    const nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n    const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\nexport function getStartDirection(\n    moveable: MoveableManagerInterface<ResizableProps>,\n    direction: number[],\n) {\n    if (!direction[0] && !direction[1]) {\n        return [0, 0];\n    }\n    const baseDirection = [-1, -1];\n    return [\n        direction[0] ? direction[0] : baseDirection[0] * -1,\n        direction[1] ? direction[1] : baseDirection[1] * -1,\n    ];\n}\nexport function getAbsoluteFixedPosition(\n    moveable: MoveableManagerInterface<ResizableProps>,\n    direction: number[],\n) {\n    return getPosByReverseDirection(getAbsolutePosesByState(moveable.state), direction);\n}\n","import {\n    SnapInfo, SnappableProps, SnappableState,\n    Guideline, ResizableProps, ScalableProps, SnapOffsetInfo, MoveableManagerInterface} from \"../../types\";\nimport { selectValue, throttle, getAbsolutePosesByState, getRect, groupBy, getTinyDist } from \"../../utils\";\nimport { getPosByDirection, getPosesByDirection } from \"../../gesto/GestoUtils\";\nimport { TINY_NUM } from \"../../consts\";\nimport { minus } from \"../../matrix\";\n\nexport function getGapGuidelines(\n    guidelines: Guideline[],\n    type: \"vertical\" | \"horizontal\",\n    snapThreshold: number,\n    index: number,\n    [start, end]: number[],\n    [otherStart, otherEnd]: number[],\n) {\n    const totalGuidelines: Guideline[] = [];\n    const otherIndex = index ? 0 : 1;\n    const otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n\n    const elementGuidelines\n        = groupBy(guidelines.filter(({ type: guidelineType }) => guidelineType === type), ({ element }) => element)\n            .map(group => group[0])\n            .filter(({ pos, sizes }) => pos[otherIndex] <= otherEnd\n                && otherStart <= pos[otherIndex] + sizes![otherIndex]);\n\n    elementGuidelines.forEach(guideline1 => {\n        const elementStart = guideline1.pos[index];\n        const elementEnd = elementStart + guideline1.sizes![index];\n\n        elementGuidelines.forEach(({\n            pos: guideline2Pos,\n            sizes: guideline2Sizes,\n            element: guideline2Element,\n        }) => {\n            const targetStart = guideline2Pos[index];\n            const targetEnd = targetStart + guideline2Sizes![index];\n            let pos = 0;\n            let gap = 0;\n            let canSnap = true;\n\n            if (elementEnd <= targetStart) {\n                // gap -\n                gap = elementEnd - targetStart;\n                pos = targetEnd - gap;\n\n                if (start < pos - snapThreshold) {\n                    canSnap = false;\n                }\n                // element target moveable\n            } else if (targetEnd <= elementStart) {\n                // gap +\n                gap = elementStart - targetEnd;\n                pos = targetStart - gap;\n\n                if (end > pos + snapThreshold) {\n                    canSnap = false;\n                }\n                // moveable target element\n            } else {\n                return;\n            }\n            if (canSnap) {\n                totalGuidelines.push({\n                    pos: otherType === \"vertical\" ? [pos, guideline2Pos[1]] : [guideline2Pos[0], pos],\n                    element: guideline2Element,\n                    sizes: guideline2Sizes,\n                    size: 0,\n                    type: otherType,\n                    gap,\n                    gapGuidelines: elementGuidelines,\n                });\n            }\n            if (elementEnd <= start && end <= targetStart) {\n                // elementEnd   moveable   target\n                const centerPos = ((targetStart + elementEnd) - (end - start)) / 2;\n\n                if (throttle(start - (centerPos - snapThreshold), 0.1) >= 0) {\n                    totalGuidelines.push({\n                        pos: otherType === \"vertical\" ? [centerPos, guideline2Pos[1]] : [guideline2Pos[0], centerPos],\n                        element: guideline2Element,\n                        sizes: guideline2Sizes,\n                        size: 0,\n                        type: otherType,\n                        gap: elementEnd - start,\n                        gapGuidelines: elementGuidelines,\n                    });\n                }\n            }\n        });\n    });\n    return totalGuidelines;\n}\nexport function addGuidelines(\n    totalGuidelines: Guideline[],\n    width: number,\n    height: number,\n    horizontalGuidelines?: number[] | false,\n    verticalGuidelines?: number[] | false,\n): Guideline[] {\n    horizontalGuidelines && horizontalGuidelines!.forEach(pos => {\n        totalGuidelines.push({ type: \"horizontal\", pos: [0, throttle(pos, 0.1)], size: width! });\n    });\n    verticalGuidelines && verticalGuidelines!.forEach(pos => {\n        totalGuidelines.push({ type: \"vertical\", pos: [throttle(pos, 0.1), 0], size: height! });\n    });\n    return totalGuidelines;\n}\nexport function getTotalGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n) {\n    const {\n        guidelines,\n        containerClientRect: {\n            scrollHeight: containerHeight,\n            scrollWidth: containerWidth,\n        },\n    } = moveable.state;\n    const props = moveable.props;\n    const {\n        snapHorizontal = true,\n        snapVertical = true,\n        snapGap = true,\n        verticalGuidelines,\n        horizontalGuidelines,\n        snapThreshold = 5,\n    } = props;\n    const totalGuidelines: Guideline[] = [...guidelines];\n\n    if (snapGap) {\n        const { top, left, bottom, right } = getRect(getAbsolutePosesByState(moveable.state));\n        const elementGuidelines = (guidelines as Guideline[]).filter(({ element }) => element);\n\n        totalGuidelines.push(...getGapGuidelines(\n            elementGuidelines,\n            \"horizontal\",\n            snapThreshold,\n            0,\n            [left, right],\n            [top, bottom],\n        ), ...getGapGuidelines(\n            elementGuidelines,\n            \"vertical\",\n            snapThreshold,\n            1,\n            [top, bottom],\n            [left, right],\n        ));\n    }\n\n    addGuidelines(\n        totalGuidelines,\n        containerWidth!,\n        containerHeight!,\n        snapHorizontal && horizontalGuidelines,\n        snapVertical && verticalGuidelines,\n    );\n\n    return totalGuidelines;\n}\nexport function checkMoveableSnapPoses(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    posesX: number[],\n    posesY: number[],\n    snapCenter?: boolean,\n    customSnapThreshold?: number,\n) {\n    const totalGuidelines = getTotalGuidelines(moveable);\n    const props = moveable.props;\n    const {\n        snapElement = true,\n    } = props;\n    const snapThreshold = selectValue<number>(customSnapThreshold, props.snapThreshold, 5);\n\n    return checkSnapPoses(\n        totalGuidelines,\n        posesX,\n        posesY,\n        {\n            snapThreshold,\n            snapCenter,\n            snapElement,\n        },\n    );\n}\n\nexport function checkSnapPoses(\n    guidelines: Guideline[],\n    posesX: number[],\n    posesY: number[],\n    options: {\n        snapThreshold?: number,\n        snapCenter?: boolean,\n        snapElement?: boolean,\n    },\n) {\n    return {\n        vertical: checkSnap(guidelines, \"vertical\", posesX, options),\n        horizontal: checkSnap(guidelines, \"horizontal\", posesY, options),\n    };\n}\nexport function checkSnapKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n): {\n    vertical: SnapOffsetInfo,\n    horizontal: SnapOffsetInfo,\n} {\n    const [endX, endY] = endPos;\n    const [startX, startY] = startPos;\n    let [dx, dy] = minus(endPos, startPos);\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    dx = getTinyDist(dx);\n    dy = getTinyDist(dy);\n\n    const verticalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    }\n    const {\n        vertical: verticalSnapInfo,\n        horizontal: horizontalSnapInfo,\n    } = checkMoveableSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []);\n\n    verticalSnapInfo.posInfos.filter(({ pos }) => {\n        return isRight ? pos >= startX : pos <= startX;\n    });\n    horizontalSnapInfo.posInfos.filter(({ pos }) => {\n        return isBottom ? pos >= startY : pos <= startY;\n    });\n    verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\n    horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\n\n    const {\n        isSnap: isVerticalSnap,\n        guideline: verticalGuideline,\n    } = getNearestSnapGuidelineInfo(verticalSnapInfo);\n    const {\n        isSnap: isHorizontalSnap,\n        guideline: horizontalGuideline,\n    } = getNearestSnapGuidelineInfo(horizontalSnapInfo);\n    const horizontalPos = isHorizontalSnap ? horizontalGuideline!.pos[1] : 0;\n    const verticalPos = isVerticalSnap ? verticalGuideline!.pos[0] : 0;\n\n    if (dx === 0) {\n        if (isHorizontalSnap) {\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = horizontalGuideline!.pos[1];\n            horizontalInfo.offset = endY - horizontalInfo.pos;\n        }\n    } else if (dy === 0) {\n        if (isVerticalSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = verticalPos;\n            verticalInfo.offset = endX - verticalPos;\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isSnap = false;\n\n        if (isVerticalSnap) {\n            x = verticalPos;\n            y = a * x + b;\n            isSnap = true;\n        } else if (isHorizontalSnap) {\n            y = horizontalPos;\n            x = (y - b) / a;\n            isSnap = true;\n        }\n        if (isSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\n\nexport function checkSnaps(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    rect: {\n        left?: number,\n        top?: number,\n        bottom?: number,\n        right?: number,\n        center?: number,\n        middle?: number,\n    },\n    isCenter: boolean,\n    customSnapThreshold?: number,\n) {\n    const snapCenter = moveable.props.snapCenter;\n    const isSnapCenter = snapCenter! && isCenter;\n\n    let verticalNames: Array<\"left\" | \"center\" | \"right\"> = [\"left\", \"right\"];\n    let horizontalNames: Array<\"top\" | \"middle\" | \"bottom\"> = [\"top\", \"bottom\"];\n\n    if (isSnapCenter) {\n        verticalNames.push(\"center\");\n        horizontalNames.push(\"middle\");\n    }\n    verticalNames = verticalNames.filter(name => name in rect);\n    horizontalNames = horizontalNames.filter(name => name in rect);\n\n    return checkMoveableSnapPoses(\n        moveable,\n        verticalNames.map(name => rect[name]!),\n        horizontalNames.map(name => rect[name]!),\n        isSnapCenter,\n        customSnapThreshold,\n    );\n}\n\nexport function getNearestSnapGuidelineInfo(\n    snapInfo: SnapInfo,\n) {\n    const isSnap = snapInfo.isSnap;\n\n    if (!isSnap) {\n        return {\n            isSnap: false,\n            offset: 0,\n            dist: -1,\n            pos: 0,\n            guideline: null,\n        };\n    }\n    const posInfo = snapInfo.posInfos[0];\n    const guidelineInfo = posInfo!.guidelineInfos[0];\n    const offset = guidelineInfo!.offset;\n    const dist = guidelineInfo!.dist;\n    const guideline = guidelineInfo!.guideline;\n\n    return {\n        isSnap,\n        offset,\n        dist,\n        pos: posInfo!.pos,\n        guideline,\n    };\n}\n\nfunction checkSnap(\n    guidelines: Guideline[],\n    targetType: \"horizontal\" | \"vertical\",\n    targetPoses: number[],\n    {\n        snapThreshold = 5,\n        snapElement,\n        snapCenter,\n    }: {\n        snapThreshold?: number,\n        snapCenter?: boolean,\n        snapElement?: boolean,\n    } = {},\n): SnapInfo {\n    if (!guidelines || !guidelines.length) {\n        return {\n            isSnap: false,\n            index: -1,\n            posInfos: [],\n        };\n    }\n    const isVertical = targetType === \"vertical\";\n    const posType = isVertical ? 0 : 1;\n\n    const snapPosInfos = targetPoses.map((targetPos, index) => {\n        const guidelineInfos = guidelines.map(guideline => {\n            const { pos } = guideline;\n            const offset = targetPos - pos[posType];\n\n            return {\n                offset,\n                dist: Math.abs(offset),\n                guideline,\n            };\n        }).filter(({ guideline, dist }) => {\n            const { type, center, element } = guideline;\n            if (\n                (!snapElement && element)\n                || (!snapCenter && center)\n                || type !== targetType\n                || dist > snapThreshold\n            ) {\n                return false;\n            }\n            return true;\n        }).sort(\n            (a, b) => a.dist - b.dist,\n        );\n\n        return {\n            pos: targetPos,\n            index,\n            guidelineInfos,\n        };\n    }).filter(snapPosInfo => {\n        return snapPosInfo.guidelineInfos.length > 0;\n    }).sort((a, b) => {\n        return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\n    });\n\n    const isSnap = snapPosInfos.length > 0;\n    return {\n        isSnap,\n        index: isSnap ? snapPosInfos[0].index : -1,\n        posInfos: snapPosInfos,\n    };\n}\n\nexport function getSnapInfosByDirection(\n    moveable: MoveableManagerInterface<SnappableProps & (ResizableProps | ScalableProps), SnappableState>,\n    poses: number[][],\n    snapDirection: number[],\n) {\n    let nextPoses: number[][] = [];\n    if (snapDirection[0] && snapDirection[1]) {\n        nextPoses = [\n            snapDirection,\n            [-snapDirection[0], snapDirection[1]],\n            [snapDirection[0], -snapDirection[1]],\n        ].map(direction => getPosByDirection(poses, direction));\n    } else if (!snapDirection[0] && !snapDirection[1]) {\n        const alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];\n\n        for (let i = 0; i < 4; ++i) {\n            nextPoses.push(alignPoses[i]);\n            nextPoses.push([\n                (alignPoses[i][0] + alignPoses[i + 1][0]) / 2,\n                (alignPoses[i][1] + alignPoses[i + 1][1]) / 2,\n            ]);\n        }\n    } else {\n        if (moveable.props.keepRatio) {\n            nextPoses = [\n                [-1, -1],\n                [-1, 1],\n                [1, -1],\n                [1, 1],\n                snapDirection,\n            ].map(dir => getPosByDirection(poses, dir));\n        } else {\n            nextPoses = getPosesByDirection(poses, snapDirection);\n\n            if (nextPoses.length > 1) {\n                nextPoses.push([\n                    (nextPoses[0][0] + nextPoses[1][0]) / 2,\n                    (nextPoses[0][1] + nextPoses[1][1]) / 2,\n                ]);\n            }\n        }\n    }\n    return checkMoveableSnapPoses(moveable, nextPoses.map(pos => pos[0]), nextPoses.map(pos => pos[1]), true, 1);\n}\n\nexport function checkSnapBoundPriority(\n    a: { isBound: boolean, isSnap: boolean, offset: number },\n    b: { isBound: boolean, isSnap: boolean, offset: number },\n) {\n    const aDist = Math.abs(a.offset);\n    const bDist = Math.abs(b.offset);\n\n    if (a.isBound && b.isBound) {\n        return bDist - aDist;\n    } else if (a.isBound) {\n        return -1;\n    } else if (b.isBound) {\n        return 1;\n    } else if (a.isSnap && b.isSnap) {\n        return bDist - aDist;\n    } else if (a.isSnap) {\n        return -1;\n    } else if (b.isSnap) {\n        return 1;\n    } else if (aDist < TINY_NUM) {\n        return 1;\n    } else if (bDist < TINY_NUM) {\n        return -1;\n    }\n    return aDist - bDist;\n}\nexport function getNearOffsetInfo<T extends { offset: number[], isBound: boolean, isSnap: boolean, sign: number[] }>(\n    offsets: T[],\n    index: number,\n) {\n    return offsets.slice().sort((a, b) => {\n        const aSign = a.sign[index];\n        const bSign = b.sign[index];\n        const aOffset = a.offset[index];\n        const bOffset = b.offset[index];\n        // -1 The positions of a and b do not change.\n        // 1 The positions of a and b are reversed.\n        if (!aSign) {\n            return 1;\n        } else if (!bSign) {\n            return -1;\n        }\n        return checkSnapBoundPriority(\n            { isBound: a.isBound, isSnap: a.isSnap, offset: aOffset },\n            { isBound: b.isBound, isSnap: b.isSnap, offset: bOffset },\n        );\n    })[0];\n}\n","import { maxOffset, getDistSize, throttle, getTinyDist } from \"../../utils\";\nimport { average, rotate, getRad } from \"../../matrix\";\nimport { SnappableProps, DraggableProps, RotatableProps, MoveableManagerInterface } from \"../../types\";\nimport { getDragDist, getPosByDirection, getInverseDragDist } from \"../../gesto/GestoUtils\";\nimport { getNearOffsetInfo } from \"./snap\";\nimport { TINY_NUM } from \"../../consts\";\n\nfunction isStartLine(dot: number[], line: number[][]) {\n    // l    o     => true\n    // o    l    => false\n    const cx = average(line[0][0], line[1][0]);\n    const cy = average(line[0][1], line[1][1]);\n\n    return {\n        vertical: cx <= dot[0],\n        horizontal: cy <= dot[1],\n    };\n}\nfunction hitTestLine(\n    dot: number[],\n    [pos1, pos2]: number[][],\n) {\n    let dx = pos2[0] - pos1[0];\n    let dy = pos2[1] - pos1[1];\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    let test1: number;\n    let test2: number;\n    if (!dx) {\n        test1 = pos1[0];\n        test2 = dot[0];\n    } else if (!dy) {\n        test1 = pos1[1];\n        test2 = dot[1];\n    } else {\n        const a = dy / dx;\n\n        // y = a * (x - pos1) + pos1\n        test1 = a * (dot[0] - pos1[0]) + pos1[1];\n        test2 = dot[1];\n    }\n    return test1 - test2;\n}\nfunction isSameStartLine(dots: number[][], line: number[][], error: number = TINY_NUM) {\n    const centerSign = hitTestLine(dots[0], line) <= 0;\n\n    return dots.slice(1).every(dot => {\n        const value = hitTestLine(dot, line);\n        const sign = value <= 0;\n        return sign === centerSign || Math.abs(value) <= error;\n    });\n}\nfunction checkInnerBoundDot(\n    pos: number,\n    start: number,\n    end: number,\n    isStart: boolean,\n    threshold: number = 0,\n) {\n    if (\n        (isStart && start - threshold <= pos)\n        || (!isStart && pos <= end + threshold)\n    ) {\n        // false 402 565 602 => 37 ([0, 37])\n        // true 400 524.9712603540036 600 => 124 ([124, 0])\n        // true 400 410 600 => 10 ([10, 0])\n        return {\n            isBound: true,\n            offset: isStart ? start - pos : end - pos,\n        };\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\n\nfunction checkInnerBound(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    line: number[][],\n    center: number[],\n) {\n    const bounds = moveable.props.innerBounds;\n\n    if (!bounds) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n    const { left, top, width, height } = bounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n    const {\n        horizontal: isHorizontalStart,\n        vertical: isVerticalStart,\n    } = isStartLine(center, line);\n\n    if (isSameStartLine([\n        center,\n        [left, top],\n        [left + width, top],\n        [left, top + height],\n        [left + width, top + height],\n    ], line)) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n\n    // test vertical\n    const topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart);\n    const bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart);\n\n    // test horizontal\n    const leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart);\n    const rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart);\n\n    const isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\n    const isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\n    const isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\n    const isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\n    const verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\n    const horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\n\n    let offset = [0, 0];\n    let isBound = false;\n    let isAllBound = false;\n\n    if (Math.abs(horizontalOffset) < Math.abs(verticalOffset)) {\n        offset = [verticalOffset, 0];\n        isBound = isVerticalBound;\n        isAllBound = isAllVerticalBound;\n    } else {\n        offset = [0, horizontalOffset];\n        isBound = isHorizontalBound;\n        isAllBound = isAllHorizontalBound;\n    }\n    return {\n        isAllBound,\n        isVerticalBound,\n        isHorizontalBound,\n        isBound,\n        offset,\n    };\n}\n\nfunction checkLineBoundCollision(\n    line: number[][],\n    boundLine: number[][],\n    isStart: boolean,\n    threshold?: number,\n    isRender?: boolean,\n) {\n    const dot1 = line[0];\n    const dot2 = line[1];\n    const boundDot1 = boundLine[0];\n    const boundDot2 = boundLine[1];\n    const dy1 = getTinyDist(dot2[1] - dot1[1]);\n    const dx1 = getTinyDist(dot2[0] - dot1[0]);\n\n    const dy2 = getTinyDist(boundDot2[1] - boundDot1[1]);\n    const dx2 = getTinyDist(boundDot2[0] - boundDot1[0]);\n\n    // dx2 or dy2 is zero\n    if (!dx2) {\n        // vertical\n        if (isRender && !dy1) {\n            // 90deg\n            return {\n                isBound: false,\n                offset: 0,\n            };\n        } else if (dx1) {\n            // const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];\n            const y = dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1];\n\n            // boundDot1[1] <= y  <= boundDot2[1]\n            return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\n        } else {\n            const offset = boundDot1[0] - dot1[0];\n\n            const isBound = Math.abs(offset) <= (threshold || 0);\n\n            return {\n                isBound,\n                offset: isBound ? offset : 0,\n            };\n        }\n    } else if (!dy2) {\n        // horizontal\n        if (isRender && !dx1) {\n            // 90deg\n            return {\n                isBound: false,\n                offset: 0,\n            };\n        } else if (dy1) {\n            // y = a * (x - x1) + y1\n            // x = (y - y1) / a + x1\n            // const a = dy1 / dx1;\n            // const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];\n            const x = (boundDot1[1] - dot1[1]) / (dy1 / dx1) + dot1[0];\n\n            // boundDot1[0] <= x && x <= boundDot2[0]\n            return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\n        } else {\n            const offset = boundDot1[1] - dot1[1];\n\n            const isBound = Math.abs(offset) <= (threshold || 0);\n\n            return {\n                isBound,\n                offset: isBound ? offset : 0,\n            };\n        }\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\nexport function getInnerBoundInfo(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    lines: number[][][],\n    center: number[],\n    datas: any,\n) {\n    return lines.map(([multiple, pos1, pos2]) => {\n        const {\n            isBound,\n            offset,\n            isVerticalBound,\n            isHorizontalBound,\n        } = checkInnerBound(moveable, [pos1, pos2], center);\n\n        const sizeOffset = getDragDist({\n            datas,\n            distX: offset[0],\n            distY: offset[1],\n        }).map((size, i) => size * (multiple[i] ? 2 / multiple[i] : 0));\n\n        return {\n            sign: multiple,\n            isBound,\n            isVerticalBound,\n            isHorizontalBound,\n            isSnap: false,\n            offset: sizeOffset,\n        };\n    });\n}\n\nexport function getInnerBoundDragInfo(\n    moveable: MoveableManagerInterface<SnappableProps & DraggableProps, any>,\n    poses: number[][],\n    datas: any,\n) {\n    const lines = getCheckSnapLines(poses, [0, 0], false).map(([sign, pos1, pos2]) => {\n        return [\n            sign.map(dir => Math.abs(dir) * 2),\n            pos1,\n            pos2,\n        ];\n    });\n    const innerBoundInfo = getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas);\n    const widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\n    const heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\n    let verticalOffset = 0;\n    let horizontalOffset = 0;\n    const isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\n    const isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\n\n    if (isVerticalBound || isHorizontalBound) {\n        [verticalOffset, horizontalOffset] = getInverseDragDist({\n            datas,\n            distX: -widthOffsetInfo.offset[0],\n            distY: -heightOffsetInfo.offset[1],\n        });\n    }\n\n    return {\n        vertical: {\n            isBound: isVerticalBound,\n            offset: verticalOffset,\n        },\n        horizontal: {\n            isBound: isHorizontalBound,\n            offset: horizontalOffset,\n        },\n    };\n}\nexport function getCheckSnapLineDirections(\n    direction: number[],\n    keepRatio: boolean,\n) {\n    const lineDirections: number[][][] = [];\n    const x = direction[0];\n    const y = direction[1];\n    if (x && y) {\n        lineDirections.push(\n            [[0, y * 2], direction, [-x, y]],\n            [[x * 2, 0], direction, [x, -y]],\n        );\n    } else if (x) {\n        // vertcal\n        lineDirections.push(\n            [[x * 2, 0], [x, 1], [x, -1]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[0, -1], [x, -1], [-x, -1]],\n                [[0, 1], [x, 1], [-x, 1]],\n            );\n        }\n    } else if (y) {\n        // horizontal\n        lineDirections.push(\n            [[0, y * 2], [1, y], [-1, y]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[-1, 0], [-1, y], [-1, -y]],\n                [[1, 0], [1, y], [1, -y]],\n            );\n        }\n    } else {\n        // [0, 0] to all direction\n        lineDirections.push(\n            [[-1, 0], [-1, -1], [-1, 1]],\n            [[1, 0], [1, -1], [1, 1]],\n            [[0, -1], [-1, -1], [1, -1]],\n            [[0, 1], [-1, 1], [1, 1]],\n        );\n    }\n\n    return lineDirections;\n}\nexport function getCheckSnapLines(\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n) {\n    return getCheckSnapLineDirections(direction, keepRatio).map(([sign, dir1, dir2]) => {\n        return [\n            sign,\n            getPosByDirection(poses, dir1),\n            getPosByDirection(poses, dir2),\n        ];\n    });\n}\n\nfunction isBoundRotate(\n    relativePoses: number[][],\n    boundDots: number[][],\n    center: number[],\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n    const dots = [\n        center,\n        ...boundDots,\n    ];\n    return [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].some((line, i) => !isSameStartLine(dots, line));\n}\nfunction getDistPointLine([pos1, pos2]: number[][]) {\n    // x = 0, y = 0\n    // d = (ax + by + c) / root(a2 + b2)\n\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return Math.abs(pos1[0]);\n    }\n    if (!dy) {\n        return Math.abs(pos1[1]);\n    }\n    // y - y1 = a(x - x1)\n    // 0 = ax -y + -a * x1 + y1\n\n    const a = dy / dx;\n\n    return Math.abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\n}\nfunction solveReverseLine([pos1, pos2]: number[][]) {\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return [pos1[0], 0];\n    }\n    if (!dy) {\n        return [0, pos1[1]];\n    }\n    const a = dy / dx;\n    // y - y1 = a (x  - x1)\n    // y = ax - a * x1 + y1\n    const b = -a * pos1[0] + pos1[1];\n    // y = ax + b = -1/a x\n    // x = -b / (a + 1 / a)\n    // y = b / (1 + 1 / a^2)\n\n    return [\n        -b / (a + 1 / a),\n        b / ((a * a) + 1),\n    ];\n}\nexport function checkRotateInnerBounds(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, any>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    const bounds = moveable.props.innerBounds;\n    const rad = rotation * Math.PI / 180;\n\n    if (!bounds) {\n        return [];\n    }\n    const {\n        left,\n        top,\n        width,\n        height,\n    } = bounds;\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = left + width - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = top + height - origin[1];\n    const dots = [\n        [relativeLeft, relativeTop],\n        [relativeRight, relativeTop],\n        [relativeLeft, relativeBottom],\n        [relativeRight, relativeBottom],\n    ];\n    const center = getPosByDirection(nextPoses, [0, 0]);\n\n    if (!isBoundRotate(nextPoses, dots, center, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    const dotInfos = dots.map(dot => [\n        getDistSize(dot),\n        getRad([0, 0], dot),\n    ]);\n    [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].forEach(line => {\n        const lineRad = getRad([0, 0], solveReverseLine(line));\n        const lineDist = getDistPointLine(line);\n\n        result.push(...dotInfos\n            .filter(([dotDist]) => {\n                return dotDist && lineDist <= dotDist;\n            })\n            .map(([dotDist, dotRad]) => {\n                const distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\n                const nextRad1 = dotRad + distRad;\n                const nextRad2 = dotRad - distRad;\n\n                return [\n                    rad + nextRad1 - lineRad,\n                    rad + nextRad2 - lineRad,\n                ];\n            })\n            .reduce<number[]>((prev, cur) => {\n                prev.push(...cur);\n                return prev;\n            }, [])\n            .filter(nextRad => !isBoundRotate(prevPoses, dots, center, nextRad))\n            .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n    });\n    return result;\n}\n\nexport function checkInnerBoundPoses(\n    moveable: MoveableManagerInterface<SnappableProps>,\n) {\n    const innerBounds = moveable.props.innerBounds;\n\n    if (!innerBounds) {\n        return {\n            vertical: [],\n            horizontal: [],\n        };\n    }\n    const {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = moveable.getRect();\n    const poses = [pos1, pos2, pos3, pos4];\n    const center = getPosByDirection(poses, [0, 0]);\n    const { left, top, width, height } = innerBounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n\n    const lines = [\n        [pos1, pos2],\n        [pos2, pos4],\n        [pos4, pos3],\n        [pos3, pos1],\n    ];\n\n    const horizontalPoses: number[] = [];\n    const verticalPoses: number[] = [];\n\n    const boundMap = {\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    };\n\n    lines.forEach(line => {\n        const {\n            horizontal: isHorizontalStart,\n            vertical: isVerticalStart,\n        } = isStartLine(center, line);\n\n        // test vertical\n        const topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart, 1, true);\n        const bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart, 1, true);\n\n        // test horizontal\n        const leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart, 1, true);\n        const rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart, 1, true);\n\n        if (topBoundInfo.isBound && !boundMap.top) {\n            horizontalPoses.push(top);\n            boundMap.top = true;\n        }\n        if (bottomBoundInfo.isBound && !boundMap.bottom) {\n            horizontalPoses.push(top + height);\n            boundMap.bottom = true;\n        }\n        if (leftBoundInfo.isBound && !boundMap.left) {\n            verticalPoses.push(left);\n            boundMap.left = true;\n        }\n        if (rightBoundInfo.isBound && !boundMap.right) {\n            verticalPoses.push(left + width);\n            boundMap.right = true;\n        }\n    });\n\n    return {\n        horizontal: horizontalPoses,\n        vertical: verticalPoses,\n    };\n}\n","import { BoundInfo, SnappableProps, BoundType, RotatableProps, MoveableManagerInterface } from \"../../types\";\nimport { rotate, getRad, minus } from \"../../matrix\";\nimport { getDistSize, throttle } from \"../../utils\";\nimport { TINY_NUM } from \"../../consts\";\n\nexport function checkBoundPoses(\n    bounds: BoundType | false | undefined,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n) {\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = bounds || {};\n    const nextBounds = { left, top, right, bottom };\n\n    return {\n        vertical: checkBounds(nextBounds, verticalPoses, true),\n        horizontal: checkBounds(nextBounds, horizontalPoses, false),\n    };\n}\n\nexport function checkBoundKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    startPos: number[],\n    endPos: number[],\n) {\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = moveable.props.bounds || {};\n\n    const [endX, endY] = endPos;\n    let [dx, dy] = minus(endPos, startPos);\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    const verticalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    } else if (dx === 0) {\n        if (isBottom) {\n            if (bottom < endY) {\n                horizontalInfo.pos = bottom;\n                horizontalInfo.offset = endY - bottom;\n            }\n        } else {\n            if (top > endY) {\n                horizontalInfo.pos = top;\n                horizontalInfo.offset = endY - top;\n            }\n        }\n    } else if (dy === 0) {\n        if (isRight) {\n            if (right < endX) {\n                verticalInfo.pos = right;\n                verticalInfo.offset = endX - right;\n            }\n        } else {\n            if (left > endX) {\n                verticalInfo.pos = left;\n                verticalInfo.offset = endX - left;\n            }\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isBound = false;\n\n        if (isRight && right <= endX) {\n            y = a * right + b;\n            x = right;\n            isBound = true;\n        } else if (!isRight && endX <= left) {\n            y = a * left + b;\n            x = left;\n            isBound = true;\n        }\n        if (isBound) {\n            if (y < top || y > bottom) {\n                isBound = false;\n            }\n        }\n        if (!isBound) {\n            if (isBottom && bottom <= endY) {\n                y = bottom;\n                x = (y - b) / a;\n                isBound = true;\n            } else if (!isBottom &&  endY <= top) {\n                y = top;\n                x = (y - b) / a;\n                isBound = true;\n            }\n        }\n        if (isBound) {\n            verticalInfo.isBound = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isBound = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\nfunction checkBounds(\n    bounds: Required<BoundType>,\n    poses: number[],\n    isVertical: boolean,\n): BoundInfo[] {\n    // 0   [100 - 200]  300\n    const startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\n    const endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"];\n\n    // 450\n    const minPos = Math.min(...poses);\n    const maxPos = Math.max(...poses);\n    const boundInfos: BoundInfo[] = [];\n\n    if (startBoundPos + 1 > minPos) {\n        boundInfos.push({\n            isBound: true,\n            offset: minPos - startBoundPos,\n            pos: startBoundPos,\n        });\n    }\n    if (endBoundPos - 1 < maxPos) {\n        boundInfos.push({\n            isBound: true,\n            offset: maxPos - endBoundPos,\n            pos: endBoundPos,\n        });\n    }\n\n    if (!boundInfos.length) {\n        boundInfos.push({\n            isBound: false,\n            offset: 0,\n            pos: 0,\n        });\n    }\n\n    return boundInfos.sort((a, b) => Math.abs(b.offset) - Math.abs(a.offset));\n}\nexport function isBoundRotate(\n    relativePoses: number[][],\n    boundRect: { left: number, top: number, right: number, bottom: number },\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n\n    return nextPoses.some(pos => {\n        return (pos[0] < boundRect.left && Math.abs(pos[0] - boundRect.left) > 0.1)\n            || (pos[0] > boundRect.right && Math.abs(pos[0] - boundRect.right) > 0.1)\n            || (pos[1] < boundRect.top && Math.abs(pos[1] - boundRect.top) > 0.1)\n            || (pos[1] > boundRect.bottom && Math.abs(pos[1] - boundRect.bottom) > 0.1);\n    });\n}\nexport function boundRotate(\n    vec: number[],\n    boundPos: number,\n    index: number,\n) {\n    const r = getDistSize(vec);\n    const nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\n\n    return [nextPos, -nextPos].sort((a, b) => {\n        return Math.abs(a - vec[index ? 0 : 1]) - Math.abs(b - vec[index ? 0 : 1]);\n    }).map(pos => {\n        return getRad([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\n    });\n}\n\nexport function checkRotateBounds(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, any>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    const bounds = moveable.props.bounds;\n    const rad = rotation * Math.PI / 180;\n\n    if (!bounds) {\n        return [];\n    }\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = bounds;\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = right - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = bottom - origin[1];\n    const boundRect = {\n        left: relativeLeft,\n        top: relativeTop,\n        right: relativeRight,\n        bottom: relativeBottom,\n    };\n\n    if (!isBoundRotate(nextPoses, boundRect, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    [\n        [relativeLeft, 0],\n        [relativeRight, 0],\n        [relativeTop, 1],\n        [relativeBottom, 1],\n    ].forEach(([boundPos, index], i) => {\n        nextPoses.forEach(nextPos => {\n            const relativeRad1 = getRad([0, 0], nextPos);\n\n            result.push(...boundRotate(nextPos, boundPos, index)\n                .map(relativeRad2 => rad + relativeRad2 - relativeRad1)\n                .filter(nextRad => !isBoundRotate(prevPoses, boundRect, nextRad))\n                .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n        });\n    });\n\n    return result;\n}\n","\nimport {\n    Renderer,\n    SnappableProps,\n    SnappableState, Guideline,\n    SnapInfo, BoundInfo,\n    ScalableProps, SnapPosInfo, RotatableProps,\n    RectInfo, DraggableProps, SnapOffsetInfo, GapGuideline,\n    SnappableOptions, MoveableClientRect, MoveableManagerInterface, SnappableRenderType, BoundType, SnapBoundInfo,\n} from \"../types\";\nimport {\n    prefix, caculatePoses, getRect,\n    getAbsolutePosesByState, getAbsolutePoses, throttle, roundSign,\n    getDistSize, groupBy, flat, maxOffset, minOffset,\n    triggerEvent, caculateInversePosition, caculatePosition,\n    directionCondition,\n} from \"../utils\";\nimport { IObject, find, findIndex, hasClass } from \"@daybrush/utils\";\nimport {\n    getPosByReverseDirection,\n    getDragDist, scaleMatrix, getPosByDirection,\n} from \"../gesto/GestoUtils\";\nimport { minus, rotate, plus, getRad } from \"../matrix\";\nimport {\n    dragControlCondition as rotatableDragControlCondtion,\n} from \"./Rotatable\";\nimport { TINY_NUM } from \"../consts\";\nimport {\n    getInnerBoundInfo, getCheckSnapLines,\n    getInnerBoundDragInfo, checkRotateInnerBounds, checkInnerBoundPoses,\n} from \"./snappable/innerBounds\";\nimport { checkBoundPoses, checkRotateBounds, checkBoundKeepRatio } from \"./snappable/bounds\";\nimport {\n    checkSnaps, getSnapInfosByDirection,\n    checkMoveableSnapPoses, getNearestSnapGuidelineInfo,\n    getNearOffsetInfo,\n    checkSnapKeepRatio,\n    checkSnapPoses,\n} from \"./snappable/snap\";\n\nexport function caculateContainerPos(\n    rootMatrix: number[],\n    containerRect: MoveableClientRect,\n    n: number,\n) {\n    const clientPos = caculatePosition(\n        rootMatrix, [containerRect.clientLeft!, containerRect.clientTop!], n);\n\n    return [\n        containerRect.left + clientPos[0],\n        containerRect.top + clientPos[1],\n    ];\n}\nexport function snapStart(moveable: MoveableManagerInterface<SnappableProps, SnappableState>) {\n    const state = moveable.state;\n\n    if (state.guidelines && state.guidelines.length) {\n        return;\n    }\n\n    const {\n        horizontalGuidelines = [],\n        verticalGuidelines = [],\n        elementGuidelines = [],\n        bounds,\n        innerBounds,\n        snapCenter,\n    } = moveable.props;\n\n    if (\n        !innerBounds && !bounds\n        && !horizontalGuidelines.length\n        && !verticalGuidelines.length && !elementGuidelines.length\n    ) {\n        return;\n    }\n\n    const {\n        containerClientRect,\n        targetClientRect: {\n            top: clientTop,\n            left: clientLeft,\n        },\n        rootMatrix,\n        is3d,\n    } = state;\n    const n = is3d ? 4 : 3;\n    const [containerLeft, containerTop] = caculateContainerPos(rootMatrix, containerClientRect, n);\n    const poses = getAbsolutePosesByState(state);\n    const targetLeft = Math.min(...poses.map(pos => pos[0]));\n    const targetTop = Math.min(...poses.map(pos => pos[1]));\n    const [distLeft, distTop] = minus([targetLeft, targetTop], caculateInversePosition(rootMatrix, [\n        clientLeft - containerLeft,\n        clientTop - containerTop,\n    ], n)).map(pos => roundSign(pos));\n\n    const guidelines: Guideline[] = [];\n\n    elementGuidelines!.forEach(el => {\n        const rect = el.getBoundingClientRect();\n        const left = rect.left - containerLeft;\n        const top = rect.top - containerTop;\n        const bottom = top + rect.height;\n        const right = left + rect.width;\n        const [elementLeft, elementTop] = caculateInversePosition(rootMatrix, [left, top], n);\n        const [elementRight, elementBottom] = caculateInversePosition(rootMatrix, [right, bottom], n);\n        const width = elementRight - elementLeft;\n        const height = elementBottom - elementTop;\n        const sizes = [width, height];\n\n        guidelines.push({\n            type: \"vertical\", element: el, pos: [\n                throttle(elementLeft + distLeft, 0.1),\n                elementTop,\n            ], size: height,\n            sizes,\n        });\n        guidelines.push({\n            type: \"vertical\", element: el, pos: [\n                throttle(elementRight + distLeft, 0.1),\n                elementTop,\n            ], size: height,\n            sizes,\n        });\n        guidelines.push({\n            type: \"horizontal\", element: el, pos: [\n                elementLeft,\n                throttle(elementTop + distTop, 0.1),\n            ], size: width,\n            sizes,\n        });\n        guidelines.push({\n            type: \"horizontal\", element: el, pos: [\n                elementLeft,\n                throttle(elementBottom + distTop, 0.1),\n            ], size: width,\n            sizes,\n        });\n\n        if (snapCenter) {\n            guidelines.push({\n                type: \"vertical\",\n                element: el,\n                pos: [\n                    throttle((elementLeft + elementRight) / 2 + distLeft, 0.1),\n                    elementTop,\n                ],\n                size: height,\n                sizes,\n                center: true,\n            });\n            guidelines.push({\n                type: \"horizontal\",\n                element: el,\n                pos: [\n                    elementLeft,\n                    throttle((elementTop + elementBottom) / 2 + distTop, 0.1),\n                ],\n                size: width,\n                sizes,\n                center: true,\n            });\n        }\n    });\n\n    state.guidelines = guidelines;\n    state.enableSnap = true;\n}\n\nexport function hasGuidelines(\n    moveable: MoveableManagerInterface<any, any>,\n    ableName: string,\n): moveable is MoveableManagerInterface<SnappableProps, SnappableState> {\n    const {\n        props: {\n            snappable,\n            bounds,\n            innerBounds,\n            verticalGuidelines,\n            horizontalGuidelines,\n        },\n        state: {\n            guidelines,\n            enableSnap,\n        },\n    } = moveable;\n\n    if (\n        !snappable\n        || !enableSnap\n        || (ableName && snappable !== true && snappable.indexOf(ableName) < 0)\n    ) {\n        return false;\n    }\n    if (\n        bounds || innerBounds\n        || (guidelines && guidelines.length)\n        || (verticalGuidelines && verticalGuidelines.length)\n        || (horizontalGuidelines && horizontalGuidelines.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction solveNextOffset(\n    pos1: number[],\n    pos2: number[],\n    offset: number,\n    isVertical: boolean,\n    datas: IObject<any>,\n) {\n    const sizeOffset = solveEquation(\n        pos1,\n        pos2,\n        offset,\n        isVertical,\n    );\n\n    if (!sizeOffset) {\n        return [0, 0];\n    }\n    const [widthOffset, heightOffset] = getDragDist({\n        datas,\n        distX: sizeOffset[0],\n        distY: sizeOffset[1],\n    });\n\n    return [widthOffset, heightOffset];\n}\nfunction getNextFixedPoses(\n    matrix: number[],\n    width: number,\n    height: number,\n    fixedPos: number[],\n    direction: number[],\n    is3d: boolean,\n) {\n    const nextPoses = caculatePoses(matrix, width, height, is3d ? 4 : 3);\n    const nextPos = getPosByReverseDirection(nextPoses, direction);\n\n    return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));\n}\nfunction getSnapBoundOffset(boundInfo: BoundInfo, snapInfo: SnapOffsetInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return snapInfo.offset;\n    }\n    return 0;\n}\nfunction getSnapBound(boundInfo: BoundInfo, snapInfo: SnapInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return getNearestSnapGuidelineInfo(snapInfo).offset;\n    }\n    return 0;\n}\nexport function checkSnapBoundsKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n    isRequest: boolean,\n) {\n    const {\n        horizontal: horizontalBoundInfo,\n        vertical: verticalBoundInfo,\n    } = checkBoundKeepRatio(\n        moveable,\n        startPos,\n        endPos,\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = isRequest ? {\n        horizontal: { isSnap: false },\n        vertical: { isSnap: false },\n    } as any : checkSnapKeepRatio(\n        moveable,\n        startPos,\n        endPos,\n    );\n\n    const horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);\n    const verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);\n\n    const horizontalDist = Math.abs(horizontalOffset);\n    const verticalDist = Math.abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfo.isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n        },\n        vertical: {\n            isBound: verticalBoundInfo.isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            offset: verticalOffset,\n            dist: verticalDist,\n        },\n    };\n}\nexport function checkMoveableSnapBounds(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    isRequest: boolean,\n    poses: number[][],\n    boundPoses: number[][] = poses,\n): {\n    vertical: SnapBoundInfo,\n    horizontal: SnapBoundInfo,\n} {\n    const {\n        horizontal: horizontalBoundInfos,\n        vertical: verticalBoundInfos,\n    } = checkBoundPoses(\n        moveable.props.bounds,\n        boundPoses.map(pos => pos[0]),\n        boundPoses.map(pos => pos[1]),\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = isRequest ? {\n        horizontal: { isSnap: false, index: -1 } as SnapInfo,\n        vertical: { isSnap: false, index: -1 } as SnapInfo,\n    } : checkMoveableSnapPoses(\n        moveable,\n        poses.map(pos => pos[0]),\n        poses.map(pos => pos[1]),\n    );\n\n    const horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\n    const verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\n\n    const horizontalDist = Math.abs(horizontalOffset);\n    const verticalDist = Math.abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfos[0].isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            snapIndex: horizontalSnapInfo.index,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n            bounds: horizontalBoundInfos,\n            snap: horizontalSnapInfo,\n        },\n        vertical: {\n            isBound: verticalBoundInfos[0].isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            snapIndex: verticalSnapInfo.index,\n            offset: verticalOffset,\n            dist: verticalDist,\n            bounds: verticalBoundInfos,\n            snap: verticalSnapInfo,\n        },\n    };\n}\nexport function checkSnapBounds(\n    guideines: Guideline[],\n    bounds: BoundType | undefined | false,\n    posesX: number[],\n    posesY: number[],\n    options: {\n        isRequest?: boolean,\n        snapThreshold?: number,\n        snapCenter?: boolean,\n        snapElement?: boolean,\n    } = {},\n): {\n    vertical: SnapBoundInfo,\n    horizontal: SnapBoundInfo,\n} {\n    const {\n        horizontal: horizontalBoundInfos,\n        vertical: verticalBoundInfos,\n    } = checkBoundPoses(\n        bounds,\n        posesX,\n        posesY,\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = options.isRequest ? {\n        horizontal: { isSnap: false, index: -1 } as SnapInfo,\n        vertical: { isSnap: false, index: -1 } as SnapInfo,\n    } : checkSnapPoses(\n        guideines,\n        posesX,\n        posesY,\n        options,\n    );\n\n    const horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);\n    const verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);\n\n    const horizontalDist = Math.abs(horizontalOffset);\n    const verticalDist = Math.abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfos[0].isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            snapIndex: horizontalSnapInfo.index,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n            bounds: horizontalBoundInfos,\n            snap: horizontalSnapInfo,\n        },\n        vertical: {\n            isBound: verticalBoundInfos[0].isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            snapIndex: verticalSnapInfo.index,\n            offset: verticalOffset,\n            dist: verticalDist,\n            bounds: verticalBoundInfos,\n            snap: verticalSnapInfo,\n        },\n    };\n}\nexport function normalized(value: number) {\n    return value ? value / Math.abs(value) : 0;\n}\nexport function checkMaxBounds(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    poses: number[][],\n    direction: number[],\n    fixedPos: number[],\n    datas: any,\n) {\n    const fixedDirection = [-direction[0], -direction[1]];\n    const {\n        width,\n        height,\n    } = moveable.state;\n    const bounds = moveable.props.bounds;\n    let maxWidth = Infinity;\n    let maxHeight = Infinity;\n\n    if (bounds) {\n        const directions = [\n            [direction[0], -direction[1]],\n            [-direction[0], direction[1]],\n        ];\n        const {\n            left = -Infinity,\n            top = -Infinity,\n            right = Infinity,\n            bottom = Infinity,\n        } = bounds;\n\n        directions.forEach(otherDirection => {\n            const isCheckVertical = otherDirection[0] !== fixedDirection[0];\n            const isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\n            const otherPos = getPosByDirection(poses, otherDirection);\n\n            const verticalDirection = normalized(otherDirection[1] - fixedDirection[1]);\n            const horizontalDirection = normalized(otherDirection[0] - fixedDirection[0]);\n            const deg = getRad(fixedPos, otherPos) * 360 / Math.PI;\n\n            if (isCheckHorizontal) {\n                const nextOtherPos = otherPos.slice();\n\n                if (Math.abs(deg - 360) < 2 || Math.abs(deg - 180) < 2) {\n                    nextOtherPos[1] = fixedPos[1];\n                }\n                const [\n                    ,\n                    heightOffset,\n                ] = solveNextOffset(\n                    fixedPos, nextOtherPos,\n                    (fixedPos[1] < otherPos[1] ? bottom : top) - otherPos[1],\n                    false, datas,\n                );\n                if (!isNaN(heightOffset)) {\n                    maxHeight = height + verticalDirection * heightOffset;\n                }\n            }\n            if (isCheckVertical) {\n                const nextOtherPos = otherPos.slice();\n\n                if (Math.abs(deg - 90) < 2 || Math.abs(deg - 270) < 2) {\n                    nextOtherPos[0] = fixedPos[0];\n                }\n                const [\n                    widthOffset,\n                ] = solveNextOffset(\n                    fixedPos, nextOtherPos,\n                    (fixedPos[0] < otherPos[0] ? right : left) - otherPos[0],\n                    true, datas,\n                );\n                if (!isNaN(widthOffset)) {\n                    maxWidth = width + horizontalDirection * widthOffset;\n                }\n            }\n        });\n    }\n    return {\n        maxWidth,\n        maxHeight,\n    };\n}\nfunction getSnapBoundInfo(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    directions: number[][][],\n    keepRatio: boolean,\n    isRequest: boolean,\n    datas: any,\n) {\n    return directions.map(([startDirection, endDirection]) => {\n        const otherStartPos = getPosByDirection(poses, startDirection);\n        const otherEndPos = getPosByDirection(poses, endDirection);\n        const snapBoundInfo\n            = keepRatio\n                ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos, isRequest)\n                : checkMoveableSnapBounds(moveable, isRequest, [otherEndPos]);\n\n        const {\n            horizontal: {\n                dist: otherHorizontalDist,\n                offset: otherHorizontalOffset,\n                isBound: isOtherHorizontalBound,\n                isSnap: isOtherHorizontalSnap,\n            },\n            vertical: {\n                dist: otherVerticalDist,\n                offset: otherVerticalOffset,\n                isBound: isOtherVerticalBound,\n                isSnap: isOtherVerticalSnap,\n            },\n        } = snapBoundInfo;\n\n        const multiple = minus(endDirection, startDirection);\n\n        if (!otherVerticalOffset && !otherHorizontalOffset) {\n            return {\n                isBound: isOtherVerticalBound || isOtherHorizontalBound,\n                isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\n                sign: multiple,\n                offset: [0, 0],\n            };\n        }\n        const isVertical = otherHorizontalDist < otherVerticalDist;\n        const sizeOffset = solveNextOffset(\n            otherStartPos,\n            otherEndPos,\n            -(isVertical ? otherVerticalOffset : otherHorizontalOffset),\n            isVertical,\n            datas,\n        ).map((size, i) => size * (multiple[i] ? 2 / multiple[i] : 0));\n\n        return {\n            sign: multiple,\n            isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\n            isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\n            offset: sizeOffset,\n        };\n    });\n}\nexport function getCheckSnapDirections(\n    direction: number[],\n    keepRatio: boolean,\n) {\n    const directions: number[][][] = [];\n    const fixedDirection = [-direction[0], -direction[1]];\n\n    if (direction[0] && direction[1]) {\n        directions.push(\n            [fixedDirection, [direction[0], -direction[1]]],\n            [fixedDirection, [-direction[0], direction[1]]],\n        );\n        if (keepRatio) {\n            // pass two direction condition\n            directions.push(\n                [fixedDirection, direction],\n            );\n        }\n    } else if (direction[0]) {\n        // vertcal\n        if (keepRatio) {\n            directions.push(\n                [fixedDirection, [fixedDirection[0], -1]],\n                [fixedDirection, [fixedDirection[0], 1]],\n                [fixedDirection, [direction[0], -1]],\n                [fixedDirection, direction],\n                [fixedDirection, [direction[0], 1]],\n            );\n        } else {\n            directions.push(\n                [[fixedDirection[0], -1], [direction[0], -1]],\n                [[fixedDirection[0], 0], [direction[0], 0]],\n                [[fixedDirection[0], 1], [direction[0], 1]],\n            );\n        }\n    } else if (direction[1]) {\n        // horizontal\n        if (keepRatio) {\n            directions.push(\n                [fixedDirection, [-1, fixedDirection[1]]],\n                [fixedDirection, [1, fixedDirection[1]]],\n                [fixedDirection, [-1, direction[1]]],\n                [fixedDirection, [1, direction[1]]],\n                [fixedDirection, direction],\n            );\n        } else {\n            directions.push(\n                [[-1, fixedDirection[1]], [-1, direction[1]]],\n                [[0, fixedDirection[1]], [0, direction[1]]],\n                [[1, fixedDirection[1]], [1, direction[1]]],\n            );\n        }\n    } else {\n        // [0, 0] to all direction\n        directions.push(\n            [fixedDirection, [1, 0]],\n            [fixedDirection, [-1, 0]],\n            [fixedDirection, [0, -1]],\n            [fixedDirection, [0, 1]],\n\n            [[1, 0], [1, -1]],\n            [[1, 0], [1, 1]],\n            [[0, 1], [1, 1]],\n            [[0, 1], [-1, 1]],\n\n            [[-1, 0], [-1, -1]],\n            [[-1, 0], [-1, 1]],\n            [[0, -1], [1, -1]],\n            [[0, -1], [-1, -1]],\n        );\n    }\n\n    return directions;\n}\nexport function getSizeOffsetInfo(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n    isRequest: boolean,\n    datas: any,\n) {\n    const directions = getCheckSnapDirections(direction, keepRatio);\n    const lines = getCheckSnapLines(poses, direction, keepRatio);\n    const offsets = [\n        ...getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas),\n        ...getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas),\n    ];\n    const widthOffsetInfo = getNearOffsetInfo(offsets, 0);\n    const heightOffsetInfo = getNearOffsetInfo(offsets, 1);\n\n    return {\n        width: {\n            isBound: widthOffsetInfo.isBound,\n            offset: widthOffsetInfo.offset[0],\n        },\n        height: {\n            isBound: heightOffsetInfo.isBound,\n            offset: heightOffsetInfo.offset[1],\n        },\n    };\n}\nexport function recheckSizeByTwoDirection(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    width: number,\n    height: number,\n    maxWidth: number,\n    maxHeight: number,\n    direction: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    const snapPos = getPosByDirection(poses, direction);\n\n    const {\n        horizontal: {\n            offset: horizontalOffset,\n        },\n        vertical: {\n            offset: verticalOffset,\n        },\n    } = checkMoveableSnapBounds(moveable, isRequest, [snapPos]);\n\n    if (verticalOffset || horizontalOffset) {\n        const [nextWidthOffset, nextHeightOffset] = getDragDist({\n            datas,\n            distX: -verticalOffset,\n            distY: -horizontalOffset,\n        });\n\n        const nextWidth\n            = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);\n        const nextHeight\n            = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);\n\n        return [\n            nextWidth - width,\n            nextHeight - height,\n        ];\n    }\n    return [\n        0,\n        0,\n    ];\n}\nexport function checkSizeDist(\n    moveable: MoveableManagerInterface<any, any>,\n    getNextPoses: (widthOffset: number, heightOffset: number) => number[][],\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    const poses = getAbsolutePosesByState(moveable.state);\n    const keepRatio = moveable.props.keepRatio;\n\n    let widthOffset = 0;\n    let heightOffset = 0;\n\n    for (let i = 0; i < 2; ++i) {\n        const nextPoses = getNextPoses(widthOffset, heightOffset);\n        const {\n            width: widthOffsetInfo,\n            height: heightOffsetInfo,\n        } = getSizeOffsetInfo(\n            moveable,\n            nextPoses,\n            direction,\n            keepRatio,\n            isRequest,\n            datas,\n        );\n\n        const isWidthBound = widthOffsetInfo.isBound;\n        const isHeightBound = heightOffsetInfo.isBound;\n        let nextWidthOffset = widthOffsetInfo.offset;\n        let nextHeightOffset = heightOffsetInfo.offset;\n\n        if (i === 1) {\n            if (!isWidthBound) {\n                nextWidthOffset = 0;\n            }\n            if (!isHeightBound) {\n                nextHeightOffset = 0;\n            }\n        }\n        if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\n            return [0, 0];\n        }\n        if (keepRatio) {\n            const widthDist = Math.abs(nextWidthOffset) * (width ? 1 / width : 1);\n            const heightDist = Math.abs(nextHeightOffset) * (height ? 1 / height : 1);\n            const isGetWidthOffset\n                = isWidthBound && isHeightBound ? widthDist < heightDist\n                    : isHeightBound || (!isWidthBound && widthDist < heightDist);\n\n            // height * widthOffset = width * heighOffset\n            if (isGetWidthOffset) {\n                // width : height = ? : heightOffset\n                nextWidthOffset = width * nextHeightOffset / height;\n            } else {\n                // width : height = widthOffset : ?\n                nextHeightOffset = height * nextWidthOffset / width;\n            }\n        }\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    if (direction[0] && direction[1]) {\n        const {\n            maxWidth,\n            maxHeight,\n        } = checkMaxBounds(moveable, poses, direction, fixedPos, datas);\n\n        const [nextWidthOffset, nextHeightOffset] = recheckSizeByTwoDirection(\n            moveable,\n            getNextPoses(widthOffset, heightOffset),\n            width + widthOffset,\n            height + heightOffset,\n            maxWidth,\n            maxHeight,\n            direction,\n            isRequest,\n            datas,\n        );\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    return [\n        widthOffset,\n        heightOffset,\n    ];\n}\n\nexport function checkSnapRotate(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, any>,\n    rect: RectInfo,\n    origin: number[],\n    rotation: number,\n) {\n    if (!hasGuidelines(moveable, \"rotatable\")) {\n        return rotation;\n    }\n\n    const {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = rect;\n    const rad = rotation * Math.PI / 180;\n    const prevPoses = [pos1, pos2, pos3, pos4].map(pos => minus(pos, origin));\n    const nextPoses = prevPoses.map(pos => rotate(pos, rad));\n\n    const result = [\n        ...checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation),\n        ...checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation),\n    ];\n    result.sort((a, b) => Math.abs(a - rotation) - Math.abs(b - rotation));\n\n    if (result.length) {\n        return result[0];\n    } else {\n        return rotation;\n    }\n}\nexport function checkSnapSize(\n    moveable: MoveableManagerInterface<{}, {}>,\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    if (!hasGuidelines(moveable, \"resizable\")) {\n        return [0, 0];\n    }\n    const {\n        allMatrix,\n        is3d,\n    } = moveable.state;\n    return checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                allMatrix,\n                width + widthOffset,\n                height + heightOffset,\n                fixedPos,\n                direction,\n                is3d,\n            );\n        }, width, height, direction, fixedPos, isRequest, datas,\n    );\n}\nexport function checkSnapScale(\n    moveable: MoveableManagerInterface<ScalableProps, any>,\n    scale: number[],\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    const {\n        width,\n        height,\n    } = datas;\n    if (!hasGuidelines(moveable, \"scalable\")) {\n        return [0, 0];\n    }\n    const is3d = datas.is3d;\n    const sizeDist = checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                scaleMatrix(datas, plus(scale, [widthOffset / width, heightOffset / height])),\n                width,\n                height,\n                fixedPos,\n                direction,\n                is3d,\n            );\n        },\n        width, height,\n        direction,\n        fixedPos,\n        isRequest,\n        datas,\n    );\n\n    return [\n        sizeDist[0] / width,\n        sizeDist[1] / height,\n    ];\n}\nexport function solveEquation(\n    pos1: number[],\n    pos2: number[],\n    snapOffset: number,\n    isVertical: boolean,\n) {\n    let dx = pos2[0] - pos1[0];\n    let dy = pos2[1] - pos1[1];\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    if (!dx) {\n        // y = 0 * x + b\n        // only horizontal\n        if (!isVertical) {\n            return [0, snapOffset];\n        }\n        return [0, 0];\n    }\n    if (!dy) {\n        // only vertical\n        if (isVertical) {\n            return [snapOffset, 0];\n        }\n        return [0, 0];\n    }\n    // y = ax + b\n    const a = dy / dx;\n    const b = pos1[1] - a * pos1[0];\n\n    if (isVertical) {\n        // y = a * x + b\n        const y = a * (pos2[0] + snapOffset) + b;\n\n        return [snapOffset, y - pos2[1]];\n    } else {\n        // x = (y - b) / a\n        const x = (pos2[1] + snapOffset - b) / a;\n\n        return [x - pos2[0], snapOffset];\n    }\n}\n\nexport function startCheckSnapDrag(\n    moveable: MoveableManagerInterface<any, any>,\n    datas: any,\n) {\n    datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\nexport function checkThrottleDragRotate(\n    throttleDragRotate: number,\n    [distX, distY]: number[],\n    [isVerticalBound, isHorizontalBound]: boolean[],\n    [isVerticalSnap, isHorizontalSnap]: boolean[],\n    [verticalOffset, horizontalOffset]: number[],\n) {\n    let offsetX = -verticalOffset;\n    let offsetY = -horizontalOffset;\n\n    if (throttleDragRotate && distX && distY) {\n        offsetX = 0;\n        offsetY = 0;\n        const adjustPoses: number[][] = [];\n        if (isVerticalBound && isHorizontalBound) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n                [verticalOffset, 0],\n            );\n        } else if (isVerticalBound) {\n            adjustPoses.push(\n                [verticalOffset, 0],\n            );\n        } else if (isHorizontalBound) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n            );\n        } else if (isVerticalSnap && isHorizontalSnap) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n                [verticalOffset, 0],\n            );\n        } else if (isVerticalSnap) {\n            adjustPoses.push(\n                [verticalOffset, 0],\n            );\n        } else if (isHorizontalSnap) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n            );\n        }\n        if (adjustPoses.length) {\n            adjustPoses.sort((a, b) => {\n                return getDistSize(minus([distX, distY], a)) - getDistSize(minus([distX, distY], b));\n            });\n            const adjustPos = adjustPoses[0];\n\n            if (adjustPos[0] && Math.abs(distX) > TINY_NUM) {\n                offsetX = -adjustPos[0];\n                offsetY = distY * Math.abs(distX + offsetX) / Math.abs(distX) - distY;\n            } else if (adjustPos[1] && Math.abs(distY) > TINY_NUM) {\n                const prevDistY = distY;\n                offsetY = -adjustPos[1];\n                offsetX = distX * Math.abs(distY + offsetY) / Math.abs(prevDistY) - distX;\n            }\n            if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\n                if (Math.abs(offsetX) > TINY_NUM && Math.abs(offsetX) < Math.abs(verticalOffset)) {\n                    const scale = Math.abs(verticalOffset) / Math.abs(offsetX);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else if (Math.abs(offsetY) > TINY_NUM && Math.abs(offsetY) < Math.abs(horizontalOffset)) {\n                    const scale = Math.abs(horizontalOffset) / Math.abs(offsetY);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else {\n                    offsetX = maxOffset(-verticalOffset, offsetX);\n                    offsetY = maxOffset(-horizontalOffset, offsetY);\n                }\n            }\n        }\n    } else {\n        offsetX = (distX || isVerticalBound) ? -verticalOffset : 0;\n        offsetY = (distY || isHorizontalBound) ? -horizontalOffset : 0;\n    }\n    return [offsetX, offsetY];\n}\nexport function checkSnapDrag(\n    moveable: MoveableManagerInterface<SnappableProps & DraggableProps, any>,\n    distX: number,\n    distY: number,\n    throttleDragRotate: number,\n    isRequest: boolean,\n    datas: any,\n) {\n\n    if (!hasGuidelines(moveable, \"draggable\")) {\n        return [\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n        ];\n    }\n    const poses = getAbsolutePoses(\n        datas.absolutePoses,\n        [distX, distY],\n    );\n    const { left, right, top, bottom } = getRect(poses);\n    const snapCenter = moveable.props.snapCenter;\n    const snapPoses = [\n        [left, top],\n        [right, top],\n        [left, bottom],\n        [right, bottom],\n    ];\n\n    if (snapCenter) {\n        snapPoses.push([(left + right) / 2, (top + bottom) / 2]);\n    }\n    const {\n        vertical: verticalSnapBoundInfo,\n        horizontal: horizontalSnapBoundInfo,\n    } = checkMoveableSnapBounds(moveable, isRequest, snapPoses, poses);\n    const {\n        vertical: verticalInnerBoundInfo,\n        horizontal: horizontalInnerBoundInfo,\n    } = getInnerBoundDragInfo(moveable, poses, datas);\n\n    const isVerticalSnap = verticalSnapBoundInfo.isSnap;\n    const isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\n    const isVerticalBound\n        = verticalSnapBoundInfo.isBound\n        || verticalInnerBoundInfo.isBound;\n    const isHorizontalBound\n        = horizontalSnapBoundInfo.isBound\n        || horizontalInnerBoundInfo.isBound;\n    const verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);\n    const horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);\n    const [offsetX, offsetY] = checkThrottleDragRotate(\n        throttleDragRotate,\n        [distX, distY],\n        [isVerticalBound, isHorizontalBound],\n        [isVerticalSnap, isHorizontalSnap],\n        [verticalOffset, horizontalOffset],\n    );\n    return [\n        {\n            isBound: isVerticalBound,\n            isSnap: isVerticalSnap,\n            offset: offsetX,\n        },\n        {\n            isBound: isHorizontalBound,\n            isSnap: isHorizontalSnap,\n            offset: offsetY,\n        },\n    ];\n}\n\nfunction getSnapGuidelines(posInfos: SnapPosInfo[]) {\n    const guidelines: Guideline[] = [];\n\n    posInfos.forEach(posInfo => {\n        posInfo.guidelineInfos.forEach(({ guideline }) => {\n            if (guidelines.indexOf(guideline) > -1) {\n                return;\n            }\n            guidelines.push(guideline);\n        });\n    });\n\n    return guidelines;\n}\n\nfunction getElementGuidelineDist(\n    elementPos: number,\n    elementSize: number,\n    targetPos: number,\n    targetSize: number,\n) {\n    // relativePos < 0  => element(l)  ---  (r)target\n    // relativePos > 0  => target(l)   ---  (r)element\n    const relativePos = elementPos - targetPos;\n    const startPos = relativePos < 0 ? relativePos + elementSize : targetSize;\n    const endPos = relativePos < 0 ? 0 : relativePos;\n    const size = endPos - startPos;\n\n    return {\n        size,\n        pos: startPos,\n    };\n}\nfunction groupByElementGuidelines(\n    guidelines: Guideline[],\n    clientPos: number,\n    size: number,\n    index: number,\n) {\n    const groupInfos: Array<[Element, number, any]> = [];\n\n    const group = groupBy(guidelines.filter(({ element, gap }) => element && !gap), ({ element, pos }) => {\n        const elementPos = pos[index];\n        const sign = Math.min(0, elementPos - clientPos) < 0 ? -1 : 1;\n        const groupKey = `${sign}_${pos[index ? 0 : 1]}`;\n        const groupInfo = find(groupInfos, ([groupElement, groupPos]) => {\n            return element === groupElement && elementPos === groupPos;\n        });\n        if (groupInfo) {\n            return groupInfo[2];\n        }\n        groupInfos.push([element!, elementPos, groupKey]);\n        return groupKey;\n    });\n    group.forEach(elementGuidelines => {\n        elementGuidelines.sort((a, b) => {\n            const result = getElementGuidelineDist(a.pos[index], a.size, clientPos, size).size\n                - getElementGuidelineDist(b.pos[index], a.size, clientPos, size).size;\n\n            return result || a.pos[index ? 0 : 1] - b.pos[index ? 0 : 1];\n        });\n    });\n    return group;\n}\nfunction renderElementGroup(\n    group: Guideline[][],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    minPos: number,\n    clientPos: number,\n    clientSize: number,\n    targetPos: number,\n    snapThreshold: number,\n    isDisplaySnapDigit: boolean,\n    snapDigit: number,\n    index: number,\n    snapDistFormat: Required<SnappableOptions>[\"snapDistFormat\"],\n    React: Renderer,\n) {\n    return flat(group.map((elementGuidelines, i) => {\n        let isFirstRenderSize = true;\n\n        return elementGuidelines.map(({ pos, size }, j) => {\n            const {\n                pos: linePos,\n                size: lineSize,\n            } = getElementGuidelineDist(pos[index], size, clientPos, clientSize);\n\n            if (lineSize < snapThreshold) {\n                return null;\n            }\n            const isRenderSize = isFirstRenderSize;\n\n            isFirstRenderSize = false;\n            const snapSize = isDisplaySnapDigit && isRenderSize ? parseFloat(lineSize.toFixed(snapDigit)) : 0;\n\n            return <div className={prefix(\n                \"line\",\n                directionName,\n                \"guideline\",\n                \"dashed\",\n            )}\n                data-size={snapSize > 0 ? snapDistFormat(snapSize) : \"\"}\n                key={`${directionName}LinkGuidline${i}-${j}`} style={{\n                    [posName1]: `${minPos + linePos}px`,\n                    [posName2]: `${-targetPos + pos[index ? 0 : 1]}px`,\n                    [sizeName]: `${lineSize}px`,\n                }} />;\n        });\n    }));\n}\nfunction renderSnapPoses(\n    snapPoses: SnappableRenderType[],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    minPos: number,\n    targetPos: number,\n    size: number,\n    React: Renderer,\n) {\n    return snapPoses.map(({ type, pos }, i) => {\n        return <div className={prefix(\n            \"line\",\n            directionName,\n            \"guideline\",\n            \"target\",\n            \"bold\",\n            type,\n        )} key={`${directionName}TargetGuidline${i}`} style={{\n            [posName1]: `${minPos}px`,\n            [posName2]: `${-targetPos + pos}px`,\n            [sizeName]: `${size}px`,\n        }} />;\n    });\n}\nfunction renderGuidelines(\n    guidelines: Guideline[],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    targetPos1: number,\n    targetPos2: number,\n    index: number,\n    React: Renderer,\n) {\n    return guidelines.map((guideline, i) => {\n        const { pos, size, element } = guideline;\n\n        return <div className={prefix(\n            \"line\",\n            directionName,\n            \"guideline\",\n            element ? \"bold\" : \"\",\n        )} key={`${directionName}Guidline${i}`} style={{\n            [posName1]: `${-targetPos1 + pos[index]}px`,\n            [posName2]: `${-targetPos2 + pos[index ? 0 : 1]}px`,\n            [sizeName]: `${size}px`,\n        }} />;\n    });\n}\n\nfunction getGapGuidelinesToStart(\n    guidelines: Guideline[],\n    index: number,\n    targetPos: number[],\n    targetSizes: number[],\n    guidelinePos: number[],\n    gap: number,\n    otherPos: number,\n): GapGuideline[] {\n    const absGap = Math.abs(gap);\n    let start = guidelinePos[index] + (gap > 0 ? targetSizes[0] : 0);\n\n    return guidelines.filter(({ pos: gapPos }) => gapPos[index] <= targetPos[index])\n        .sort(({ pos: aPos }, { pos: bPos }) => bPos[index] - aPos[index])\n        .filter(({ pos: gapPos, sizes: gapSizes }) => {\n            const nextPos = gapPos[index];\n\n            if (throttle(nextPos + gapSizes![index], 0.0001) === throttle(start - absGap, 0.0001)) {\n                start = nextPos;\n                return true;\n            }\n            return false;\n        }).map(gapGuideline => {\n            const renderPos = -targetPos[index] + gapGuideline.pos[index] + gapGuideline.sizes![index];\n\n            return {\n                ...gapGuideline,\n                gap,\n                renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos],\n            };\n        });\n}\nfunction getGapGuidelinesToEnd(\n    guidelines: Guideline[],\n    index: number,\n    targetPos: number[],\n    targetSizes: number[],\n    guidelinePos: number[],\n    gap: number,\n    otherPos: number,\n): GapGuideline[] {\n    const absGap = Math.abs(gap);\n    let start = guidelinePos[index] + (gap < 0 ? targetSizes[index] : 0);\n\n    return guidelines.filter(({ pos: gapPos }) => gapPos[index] > targetPos[index])\n        .sort(({ pos: aPos }, { pos: bPos }) => aPos[index] - bPos[index])\n        .filter(({ pos: gapPos, sizes: gapSizes }) => {\n            const nextPos = gapPos[index];\n\n            if (throttle(nextPos, 0.0001) === throttle(start + absGap, 0.0001)) {\n                start = nextPos + gapSizes![index];\n                return true;\n            }\n            return false;\n        }).map(gapGuideline => {\n            const renderPos = -targetPos[index] + gapGuideline.pos[index] - absGap;\n\n            return {\n                ...gapGuideline,\n                gap,\n                renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos],\n            };\n        });\n}\nfunction getGapGuidelines(\n    guidelines: Guideline[],\n    type: \"vertical\" | \"horizontal\",\n    targetPos: number[],\n    targetSizes: number[],\n): GapGuideline[] {\n    const elementGuidelines = guidelines.filter(\n        ({ element, gap, type: guidelineType }) => element && gap && guidelineType === type);\n    const [index, otherIndex] = type === \"vertical\" ? [0, 1] : [1, 0];\n\n    return flat(elementGuidelines.map((guideline, i) => {\n        const pos = guideline.pos;\n        const gap = guideline.gap!;\n        const gapGuidelines = guideline.gapGuidelines!;\n        const sizes = guideline.sizes!;\n\n        let offset = minOffset(\n            pos[otherIndex] + sizes[otherIndex] - targetPos[otherIndex],\n            pos[otherIndex] - targetPos[otherIndex] - targetSizes[otherIndex],\n        );\n        const minSize = Math.min(sizes[otherIndex], targetSizes[otherIndex]);\n\n        if (offset > 0 && offset > minSize) {\n            offset = (offset - minSize / 2) * 2;\n        } else if (offset < 0 && offset < -minSize) {\n            offset = (offset + minSize / 2) * 2;\n        }\n\n        const otherPos = (offset > 0 ? 0 : targetSizes[otherIndex]) + offset / 2;\n        return [\n            ...getGapGuidelinesToStart(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos),\n            ...getGapGuidelinesToEnd(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos),\n        ];\n    }));\n}\nfunction renderGapGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    gapGuidelines: GapGuideline[],\n    type: \"vertical\" | \"horizontal\",\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    snapDistFormat: Required<SnappableOptions>[\"snapDistFormat\"],\n    React: any,\n) {\n    const {\n        snapDigit = 0,\n        isDisplaySnapDigit = true,\n    } = moveable.props;\n\n    const otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n    const [index, otherIndex] = type === \"vertical\" ? [0, 1] : [1, 0];\n\n    return gapGuidelines.map(({ renderPos, gap }, i) => {\n        const absGap = Math.abs(gap!);\n        const snapSize = isDisplaySnapDigit ? parseFloat(absGap.toFixed(snapDigit)) : 0;\n\n        return <div className={prefix(\n            \"line\",\n            directionName,\n            \"guideline\",\n            \"gap\",\n        )}\n            data-size={snapSize > 0 ? snapDistFormat(snapSize) : \"\"}\n            key={`${otherType}GapGuideline${i}`} style={{\n                [posName1]: `${renderPos[index]}px`,\n                [posName2]: `${renderPos[otherIndex]}px`,\n                [sizeName]: `${absGap}px`,\n            }} />;\n    });\n}\n\nfunction addBoundGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n    verticalSnapPoses: SnappableRenderType[],\n    horizontalSnapPoses: SnappableRenderType[],\n    externalBounds?: BoundType | false | null,\n) {\n    const {\n        vertical: verticalBoundInfos,\n        horizontal: horizontalBoundInfos,\n    } = checkBoundPoses(externalBounds || moveable.props.bounds, verticalPoses, horizontalPoses);\n\n    verticalBoundInfos.forEach(info => {\n        if (info.isBound) {\n            verticalSnapPoses.push({\n                type: \"bounds\",\n                pos: info.pos,\n            });\n        }\n    });\n    horizontalBoundInfos.forEach(info => {\n        if (info.isBound) {\n            horizontalSnapPoses.push({\n                type: \"bounds\",\n                pos: info.pos,\n            });\n        }\n    });\n    const {\n        vertical: verticalInnerBoundPoses,\n        horizontal: horizontalInnerBoundPoses,\n    } = checkInnerBoundPoses(moveable);\n\n    verticalInnerBoundPoses.forEach(innerPos => {\n        if (findIndex(verticalSnapPoses, ({ type, pos }) => type === \"bounds\" && pos === innerPos) >= 0) {\n            return;\n        }\n        verticalSnapPoses.push({\n            type: \"bounds\",\n            pos: innerPos,\n        });\n    });\n\n    horizontalInnerBoundPoses.forEach(innerPos => {\n        if (findIndex(horizontalSnapPoses, ({ type, pos }) => type === \"bounds\" && pos === innerPos) >= 0) {\n            return;\n        }\n        horizontalSnapPoses.push({\n            type: \"bounds\",\n            pos: innerPos,\n        });\n    });\n}\n/**\n * @namespace Moveable.Snappable\n * @description Whether or not target can be snapped to the guideline. (default: false)\n * @sort 2\n */\nexport default {\n    name: \"snappable\",\n    props: {\n        snappable: [Boolean, Array],\n        snapCenter: Boolean,\n        snapHorizontal: Boolean,\n        snapVertical: Boolean,\n        snapElement: Boolean,\n        snapGap: Boolean,\n        isDisplaySnapDigit: Boolean,\n        snapDigit: Number,\n        snapThreshold: Number,\n        horizontalGuidelines: Array,\n        verticalGuidelines: Array,\n        elementGuidelines: Array,\n        bounds: Object,\n        innerBounds: Object,\n        snapDistFormat: Function,\n    } as const,\n    events: {\n        onSnap: \"snap\",\n    } as const,\n    css: [\n        `:host {\n    --bounds-color: #d66;\n}`,\n    `.guideline {\npointer-events: none;\nz-index: 2;\n}`,\n        `.line.guideline.bounds {\n    background: #d66;\n    background: var(--bounds-color);\n}`,\n    ],\n    render(moveable: MoveableManagerInterface<SnappableProps, SnappableState>, React: Renderer): any[] {\n        const {\n            top: targetTop,\n            left: targetLeft,\n            pos1, pos2, pos3, pos4,\n            snapRenderInfo,\n            targetClientRect,\n            containerClientRect,\n            is3d,\n            rootMatrix,\n        } = moveable.state;\n\n        if (!snapRenderInfo || !hasGuidelines(moveable, \"\")) {\n            return [];\n        }\n\n        const n = is3d ? 4 : 3;\n        const minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n        const minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n        const containerPos = caculateContainerPos(rootMatrix, containerClientRect, n);\n        const [clientLeft, clientTop] = caculateInversePosition(rootMatrix, [\n            targetClientRect.left - containerPos[0],\n            targetClientRect.top - containerPos[1],\n        ], n);\n\n        const {\n            snapThreshold = 5,\n            snapDigit = 0,\n            isDisplaySnapDigit = true,\n            snapDistFormat = (v: number) => v,\n        } = moveable.props;\n        const externalPoses = snapRenderInfo.externalPoses || [];\n        const poses = getAbsolutePosesByState(moveable.state);\n        const verticalSnapPoses: SnappableRenderType[] = [];\n        const horizontalSnapPoses: SnappableRenderType[] = [];\n        const verticalGuidelines: Guideline[] = [];\n        const horizontalGuidelines: Guideline[] = [];\n        const snapInfos: Array<{ vertical: SnapInfo, horizontal: SnapInfo }> = [];\n        const { width, height, top, left, bottom, right } = getRect(poses);\n        const hasExternalPoses = externalPoses.length > 0;\n        const externalRect = hasExternalPoses ? getRect(externalPoses) : {} as ReturnType<typeof getRect>;\n\n        if (!snapRenderInfo.request) {\n            if (snapRenderInfo.direction) {\n                snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction));\n            }\n            if (snapRenderInfo.snap) {\n                const rect = getRect(poses);\n\n                if (snapRenderInfo.center) {\n                    (rect as any).middle = (rect.top + rect.bottom) / 2;\n                    (rect as any).center = (rect.left + rect.right) / 2;\n                }\n                snapInfos.push(checkSnaps(moveable, rect, true, 1));\n            }\n            if (hasExternalPoses) {\n                if (snapRenderInfo.center) {\n                    (externalRect as any).middle = (externalRect.top + externalRect.bottom) / 2;\n                    (externalRect as any).center = (externalRect.left + externalRect.right) / 2;\n                }\n                snapInfos.push(checkSnaps(moveable, externalRect, true, 1));\n            }\n            snapInfos.forEach(snapInfo => {\n                const {\n                    vertical: {\n                        posInfos: verticalPosInfos,\n                    },\n                    horizontal: {\n                        posInfos: horizontalPosInfos,\n                    },\n                } = snapInfo;\n                verticalSnapPoses.push(...verticalPosInfos.map(posInfo => ({\n                    type: \"snap\",\n                    pos: posInfo.pos,\n                } as const)));\n                horizontalSnapPoses.push(...horizontalPosInfos.map(posInfo => ({\n                    type: \"snap\",\n                    pos: posInfo.pos,\n                } as const)));\n                verticalGuidelines.push(...getSnapGuidelines(verticalPosInfos));\n                horizontalGuidelines.push(...getSnapGuidelines(horizontalPosInfos));\n            });\n        }\n\n        addBoundGuidelines(\n            moveable,\n            [left, right],\n            [top, bottom],\n            verticalSnapPoses,\n            horizontalSnapPoses,\n        );\n        if (hasExternalPoses) {\n            addBoundGuidelines(\n                moveable,\n                [externalRect.left, externalRect.right],\n                [externalRect.top, externalRect.bottom],\n                verticalSnapPoses,\n                horizontalSnapPoses,\n                snapRenderInfo.externalBounds,\n            );\n        }\n        const elementHorizontalGroup = groupByElementGuidelines(\n            horizontalGuidelines,\n            clientLeft,\n            width,\n            0,\n        );\n        const elementVerticalGroup = groupByElementGuidelines(\n            verticalGuidelines,\n            clientTop,\n            height,\n            1,\n        );\n        const horizontalNames = [\"horizontal\", \"left\", \"top\", \"width\"] as const;\n        const verticalNames = [\"vertical\", \"top\", \"left\", \"height\"] as const;\n\n        const gapVerticalGuidelines = getGapGuidelines(\n            verticalGuidelines, \"vertical\",\n            [targetLeft, targetTop],\n            [width, height],\n        );\n        const gapHorizontalGuidelines = getGapGuidelines(\n            horizontalGuidelines, \"horizontal\",\n            [targetLeft, targetTop],\n            [width, height],\n        );\n\n        const allGuidelines = [\n            ...verticalGuidelines,\n            ...horizontalGuidelines,\n        ];\n        triggerEvent(moveable, \"onSnap\", {\n            guidelines: allGuidelines.filter(({ element }) => !element),\n            elements: groupBy(allGuidelines.filter(({ element }) => element), ({ element }) => element),\n            gaps: [\n                ...gapVerticalGuidelines,\n                ...gapHorizontalGuidelines,\n            ],\n        }, true);\n\n        return [\n            ...renderGapGuidelines(\n                moveable,\n                gapVerticalGuidelines,\n                \"vertical\",\n                horizontalNames,\n                snapDistFormat,\n                React,\n            ),\n            ...renderGapGuidelines(\n                moveable,\n                gapHorizontalGuidelines,\n                \"horizontal\",\n                verticalNames,\n                snapDistFormat,\n                React,\n            ),\n            ...renderElementGroup(\n                elementHorizontalGroup,\n                horizontalNames,\n                minLeft,\n                clientLeft,\n                width,\n                targetTop,\n                snapThreshold,\n                isDisplaySnapDigit,\n                snapDigit,\n                0,\n                snapDistFormat,\n                React,\n            ),\n            ...renderElementGroup(\n                elementVerticalGroup,\n                verticalNames,\n                minTop,\n                clientTop,\n                height,\n                targetLeft,\n                snapThreshold,\n                isDisplaySnapDigit,\n                snapDigit,\n                1,\n                snapDistFormat,\n                React,\n            ),\n            ...renderSnapPoses(\n                horizontalSnapPoses,\n                horizontalNames,\n                minLeft,\n                targetTop,\n                width,\n                React,\n            ),\n            ...renderSnapPoses(\n                verticalSnapPoses,\n                verticalNames,\n                minTop,\n                targetLeft,\n                height,\n                React,\n            ),\n            ...renderGuidelines(\n                horizontalGuidelines,\n                horizontalNames,\n                targetLeft,\n                targetTop,\n                0,\n                React,\n            ),\n            ...renderGuidelines(\n                verticalGuidelines,\n                verticalNames,\n                targetTop,\n                targetLeft,\n                1,\n                React,\n            ),\n        ];\n    },\n    dragStart(moveable: MoveableManagerInterface<SnappableProps, SnappableState>, e: any) {\n        moveable.state.snapRenderInfo = {\n            request: e.isRequest,\n            snap: true,\n            center: true,\n        };\n        snapStart(moveable);\n    },\n    pinchStart(moveable: MoveableManagerInterface<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragEnd(moveable: MoveableManagerInterface<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragControlCondition(e: any) {\n        if (directionCondition(e) || rotatableDragControlCondtion(e)) {\n            return true;\n        }\n        if (!e.isRequest && e.inputEvent) {\n            return hasClass(e.inputEvent.target, prefix(\"snap-control\"));\n        }\n    },\n    dragControlStart(moveable: MoveableManagerInterface<SnappableProps, SnappableState>, e: any) {\n        moveable.state.snapRenderInfo = null;\n        snapStart(moveable);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragGroupStart(moveable: any, e: any) {\n        this.dragStart(moveable, e);\n    },\n    dragGroupEnd(moveable: any) {\n        this.unset(moveable);\n    },\n    dragGroupControlStart(moveable: any, e: any) {\n        moveable.state.snapRenderInfo = null;\n        snapStart(moveable);\n    },\n    dragGroupControlEnd(moveable: any) {\n        this.unset(moveable);\n    },\n    unset(moveable: any) {\n        const state = moveable.state;\n\n        state.enableSnap = false;\n        state.guidelines = [];\n        state.snapRenderInfo = null;\n    },\n};\n\n/**\n* Whether or not target can be snapped to the guideline. (default: false)\n* @name Moveable.Snappable#snappable\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* moveable.snappable = true;\n*/\n/**\n * When you drag, make the snap in the center of the target. (default: false)\n * @name Moveable.Snappable#snapCenter\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n * });\n *\n * moveable.snapCenter = true;\n */\n\n/**\n * When you drag, make the snap in the vertical guidelines. (default: true)\n * @name Moveable.Snappable#snapVertical\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapVertical = false;\n */\n/**\n * When you drag, make the snap in the horizontal guidelines. (default: true)\n * @name Moveable.Snappable#snapHorizontal\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapHorizontal = false;\n */\n/**\n * When you drag, make the gap snap in the element guidelines. (default: true)\n * @name Moveable.Snappable#snapGap\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n *   snapGap: true,\n * });\n *\n * moveable.snapGap = false;\n */\n/**\n * When you drag, make the snap in the element guidelines. (default: true)\n * @name Moveable.Snappable#snapElement\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapVertical: true,\n *   snapHorizontal: true,\n *   snapElement: true,\n * });\n *\n * moveable.snapElement = false;\n */\n/**\n * Distance value that can snap to guidelines. (default: 5)\n * @name Moveable.Snappable#snapThreshold\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapThreshold = 5;\n */\n\n/**\n * Add guidelines in the horizontal direction. (default: [])\n * @name Moveable.Snappable#horizontalGuidlines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.horizontalGuidlines = [100, 200, 500];\n */\n\n/**\n * Add guidelines in the vertical direction. (default: [])\n * @name Moveable.Snappable#verticalGuidlines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.verticalGuidlines = [100, 200, 500];\n */\n/**\n * Add guidelines for the element. (default: [])\n * @name Moveable.Snappable#elementGuidelines\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.elementGuidelines = [\n *   document.querySelector(\".element\"),\n * ];\n */\n/**\n * You can set up boundaries. (default: null)\n * @name Moveable.Snappable#bounds\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.bounds = { left: 0, right: 1000, top: 0, bottom: 1000};\n */\n/**\n * You can set up inner boundaries. (default: null)\n * @name Moveable.Snappable#innerBounds\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.innerBounds = { left: 500, top: 500, width: 100, height: 100};\n */\n/**\n * snap distance digits (default: 0)\n * @name Moveable.Snappable#snapDigit\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapDigit = 0\n */\n/**\n * Whether to show snap distance (default: true)\n * @name Moveable.Snappable#isDisplaySnapDigit\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.isDisplaySnapDigit = true;\n */\n\n/**\n * You can set the text format of the distance shown in the guidelines. (default: self)\n * @name Moveable.Snappable#snapDistFormat\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  snappable: true,\n *  snapDistFormat: v => v,\n * });\n * moveable.snapDistFormat = v => `${v}px`;\n */\n\n/**\n * When you drag or dragControl, the `snap` event is called.\n * @memberof Moveable.Snappable\n * @event snap\n * @param {Moveable.Snappable.OnSnap} - Parameters for the `snap` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     snappable: true\n * });\n * moveable.on(\"snap\", e => {\n *     console.log(\"onSnap\", e);\n * });\n */\n","import {\n    setDragStart, getBeforeDragDist, getTransformDist,\n    convertTransformFormat, resolveTransformEvent, fillTransformStartEvent, setDefaultTransformIndex\n} from \"../gesto/GestoUtils\";\nimport { throttleArray, triggerEvent, fillParams, throttle, getDistSize, prefix, fillEndParams } from \"../utils\";\nimport { minus, plus, getRad } from \"../matrix\";\nimport {\n    DraggableProps, OnDrag, OnDragGroup,\n    OnDragGroupStart, OnDragStart, OnDragEnd, DraggableState,\n    Renderer, OnDragGroupEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\nimport { triggerChildGesto } from \"../groupUtils\";\nimport { checkSnapDrag, startCheckSnapDrag } from \"./Snappable\";\nimport { IObject } from \"@daybrush/utils\";\n\n/**\n * @namespace Draggable\n * @memberof Moveable\n * @description Draggable refers to the ability to drag and move targets.\n */\nexport default {\n    name: \"draggable\",\n    props: {\n        draggable: Boolean,\n        throttleDrag: Number,\n        throttleDragRotate: Number,\n        startDragRotate: Number,\n    } as const,\n    events: {\n        onDragStart: \"dragStart\",\n        onDrag: \"drag\",\n        onDragEnd: \"dragEnd\",\n        onDragGroupStart: \"dragGroupStart\",\n        onDragGroup: \"dragGroup\",\n        onDragGroupEnd: \"dragGroupEnd\",\n    } as const,\n    render(\n        moveable: MoveableManagerInterface<DraggableProps, DraggableState>,\n        React: Renderer,\n    ): any[] {\n        const throttleDragRotate = moveable.props.throttleDragRotate;\n        const { dragInfo, beforeOrigin } = moveable.state;\n\n        if (!throttleDragRotate || !dragInfo) {\n            return [];\n        }\n        const dist = dragInfo.dist;\n\n        if (!dist[0] && !dist[1]) {\n            return [];\n        }\n\n        const width = getDistSize(dist);\n        const rad = getRad(dist, [0, 0]);\n\n        return [<div className={prefix(\n            \"line\",\n            \"horizontal\",\n            \"dragline\",\n            \"dashed\",\n        )} key={`dragRotateGuideline`} style={{\n            width: `${width}px`,\n            transform: `translate(${beforeOrigin[0]}px, ${beforeOrigin[1]}px) rotate(${rad}rad)`,\n        }} />];\n    },\n    dragStart(\n        moveable: MoveableManagerInterface<DraggableProps, any>,\n        e: any,\n    ) {\n        const { datas, parentEvent, parentGesto } = e;\n        const state = moveable.state;\n        const {\n            target,\n            gesto,\n        } = state;\n\n        if (gesto) {\n            return false;\n        }\n        state.gesto = parentGesto || moveable.targetGesto;\n        const style = window.getComputedStyle(target!);\n\n        datas.datas = {};\n        datas.left = parseFloat(style.left || \"\") || 0;\n        datas.top = parseFloat(style.top || \"\") || 0;\n        datas.bottom = parseFloat(style.bottom || \"\") || 0;\n        datas.right = parseFloat(style.right || \"\") || 0;\n        datas.startValue = [0, 0];\n\n        setDragStart(moveable, e);\n        setDefaultTransformIndex(e);\n        startCheckSnapDrag(moveable, datas);\n\n        datas.prevDist = [0, 0];\n        datas.prevBeforeDist = [0, 0];\n        datas.isDrag = false;\n\n        const params = fillParams<OnDragStart>(moveable, e, {\n            set: (translate: number[]) => {\n                datas.startValue = translate;\n            },\n            ...fillTransformStartEvent(e),\n        });\n        const result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n        if (result !== false) {\n            datas.isDrag = true;\n            moveable.state.dragInfo = {\n                startRect: moveable.getRect(),\n                dist: [0, 0],\n            };\n        } else {\n            state.gesto = null;\n            datas.isPinch = false;\n        }\n        return datas.isDrag ? params : false;\n    },\n    drag(\n        moveable: MoveableManagerInterface<DraggableProps, any>,\n        e: any,\n    ): OnDrag | undefined {\n        resolveTransformEvent(e, \"translate\");\n\n        const { datas, parentEvent, parentFlag, isPinch, isRequest } = e;\n        let { distX, distY } = e;\n        const { isDrag, prevDist, prevBeforeDist, startValue } = datas;\n\n        if (!isDrag) {\n            return;\n        }\n        const props = moveable.props;\n\n        const parentMoveable = props.parentMoveable;\n        const throttleDrag = parentEvent ? 0 : (props.throttleDrag || 0);\n        const throttleDragRotate = parentEvent ? 0 : (props.throttleDragRotate || 0);\n\n        let isSnap = false;\n        let dragRotateRad = 0;\n\n        if (!parentEvent && throttleDragRotate > 0 && (distX || distY)) {\n            const startDragRotate = props.startDragRotate || 0;\n            const deg\n                = throttle(startDragRotate + getRad([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate)\n                - startDragRotate;\n            const ry = distY * Math.abs(Math.cos((deg - 90) / 180 * Math.PI));\n            const rx = distX * Math.abs(Math.cos(deg / 180 * Math.PI));\n            const r = getDistSize([rx, ry]);\n            dragRotateRad = deg * Math.PI / 180;\n\n            distX = r * Math.cos(dragRotateRad);\n            distY = r * Math.sin(dragRotateRad);\n        }\n\n        if (!isPinch && !parentEvent && !parentFlag && (!throttleDragRotate || distX || distY)) {\n            const [verticalInfo, horizontalInfo] = checkSnapDrag(\n                moveable, distX, distY, throttleDragRotate, isRequest, datas,\n            );\n            const {\n                isSnap: isVerticalSnap,\n                isBound: isVerticalBound,\n                offset: verticalOffset,\n            } = verticalInfo;\n            const {\n                isSnap: isHorizontalSnap,\n                isBound: isHorizontalBound,\n                offset: horizontalOffset,\n            } = horizontalInfo;\n            isSnap = isVerticalSnap || isHorizontalSnap || isVerticalBound || isHorizontalBound;\n\n            distX += verticalOffset;\n            distY += horizontalOffset;\n        }\n        datas.passDeltaX = distX - (datas.passDistX || 0);\n        datas.passDeltaY = distY - (datas.passDistY || 0);\n        datas.passDistX = distX;\n        datas.passDistY = distY;\n        const beforeTranslate = plus(getBeforeDragDist({ datas, distX, distY }), startValue);\n        const translate = plus(getTransformDist({ datas, distX, distY }), startValue);\n\n        if (!throttleDragRotate && !isSnap) {\n            throttleArray(translate, throttleDrag);\n            throttleArray(beforeTranslate, throttleDrag);\n        }\n\n        const beforeDist = minus(beforeTranslate, startValue);\n        const dist = minus(translate, startValue);\n        const delta = minus(dist, prevDist);\n        const beforeDelta = minus(beforeDist, prevBeforeDist);\n\n        datas.prevDist = dist;\n        datas.prevBeforeDist = beforeDist;\n\n        const left = datas.left + beforeDist[0];\n        const top = datas.top + beforeDist[1];\n        const right = datas.right - beforeDist[0];\n        const bottom = datas.bottom - beforeDist[1];\n        const nextTransform = convertTransformFormat(datas,\n            `translate(${translate[0]}px, ${translate[1]}px)`, `translate(${dist[0]}px, ${dist[1]}px)`);\n\n        moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\n        if (!parentEvent && !parentMoveable && delta.every(num => !num) && beforeDelta.some(num => !num)) {\n            return;\n        }\n\n        const {\n            width,\n            height,\n        } = moveable.state;\n        const params = fillParams<OnDrag>(moveable, e, {\n            transform: nextTransform,\n            dist,\n            delta,\n            translate,\n            beforeDist,\n            beforeDelta,\n            beforeTranslate,\n            left,\n            top,\n            right,\n            bottom,\n            width,\n            height,\n            isPinch,\n        });\n\n        !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n        return params;\n    },\n    dragEnd(\n        moveable: MoveableManagerInterface<DraggableProps, DraggableState>,\n        e: any,\n    ) {\n        const { parentEvent, datas, isDrag } = e;\n\n        moveable.state.gesto = null;\n        moveable.state.dragInfo = null;\n        if (!datas.isDrag) {\n            return;\n        }\n        datas.isDrag = false;\n        !parentEvent && triggerEvent(moveable, \"onDragEnd\", fillEndParams<OnDragEnd>(moveable, e, {}));\n        return isDrag;\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas, clientX, clientY } = e;\n\n        const params = this.dragStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const events = triggerChildGesto(moveable, this, \"dragStart\", [\n            clientX || 0,\n            clientY || 0,\n        ], e, false);\n\n        const nextParams: OnDragGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n\n        datas.isDrag = result !== false;\n\n        return datas.isDrag ? params : false;\n    },\n    dragGroup(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        const params = this.drag(moveable, e);\n        const { passDeltaX, passDeltaY } = e.datas;\n        const events = triggerChildGesto(moveable, this, \"drag\", [passDeltaX, passDeltaY], e, false);\n\n        if (!params) {\n            return;\n        }\n        const nextParams: OnDragGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onDragGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        this.dragEnd(moveable, e);\n        triggerChildGesto(moveable, this, \"dragEnd\", [0, 0], e, false);\n        triggerEvent(moveable, \"onDragGroupEnd\", fillEndParams<OnDragGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n        }));\n\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Draggable#request\n     * @param {object} [e] - the draggable's request parameter\n     * @param {number} [e.x] - x position\n     * @param {number} [e.y] - y position\n     * @param {number} [e.deltaX] - X number to move\n     * @param {number} [e.deltaY] - Y number to move\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"draggable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100 });\n     * moveable.request(\"draggable\", { x: 220, y: 100 });\n     * moveable.request(\"draggable\", { x: 240, y: 100 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<any, any>) {\n        const datas = {};\n        const rect = moveable.getRect();\n        let distX = 0;\n        let distY = 0;\n\n        return {\n            isControl: false,\n            requestStart() {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"x\" in e) {\n                    distX = e.x - rect.left;\n                } else if (\"deltaX\" in e) {\n                    distX += e.deltaX;\n                }\n                if (\"y\" in e) {\n                    distY = e.y - rect.top;\n                } else if (\"deltaY\" in e) {\n                    distY += e.deltaY;\n                }\n\n                return { datas, distX, distY };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n    unset(moveable: any) {\n        moveable.state.dragInfo = null;\n    },\n};\n\n/**\n * Whether or not target can be dragged. (default: false)\n * @name Moveable.Draggable#draggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.draggable = true;\n */\n\n/**\n * throttle of x, y when drag.\n * @name Moveable.Draggable#throttleDrag\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleDrag = 1;\n */\n\n/**\n* throttle of angle of x, y when drag.\n* @name Moveable.Draggable#throttleDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* moveable.throttleDragRotate = 45;\n*/\n\n/**\n* start angle of throttleDragRotate of x, y when drag.\n* @name Moveable.Draggable#startDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* // 45, 135, 225, 315\n* moveable.throttleDragRotate = 90;\n* moveable.startDragRotate = 45;\n*/\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable.Draggable\n * @event dragStart\n * @param {Moveable.Draggable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable.Draggable\n * @event drag\n * @param {Moveable.Draggable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable.Draggable\n * @event dragEnd\n * @param {Moveable.Draggable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group drag starts, the `dragGroupStart` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroupStart\n* @param {Moveable.Draggable.OnDragGroupStart} - Parameters for the `dragGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroupStart\", ({ targets }) => {\n*     console.log(\"onDragGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group drag, the `dragGroup` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroup\n* @param {Moveable.Draggable.OnDragGroup} - Parameters for the `dragGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroup\", ({ targets, events }) => {\n*     console.log(\"onDragGroup\", targets);\n*     events.forEach(ev => {\n*          // drag event\n*          console.log(\"onDrag left, top\", ev.left, ev.top);\n*          // ev.target!.style.left = `${ev.left}px`;\n*          // ev.target!.style.top = `${ev.top}px`;\n*          console.log(\"onDrag translate\", ev.dist);\n*          ev.target!.style.transform = ev.transform;)\n*     });\n* });\n*/\n\n/**\n * When the group drag finishes, the `dragGroupEnd` event is called.\n * @memberof Moveable.Draggable\n * @event dragGroupEnd\n * @param {Moveable.Draggable.OnDragGroupEnd} - Parameters for the `dragGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     draggable: true\n * });\n * moveable.on(\"dragGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onDragGroupEnd\", targets, isDrag);\n * });\n */\n","import {\n    throttle, prefix, triggerEvent, fillParams,\n    getRotationRad, getClientRect, caculatePosition, fillEndParams\n} from \"../utils\";\nimport { IObject, hasClass } from \"@daybrush/utils\";\nimport {\n    RotatableProps, OnRotateGroup, OnRotateGroupEnd,\n    Renderer, OnRotateGroupStart, OnRotateStart, OnRotate,\n    OnRotateEnd, MoveableClientRect, SnappableProps,\n    SnappableState, MoveableManagerInterface, MoveableGroupInterface, DraggableProps,\n    OnDragStart,\n} from \"../types\";\nimport { triggerChildAble } from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { minus, plus, getRad, rotate as rotateMatrix } from \"../matrix\";\nimport CustomGesto from \"../gesto/CustomGesto\";\nimport { checkSnapRotate } from \"./Snappable\";\nimport {\n    fillTransformStartEvent,\n    convertTransformFormat, getRotateDist,\n    getOriginDirection,\n    getDirectionOffset,\n    fillTransformEvent,\n    setDefaultTransformIndex,\n    resolveTransformEvent,\n} from \"../gesto/GestoUtils\";\n\n/**\n * @namespace Rotatable\n * @memberof Moveable\n * @description Rotatable indicates whether the target can be rotated.\n */\n\nfunction setRotateStartInfo(\n    moveable: MoveableManagerInterface<any, any>,\n    datas: IObject<any>, clientX: number, clientY: number, origin: number[], rect: MoveableClientRect) {\n\n    const n = moveable.state.is3d ? 4 : 3;\n    const nextOrigin = caculatePosition(moveable.state.rootMatrix, origin, n);\n    const startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);\n\n    datas.startAbsoluteOrigin = startAbsoluteOrigin;\n    datas.prevDeg = getRad(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n    datas.prevSnapDeg = datas.prevDeg;\n    datas.startDeg = datas.prevDeg;\n    datas.loop = 0;\n}\nfunction getParentDeg(\n    moveable: MoveableManagerInterface<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    parentDist: number,\n    direction: number,\n    startValue: number,\n) {\n    const {\n        prevDeg,\n    } = datas;\n\n    // const absoluteDeg = startValue + parentDist;\n    const dist = checkSnapRotate(\n        moveable,\n        moveableRect,\n        datas.origin,\n        parentDist,\n    );\n    datas.prevDeg = dist;\n\n    const delta = dist - prevDeg;\n\n    return [delta, dist, startValue + dist];\n}\nfunction getDeg(\n    moveable: MoveableManagerInterface<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    deg: number,\n    direction: number,\n    startValue: number,\n    throttleRotate: number,\n    isSnap?: boolean,\n) {\n    const {\n        prevDeg,\n        prevSnapDeg,\n        startDeg,\n        loop: prevLoop,\n    } = datas;\n\n    if (prevDeg > deg && prevDeg > 270 && deg < 90) {\n        // 360 => 0\n        ++datas.loop;\n    } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {\n        // 0 => 360\n        --datas.loop;\n    }\n    const loop = datas.loop;\n    const absolutePrevSnapDeg = prevLoop * 360 + prevSnapDeg - startDeg + startValue;\n    let absoluteDeg = loop * 360 + deg - startDeg + startValue;\n\n    datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startValue;\n\n    absoluteDeg = throttle(absoluteDeg, throttleRotate);\n    let dist = direction * (absoluteDeg - startValue);\n    if (isSnap) {\n        dist = checkSnapRotate(moveable, moveableRect, datas.origin, dist);\n        absoluteDeg = dist / direction + startValue;\n    }\n    datas.prevSnapDeg = absoluteDeg - loop * 360 + startDeg - startValue;\n\n    const delta = direction * (absoluteDeg - absolutePrevSnapDeg);\n\n    return [delta, dist, startValue + dist];\n}\nfunction getRotateInfo(\n    moveable: MoveableManagerInterface<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    direction: number,\n    clientX: number, clientY: number,\n    startValue: number,\n    throttleRotate: number,\n) {\n    return getDeg(\n        moveable,\n        moveableRect,\n        datas,\n        getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180,\n        direction,\n        startValue,\n        throttleRotate,\n        true,\n    );\n}\n\nexport function getReversePositionX(dir: string) {\n    if (dir === \"left\") {\n        return \"right\";\n    } else if (dir === \"right\") {\n        return \"left\";\n    }\n    return dir;\n}\nexport function getReversePositionY(dir: string) {\n    if (dir === \"top\") {\n        return \"bottom\";\n    } else if (dir === \"bottom\") {\n        return \"top\";\n    }\n    return dir;\n}\nexport function getPositions(\n    rotationPosition: RotatableProps[\"rotationPosition\"],\n    [pos1, pos2, pos3, pos4]: number[][],\n    direction: number,\n) {\n    const [dir1, dir2] = (rotationPosition || \"top\").split(\"-\");\n    let radPoses = [pos1, pos2];\n\n    // if (scale[0] < 0) {\n    //     dir1 = getReversePositionX(dir1);\n    //     dir2 = getReversePositionX(dir2);\n    // }\n    // if (scale[1] < 0) {\n    //     dir1 = getReversePositionY(dir1);\n    //     dir2 = getReversePositionY(dir2);\n    // }\n    if (dir1 === \"left\") {\n        radPoses = [pos3, pos1];\n    } else if (dir1 === \"right\") {\n        radPoses = [pos2, pos4];\n    } else if (dir1 === \"bottom\") {\n        radPoses = [pos4, pos3];\n    }\n    let pos = [\n        (radPoses[0][0] + radPoses[1][0]) / 2,\n        (radPoses[0][1] + radPoses[1][1]) / 2,\n    ];\n    const rad = getRotationRad(radPoses, direction);\n\n    if (dir2) {\n        const isStart = dir2 === \"top\" || dir2 === \"left\";\n        const isReverse = dir1 === \"bottom\" || dir1 === \"left\";\n\n        pos = radPoses[(isStart && !isReverse) || (!isStart && isReverse) ? 0 : 1];\n    }\n    return [pos, rad] as const;\n}\n\nexport function dragControlCondition(e: any) {\n    if (e.isRequest) {\n        return e.requestAble === \"rotatable\";\n    }\n    return hasClass(e.inputEvent.target, prefix(\"rotation\"));\n}\n\nexport default {\n    name: \"rotatable\",\n    canPinch: true,\n    props: {\n        rotatable: Boolean,\n        rotationPosition: String,\n        throttleRotate: Number,\n    } as const,\n    events: {\n        onRotateStart: \"rotateStart\",\n        onRotate: \"rotate\",\n        onRotateEnd: \"rotateEnd\",\n        onRotateGroupStart: \"rotateGroupStart\",\n        onRotateGroup: \"rotateGroup\",\n        onRotateGroupEnd: \"rotateGroupEnd\",\n    } as const,\n    render(moveable: MoveableManagerInterface<RotatableProps>, React: Renderer): any {\n        const {\n            rotatable,\n            rotationPosition,\n        } = moveable.props;\n        if (!rotatable) {\n            return null;\n        }\n        const { renderPoses, direction } = moveable.state;\n        const [pos, rotationRad] = getPositions(rotationPosition!, renderPoses, direction);\n\n        return (\n            <div key=\"rotation\" className={prefix(\"line rotation-line\")} style={{\n                // tslint:disable-next-line: max-line-length\n                transform: `translate(-50%) translate(${pos[0]}px, ${pos[1]}px) rotate(${rotationRad}rad)`,\n            }}>\n                <div className={prefix(\"control\", \"rotation\")}></div>\n            </div>\n        );\n    },\n    dragControlCondition,\n    dragControlStart(\n        moveable: MoveableManagerInterface<RotatableProps & SnappableProps & DraggableProps, SnappableState>,\n        e: any) {\n        const {\n            datas,\n            clientX, clientY,\n            parentRotate, parentFlag, isPinch,\n            isRequest,\n        } = e;\n        const {\n            target, left, top, origin, beforeOrigin,\n            direction, beforeDirection, targetTransform,\n        } = moveable.state;\n\n        if (!isRequest && !target) {\n            return false;\n        }\n\n        const rect = moveable.getRect();\n        datas.rect = rect;\n        datas.transform = targetTransform;\n        datas.left = left;\n        datas.top = top;\n        datas.fixedPosition = getDirectionOffset(moveable, getOriginDirection(moveable));\n\n        if (isRequest || isPinch || parentFlag) {\n            const externalRotate = parentRotate || 0;\n\n            datas.beforeInfo = {\n                origin: rect.beforeOrigin,\n                prevDeg: externalRotate,\n                startDeg: externalRotate,\n                prevSnapDeg: externalRotate, loop: 0,\n            };\n            datas.afterInfo = {\n                origin: rect.origin,\n                prevDeg: externalRotate, startDeg: externalRotate,\n                prevSnapDeg: externalRotate, loop: 0,\n            };\n        } else {\n            datas.beforeInfo = { origin: rect.beforeOrigin };\n            datas.afterInfo = { origin: rect.origin };\n\n            const controlRect = getClientRect(moveable.controlBox.getElement());\n\n            setRotateStartInfo(moveable, datas.beforeInfo, clientX, clientY, beforeOrigin, controlRect);\n            setRotateStartInfo(moveable, datas.afterInfo, clientX, clientY, origin, controlRect);\n        }\n\n        datas.direction = direction;\n        datas.beforeDirection = beforeDirection;\n        datas.startValue = 0;\n        datas.datas = {};\n\n        setDefaultTransformIndex(e);\n\n        const params = fillParams<OnRotateStart>(moveable, e, {\n            set: (rotatation: number) => {\n                datas.startValue = rotatation * Math.PI / 180;\n            },\n            ...fillTransformStartEvent(e),\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ) as OnDragStart | false,\n        });\n        const result = triggerEvent(moveable, \"onRotateStart\", params);\n        datas.isRotate = result !== false;\n        moveable.state.snapRenderInfo = {\n            request: e.isRequest,\n        };\n\n        return datas.isRotate ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<RotatableProps & DraggableProps>,\n        e: any,\n    ) {\n        const { datas, clientX, clientY, parentRotate, parentFlag, isPinch, groupDelta } = e;\n        const {\n            direction,\n            beforeDirection,\n            beforeInfo,\n            afterInfo,\n            isRotate,\n            startValue,\n            rect,\n        } = datas;\n\n        if (!isRotate) {\n            return;\n        }\n\n        resolveTransformEvent(e, \"rotate\");\n\n        const {\n            throttleRotate = 0,\n            parentMoveable,\n        } = moveable.props;\n\n        let delta: number;\n        let dist: number;\n        let rotate: number;\n        let beforeDelta: number;\n        let beforeDist: number;\n        let beforeRotate: number;\n\n        const startDeg = 180 / Math.PI * startValue;\n\n        if (!parentFlag && \"parentDist\" in e) {\n            const parentDist = e.parentDist;\n\n            [delta, dist, rotate]\n                = getParentDeg(moveable, rect, afterInfo, parentDist, direction, startDeg);\n            [beforeDelta, beforeDist, beforeRotate]\n                = getParentDeg(moveable, rect, beforeInfo, parentDist, direction, startDeg);\n\n        } else if (isPinch || parentFlag) {\n            [delta, dist, rotate]\n                = getDeg(moveable, rect, afterInfo, parentRotate, direction, startDeg, throttleRotate);\n            [beforeDelta, beforeDist, beforeRotate]\n                = getDeg(moveable, rect, beforeInfo, parentRotate, direction, startDeg, throttleRotate);\n        } else {\n            [delta, dist, rotate]\n                = getRotateInfo(moveable, rect, afterInfo, direction, clientX, clientY, startDeg, throttleRotate);\n            [beforeDelta, beforeDist, beforeRotate] = getRotateInfo(\n                moveable, rect, beforeInfo, beforeDirection, clientX, clientY, startDeg, throttleRotate,\n            );\n        }\n\n        if (!delta && !beforeDelta && !parentMoveable) {\n            return;\n        }\n\n        const nextTransform = convertTransformFormat(\n            datas, `rotate(${rotate}deg)`, `rotate(${dist}deg)`);\n\n        const inverseDist = getRotateDist(moveable, dist, datas.fixedPosition, datas);\n        const inverseDelta = minus(\n            plus(groupDelta || [0, 0], inverseDist),\n            datas.prevInverseDist || [0, 0],\n        );\n        datas.prevInverseDist = inverseDist;\n\n        const params = fillParams<OnRotate>(moveable, e, {\n            delta,\n            dist,\n            rotate,\n            beforeDist,\n            beforeDelta,\n            beforeRotate,\n            isPinch: !!isPinch,\n            ...fillTransformEvent(\n                moveable,\n                nextTransform,\n                inverseDelta,\n                isPinch,\n                e,\n            ),\n        });\n        triggerEvent(moveable, \"onRotate\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RotatableProps>, e: any) {\n        const { datas, isDrag } = e;\n\n        if (!datas.isRotate) {\n            return false;\n        }\n        datas.isRotate = false;\n\n        triggerEvent(moveable, \"onRotateEnd\", fillEndParams<OnRotateEnd>(moveable, e, {}));\n        return isDrag;\n    },\n    dragGroupControlCondition: dragControlCondition,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        const {\n            left: parentLeft,\n            top: parentTop,\n            beforeOrigin: parentBeforeOrigin,\n        } = moveable.state;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n\n        params.set(datas.beforeDirection * moveable.rotation);\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                const { left, top, beforeOrigin } = child.state;\n                const childClient = plus(\n                    minus([left, top], [parentLeft, parentTop]),\n                    minus(beforeOrigin, parentBeforeOrigin),\n                );\n\n                ev.datas.groupClient = childClient;\n                return { ...ev, parentRotate: 0 };\n            },\n        );\n\n        const nextParams: OnRotateGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n\n        datas.isRotate = result !== false;\n\n        return datas.isRotate ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return;\n        }\n        const direction = datas.beforeDirection;\n        const parentRotate = params.beforeDist;\n        const deg = params.beforeDelta;\n        const rad = deg / 180 * Math.PI;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const [prevX, prevY] = ev.datas.groupClient;\n                const [clientX, clientY] = rotateMatrix([prevX, prevY], rad * direction);\n                const delta = [clientX - prevX, clientY - prevY];\n\n                ev.datas.groupClient = [clientX, clientY];\n\n                return { ...ev, parentRotate, groupDelta: delta };\n            },\n        );\n        moveable.rotation = direction * params.beforeRotate;\n\n        const nextParams: OnRotateGroup = {\n            targets: moveable.props.targets!,\n            events,\n            set: (rotation: number) => {\n                moveable.rotation = rotation;\n            },\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onRotateGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams = fillEndParams<OnRotateGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n        });\n\n        triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Rotatable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.deltaRotate=0] -  delta number of rotation\n     * @param {number} [e.rotate=0] - absolute number of moveable's rotation\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"rotatable\", { deltaRotate: 10 }, true);\n     *\n     * * moveable.request(\"rotatable\", { rotate: 10 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"rotatable\");\n     *\n     * // request\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     *\n     * requester.request({ rotate: 10 });\n     * requester.request({ rotate: 20 });\n     * requester.request({ rotate: 30 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<RotatableProps>) {\n        const datas = {};\n        let distRotate = 0;\n\n        const startRotation = moveable.getRotation();\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"deltaRotate\" in e) {\n                    distRotate += e.deltaRotate;\n                } else if (\"rotate\" in e) {\n                    distRotate = e.rotate - startRotation;\n                }\n\n                return { datas, parentDist: distRotate };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n/**\n * Whether or not target can be rotated. (default: false)\n * @name Moveable.Rotatable#rotatable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.rotatable = true;\n */\n/**\n * You can specify the position of the rotation. (default: \"top\")\n * @name Moveable.Rotatable#rotationPosition\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   rotationPosition: \"top\",\n * });\n *\n * moveable.rotationPosition = \"bottom\"\n */\n\n/**\n * throttle of angle(degree) when rotate.\n * @name Moveable.Rotatable#throttleRotate\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleRotate = 1;\n */\n\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable.Rotatable\n * @event rotateStart\n * @param {Moveable.Rotatable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n* When rotating, the rotate event is called.\n* @memberof Moveable.Rotatable\n* @event rotate\n* @param {Moveable.Rotatable.OnRotate} - Parameters for the rotate event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { rotatable: true });\n* moveable.on(\"rotate\", ({ target, transform, dist }) => {\n*     target.style.transform = transform;\n* });\n*/\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable.Rotatable\n * @event rotateEnd\n * @param {Moveable.Rotatable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n * When the group rotate starts, the `rotateGroupStart` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupStart\n * @param {Moveable.Rotatable.OnRotateGroupStart} - Parameters for the `rotateGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupStart\", ({ targets }) => {\n *     console.log(\"onRotateGroupStart\", targets);\n * });\n */\n\n/**\n* When the group rotate, the `rotateGroup` event is called.\n* @memberof Moveable.Rotatable\n* @event rotateGroup\n* @param {Moveable.Rotatable.OnRotateGroup} - Parameters for the `rotateGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     rotatable: true\n* });\n* moveable.on(\"rotateGroup\", ({ targets, events }) => {\n*     console.log(\"onRotateGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group rotate.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const deg = ev.beforeDist;\n*     });\n* });\n*/\n\n/**\n * When the group rotate finishes, the `rotateGroupEnd` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupEnd\n * @param {Moveable.Rotatable.OnRotateGroupEnd} - Parameters for the `rotateGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onRotateGroupEnd\", targets, isDrag);\n * });\n */\n","import { prefix, getControlTransform, throttle, getLineStyle } from \"./utils\";\nimport { ResizableProps, ScalableProps, WarpableProps, Renderer, MoveableManagerInterface } from \"./types\";\nimport { DIRECTION_INDEXES, DIRECTION_ROTATIONS, DIRECTIONS } from \"./consts\";\nimport { IObject } from \"@daybrush/utils\";\nimport { getRad } from \"./matrix\";\n\nexport function renderControls(\n    moveable: MoveableManagerInterface<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    defaultDirections: string[],\n    React: Renderer,\n): any[] {\n    const {\n        renderPoses,\n        rotation,\n    } = moveable.state;\n    const {\n        renderDirections: directions = defaultDirections,\n    } = moveable.props;\n    const {\n        direction,\n    } = moveable.state;\n\n    const directionMap: IObject<boolean> = {};\n    directions.forEach(dir => {\n        directionMap[dir] = true;\n    });\n    return directions.map(dir => {\n        const indexes = DIRECTION_INDEXES[dir];\n\n        if (!indexes || !directionMap[dir]) {\n            return null;\n        }\n        let directionRotation = throttle(rotation / Math.PI * 180, 15) + DIRECTION_ROTATIONS[dir];\n\n        if (direction < 1) {\n            directionRotation = 360 - directionRotation;\n        }\n        directionRotation %= 180;\n\n        return (\n            <div className={prefix(\"control\", \"direction\", dir)}\n                data-rotation={directionRotation} data-direction={dir} key={`direction-${dir}`}\n                style={getControlTransform(rotation, ...indexes.map(index => renderPoses[index]))}></div>\n        );\n    });\n}\nexport function renderLine(\n    React: Renderer, direction: string, pos1: number[], pos2: number[],\n    key: number | string, ...classNames: string[]) {\n    const rad = getRad(pos1, pos2);\n    const rotation = direction ? (throttle(rad / Math.PI * 180, 15)) % 180 : -1;\n\n    return <div key={`line${key}`} className={prefix(\"line\", \"direction\", direction, ...classNames)}\n        data-rotation={rotation}\n        data-line-index={key}\n        data-direction={direction} style={getLineStyle(pos1, pos2, rad)}></div>;\n}\nexport function renderAllDirections(\n    moveable: MoveableManagerInterface<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    React: Renderer,\n) {\n    return renderControls(moveable, DIRECTIONS, React);\n}\nexport function renderDiagonalDirections(\n    moveable: MoveableManagerInterface<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    React: Renderer,\n): any[] {\n    return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], React);\n}\n","import {\n    throttle, getDirection, triggerEvent,\n    fillParams, getKeepRatioHeight, getKeepRatioWidth, getCSSSize,\n    getDistSize, caculateBoundSize, fillEndParams, directionCondition,\n} from \"../utils\";\nimport {\n    setDragStart,\n    getDragDist,\n    getResizeDist,\n    getStartDirection,\n    getAbsoluteFixedPosition,\n} from \"../gesto/GestoUtils\";\nimport {\n    ResizableProps, OnResizeGroup, OnResizeGroupEnd,\n    Renderer, OnResizeGroupStart, DraggableProps, OnDrag, OnResizeStart, SnappableState,\n    OnResize, OnResizeEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\nimport { renderAllDirections, renderDiagonalDirections } from \"../renderDirection\";\nimport {\n    triggerChildAble,\n} from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { getRad, caculate, createRotateMatrix, plus } from \"../matrix\";\nimport CustomGesto, { setCustomDrag } from \"../gesto/CustomGesto\";\nimport { checkSnapSize } from \"./Snappable\";\nimport { IObject, isString } from \"@daybrush/utils\";\nimport { TINY_NUM } from \"../consts\";\n\n/**\n * @namespace Resizable\n * @memberof Moveable\n * @description Resizable indicates whether the target's width and height can be increased or decreased.\n */\n\nexport default {\n    name: \"resizable\",\n    ableGroup: \"size\",\n    updateRect: true,\n    canPinch: true,\n    props: {\n        resizable: Boolean,\n        throttleResize: Number,\n        renderDirections: Array,\n        keepRatio: Boolean,\n    } as const,\n    events: {\n        onResizeStart: \"resizeStart\",\n        onResize: \"resize\",\n        onResizeEnd: \"resizeEnd\",\n\n        onResizeGroupStart: \"resizeGroupStart\",\n        onResizeGroup: \"resizeGroup\",\n        onResizeGroupEnd: \"resizeGroupEnd\",\n    } as const,\n    render(moveable: MoveableManagerInterface<Partial<ResizableProps>>, React: Renderer): any[] | undefined {\n        const { resizable, edge } = moveable.props;\n        if (resizable) {\n            if (edge) {\n                return renderDiagonalDirections(moveable, React);\n            }\n            return renderAllDirections(moveable, React);\n        }\n    },\n    dragControlCondition: directionCondition,\n    dragControlStart(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps, SnappableState>,\n        e: any,\n    ) {\n        const {\n            inputEvent,\n            isPinch,\n            parentDirection,\n            datas,\n            parentFlag,\n        } = e;\n\n        const direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n\n        const { target, width, height } = moveable.state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        !isPinch && setDragStart(moveable, e);\n\n        datas.datas = {};\n        datas.direction = direction;\n        datas.startOffsetWidth = width;\n        datas.startOffsetHeight = height;\n        datas.prevWidth = 0;\n        datas.prevHeight = 0;\n        [\n            datas.startWidth,\n            datas.startHeight,\n        ] = getCSSSize(target);\n        const padding = [Math.max(0, width - datas.startWidth), Math.max(0, height - datas.startHeight)];\n        datas.minSize = padding;\n        datas.maxSize = [Infinity, Infinity];\n\n        if (!parentFlag) {\n            const style = window.getComputedStyle(target);\n\n            datas.minSize = plus([\n                parseFloat(style.minWidth!) || 0,\n                parseFloat(style.minHeight!) || 0,\n            ], padding);\n            datas.maxSize = plus([\n                parseFloat(style.maxWidth!) || Infinity,\n                parseFloat(style.maxHeight!) || Infinity,\n            ], padding);\n        }\n        const transformOrigin = moveable.props.transformOrigin || \"% %\";\n\n        datas.transformOrigin = transformOrigin && isString(transformOrigin)\n            ? transformOrigin.split(\" \")\n            : transformOrigin;\n        datas.startDirection = getStartDirection(moveable, direction);\n        datas.fixedPosition = getAbsoluteFixedPosition(moveable, datas.startDirection);\n        datas.fixedOriginalPosition = getAbsoluteFixedPosition(moveable, direction);\n\n        const params = fillParams<OnResizeStart>(moveable, e, {\n            direction,\n            set: ([startWidth, startHeight]: number[]) => {\n                datas.startWidth = startWidth;\n                datas.startHeight = startHeight;\n            },\n            setMin: (minSize: number[]) => {\n                datas.minSize = minSize;\n            },\n            setMax: (maxSize: number[]) => {\n                datas.maxSize = maxSize;\n            },\n            setOrigin: (origin: Array<string | number>) => {\n                datas.transformOrigin = origin;\n            },\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ),\n        });\n        const result = triggerEvent<ResizableProps>(moveable, \"onResizeStart\", params);\n        if (result !== false) {\n            datas.isResize = true;\n            moveable.state.snapRenderInfo = {\n                request: e.isRequest,\n                direction,\n            };\n        }\n        return datas.isResize ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const {\n            datas,\n            distX, distY,\n            parentFlag, isPinch,\n            parentDistance, parentScale,\n            parentKeepRatio,\n            dragClient,\n            parentDist,\n            isRequest,\n        } = e;\n\n        const {\n            direction,\n            isResize,\n            transformOrigin,\n        } = datas;\n\n        if (!isResize) {\n            return;\n        }\n        const {\n            startWidth,\n            startHeight,\n            startOffsetWidth,\n            startOffsetHeight,\n            prevWidth,\n            prevHeight,\n            minSize,\n            maxSize,\n        } = datas;\n        const {\n            throttleResize = 0,\n            parentMoveable,\n        } = moveable.props;\n        let sizeDirection = direction;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = moveable.props.keepRatio || parentKeepRatio;\n        const isWidth = sizeDirection[0] || !sizeDirection[1];\n        const ratio = isWidth ? startOffsetHeight / startOffsetWidth : startOffsetWidth / startOffsetHeight;\n        const startDirection = keepRatio || parentFlag ? direction : datas.startDirection;\n        let fixedPosition = dragClient;\n        let distWidth: number = 0;\n        let distHeight: number = 0;\n\n        if (!dragClient) {\n            if (!parentFlag && isPinch) {\n                fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n            } else {\n                fixedPosition = (keepRatio ? datas.fixedOriginalPosition : datas.fixedPosition);\n            }\n        }\n\n        if (parentDist) {\n            distWidth = parentDist[0];\n            distHeight = parentDist[1];\n        } else if (parentScale) {\n            distWidth = (parentScale[0] - 1) * startOffsetWidth;\n            distHeight = (parentScale[1] - 1) * startOffsetHeight;\n        } else if (isPinch) {\n            if (parentDistance) {\n                distWidth = parentDistance;\n                distHeight = parentDistance * startOffsetHeight / startOffsetWidth;\n            }\n        } else {\n            const dist = getDragDist({ datas, distX, distY });\n\n            distWidth = sizeDirection[0] * dist[0];\n            distHeight = sizeDirection[1] * dist[1];\n\n            if (keepRatio && startOffsetWidth && startOffsetHeight) {\n                const rad = getRad([0, 0], dist);\n                const standardRad = getRad([0, 0], sizeDirection);\n                const ratioRad = getRad([0, 0], [startOffsetWidth, startOffsetHeight]);\n                const size = getDistSize([distWidth, distHeight]);\n                const signSize = Math.cos(rad - standardRad) * size;\n\n                if (!sizeDirection[0]) {\n                    // top, bottom\n                    distHeight = signSize;\n                    distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n                } else if (!sizeDirection[1]) {\n                    // left, right\n                    distWidth = signSize;\n                    distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n                } else {\n                    // two-way\n                    distWidth = Math.cos(ratioRad) * signSize;\n                    distHeight = Math.sin(ratioRad) * signSize;\n                }\n            }\n        }\n        let nextWidth = sizeDirection[0] || keepRatio\n            ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\n        let nextHeight = sizeDirection[1] || keepRatio\n            ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\n\n        if (keepRatio && startOffsetWidth && startOffsetHeight) {\n            // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\n            nextHeight = nextWidth * startOffsetHeight / startOffsetWidth;\n        }\n        let snapDist = [0, 0];\n\n        if (!isPinch) {\n            snapDist = checkSnapSize(\n                moveable, nextWidth,\n                nextHeight, direction,\n                datas.fixedOriginalPosition,\n                isRequest,\n                datas,\n            );\n        }\n        if (parentDist) {\n            !parentDist[0] && (snapDist[0] = 0);\n            !parentDist[1] && (snapDist[1] = 0);\n        }\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n                if (isWidth) {\n                    nextWidth = throttle(nextWidth, throttleResize!);\n                } else {\n                    nextHeight = throttle(nextHeight, throttleResize!);\n                }\n            }\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                nextWidth += snapDist[0];\n                nextHeight = getKeepRatioHeight(nextWidth, isWidth, ratio);\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                nextHeight += snapDist[1];\n                nextWidth = getKeepRatioWidth(nextHeight, isWidth, ratio);\n            }\n        } else {\n            nextWidth += snapDist[0];\n            nextHeight += snapDist[1];\n            if (!snapDist[0]) {\n                nextWidth = throttle(nextWidth, throttleResize!);\n            }\n            if (!snapDist[1]) {\n                nextHeight = throttle(nextHeight, throttleResize!);\n            }\n        }\n        [nextWidth, nextHeight] = caculateBoundSize(\n            [nextWidth, nextHeight],\n            minSize,\n            maxSize,\n            keepRatio,\n        );\n        nextWidth = Math.round(nextWidth);\n        nextHeight = Math.round(nextHeight);\n        distWidth = nextWidth - startOffsetWidth;\n        distHeight = nextHeight - startOffsetHeight;\n\n        const delta = [distWidth - prevWidth, distHeight - prevHeight];\n\n        datas.prevWidth = distWidth;\n        datas.prevHeight = distHeight;\n\n        const inverseDelta = getResizeDist(\n                moveable,\n                nextWidth, nextHeight,\n                startDirection, fixedPosition, transformOrigin);\n\n        if (!parentMoveable && delta.every(num => !num) && inverseDelta.every(num => !num)) {\n            return;\n        }\n        const params = fillParams<OnResize>(moveable, e, {\n            width: startWidth + distWidth,\n            height: startHeight + distHeight,\n            offsetWidth: nextWidth,\n            offsetHeight: nextHeight,\n            direction,\n            dist: [distWidth, distHeight],\n            delta,\n            isPinch: !!isPinch,\n            drag: Draggable.drag(\n                moveable,\n                setCustomDrag(e, moveable.state, inverseDelta, !!isPinch, false),\n            ) as OnDrag,\n        });\n        triggerEvent<ResizableProps>(moveable, \"onResize\", params);\n        return params;\n    },\n    dragControlAfter(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const datas = e.datas;\n        const {\n            isResize,\n            startOffsetWidth,\n            startOffsetHeight,\n            prevWidth,\n            prevHeight,\n        } = datas;\n\n        if (!isResize) {\n            return;\n        }\n        const {\n            width,\n            height,\n        } = moveable.state;\n        const errorWidth = width - (startOffsetWidth + prevWidth);\n        const errorHeight = height - (startOffsetHeight + prevHeight);\n        const isErrorWidth = Math.abs(errorWidth) > 3;\n        const isErrorHeight = Math.abs(errorHeight) > 3;\n\n        if (isErrorWidth) {\n            datas.startWidth += errorWidth;\n            datas.startOffsetWidth += errorWidth;\n            datas.prevWidth += errorWidth;\n        }\n        if (isErrorHeight) {\n            datas.startHeight += errorHeight;\n            datas.startOffsetHeight += errorHeight;\n            datas.prevHeight += errorHeight;\n        }\n        if (isErrorWidth || isErrorHeight) {\n            this.dragControl(moveable, e);\n            return true;\n        }\n    },\n    dragControlEnd(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const { datas, isDrag } = e;\n        if (!datas.isResize) {\n            return false;\n        }\n        datas.isResize = false;\n\n        const params = fillEndParams<OnResizeEnd>(moveable, e, {});\n        triggerEvent<ResizableProps>(moveable, \"onResizeEnd\", params);\n        return isDrag;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const direction = params.direction;\n        const fixedPosition = datas.fixedOriginalPosition;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                const pos = getAbsoluteFixedPosition(child, direction);\n                const [originalX, originalY] = caculate(\n                    createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3),\n                    [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1],\n                    3,\n                );\n                ev.datas.originalX = originalX;\n                ev.datas.originalY = originalY;\n\n                return ev;\n            },\n        );\n\n        const nextParams: OnResizeGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent<ResizableProps>(moveable, \"onResizeGroupStart\", nextParams);\n\n        datas.isResize = result !== false;\n        return datas.isResize ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        if (!datas.isResize) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return;\n        }\n        const {\n            offsetWidth, offsetHeight, dist,\n        } = params;\n\n        const keepRatio = moveable.props.keepRatio;\n\n        const parentScale = [\n            offsetWidth / (offsetWidth - dist[0]),\n            offsetHeight / (offsetHeight - dist[1]),\n        ];\n        const fixedPosition = datas.fixedOriginalPosition;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const [clientX, clientY] = caculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        ev.datas.originalX * parentScale[0],\n                        ev.datas.originalY * parentScale[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...ev,\n                    parentDist: null,\n                    parentScale,\n                    dragClient: plus(fixedPosition, [clientX, clientY]),\n                    parentKeepRatio: keepRatio,\n                };\n            },\n        );\n        const nextParams: OnResizeGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent<ResizableProps>(moveable, \"onResizeGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isResize) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams: OnResizeGroupEnd = fillEndParams<OnResizeGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n        });\n\n        triggerEvent<ResizableProps>(moveable, \"onResizeGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Resizable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.direction=[1, 1]] - Direction to resize\n     * @param {number} [e.deltaWidth] - delta number of width\n     * @param {number} [e.deltaHeight] - delta number of height\n     * @param {number} [e.offsetWidth] - offset number of width\n     * @param {number} [e.offsetHeight] - offset number of height\n     * @param {number} [e.isInstant] - Whether to execute the request instantly\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"resizable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 });\n     * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100 });\n     * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<any>) {\n        const datas = {};\n        let distWidth = 0;\n        let distHeight = 0;\n        const rect = moveable.getRect();\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas, parentDirection: e.direction || [1, 1] };\n            },\n            request(e: IObject<any>) {\n                if (\"offsetWidth\" in e) {\n                    distWidth = e.offsetWidth - rect.offsetWidth;\n                } else if (\"deltaWidth\" in e) {\n                    distWidth += e.deltaWidth;\n                }\n                if (\"offsetHeight\" in e) {\n                    distHeight = e.offsetHeight - rect.offsetHeight;\n                } else if (\"deltaHeight\" in e) {\n                    distHeight += e.deltaHeight;\n                }\n\n                return { datas, parentDist: [distWidth, distHeight] };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n\n/**\n * Whether or not target can be resized. (default: false)\n * @name Moveable.Resizable#resizable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     resizable: false,\n * });\n *\n * moveable.resizable = true;\n */\n\n/**\n * throttle of width, height when resize.\n * @name Moveable.Resizable#throttleResize\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   throttleResize: 0,\n * });\n *\n * moveable.throttleResize = 1;\n */\n/**\n * When resize or scale, keeps a ratio of the width, height. (default: false)\n * @name Moveable.Resizable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n/**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Resizable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable.Resizable\n * @event resizeStart\n * @param {Moveable.Resizable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable.Resizable\n * @event resize\n * @param {Moveable.Resizable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable.Resizable\n * @event resizeEnd\n * @param {Moveable.Resizable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n /**\n * When the group resize starts, the `resizeGroupStart` event is called.\n * @memberof Moveable.Resizable\n * @event resizeGroupStart\n * @param {Moveable.Resizable.OnResizeGroupStart} - Parameters for the `resizeGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     resizable: true\n * });\n * moveable.on(\"resizeGroupStart\", ({ targets }) => {\n *     console.log(\"onResizeGroupStart\", targets);\n * });\n */\n\n /**\n * When the group resize, the `resizeGroup` event is called.\n * @memberof Moveable.Resizable\n * @event resizeGroup\n * @param {Moveable.Resizable.onResizeGroup} - Parameters for the `resizeGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     resizable: true\n * });\n * moveable.on(\"resizeGroup\", ({ targets, events }) => {\n *     console.log(\"onResizeGroup\", targets);\n *     events.forEach(ev => {\n *         const offset = [\n *             direction[0] < 0 ? -ev.delta[0] : 0,\n *             direction[1] < 0 ? -ev.delta[1] : 0,\n *         ];\n *         // ev.drag is a drag event that occurs when the group resize.\n *         const left = offset[0] + ev.drag.beforeDist[0];\n *         const top = offset[1] + ev.drag.beforeDist[1];\n *         const width = ev.width;\n *         const top = ev.top;\n *     });\n * });\n */\n\n/**\n * When the group resize finishes, the `resizeGroupEnd` event is called.\n * @memberof Moveable.Resizable\n * @event resizeGroupEnd\n * @param {Moveable.Resizable.OnResizeGroupEnd} - Parameters for the `resizeGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     resizable: true\n * });\n * moveable.on(\"resizeGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onResizeGroupEnd\", targets, isDrag);\n * });\n */\n","import {\n    throttle, getDirection, triggerEvent, multiply2,\n    fillParams, getKeepRatioHeight, getKeepRatioWidth, getDistSize, fillEndParams, directionCondition,\n} from \"../utils\";\nimport { MIN_SCALE } from \"../consts\";\nimport {\n    setDragStart, getDragDist,\n    getAbsoluteFixedPosition,\n    resolveTransformEvent,\n    convertTransformFormat,\n    getScaleDist,\n    fillTransformStartEvent,\n    fillTransformEvent,\n    setDefaultTransformIndex,\n} from \"../gesto/GestoUtils\";\nimport { renderAllDirections, renderDiagonalDirections } from \"../renderDirection\";\nimport {\n    ScalableProps, ResizableProps, OnScaleGroup, OnScaleGroupEnd,\n    Renderer, OnScaleGroupStart, DraggableProps, OnDragStart,\n    SnappableState, GroupableProps, OnScaleStart,\n    OnScale, OnScaleEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\nimport {\n    triggerChildAble,\n} from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { getRad, caculate, createRotateMatrix, plus, minus } from \"../matrix\";\nimport CustomGesto from \"../gesto/CustomGesto\";\nimport { checkSnapScale } from \"./Snappable\";\nimport { isArray, IObject } from \"@daybrush/utils\";\n\n/**\n * @namespace Scalable\n * @memberof Moveable\n * @description Scalable indicates whether the target's x and y can be scale of transform.\n */\nexport default {\n    name: \"scalable\",\n    ableGroup: \"size\",\n    canPinch: true,\n    props: {\n        scalable: Boolean,\n        throttleScale: Number,\n        renderDirections: String,\n        keepRatio: Boolean,\n    } as const,\n    events: {\n        onScaleStart: \"scaleStart\",\n        onScale: \"scale\",\n        onScaleEnd: \"scaleEnd\",\n        onScaleGroupStart: \"scaleGroupStart\",\n        onScaleGroup: \"scaleGroup\",\n        onScaleGroupEnd: \"scaleGroupEnd\",\n    } as const,\n    render(\n        moveable: MoveableManagerInterface<Partial<ResizableProps & ScalableProps>>,\n        React: Renderer): any[] | undefined {\n        const { resizable, scalable, edge } = moveable.props;\n        if (!resizable && scalable) {\n            if (edge) {\n                return renderDiagonalDirections(moveable, React);\n            }\n            return renderAllDirections(moveable, React);\n        }\n    },\n    dragControlCondition: directionCondition,\n    dragControlStart(\n        moveable: MoveableManagerInterface<ScalableProps & DraggableProps, SnappableState>,\n        e: any) {\n        const { datas, isPinch, inputEvent, parentDirection } = e;\n        const direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n        const {\n            width,\n            height,\n            targetTransform,\n            target,\n        } = moveable.state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        if (!isPinch) {\n            setDragStart(moveable, e);\n        }\n        setDefaultTransformIndex(e);\n\n        datas.datas = {};\n        datas.transform = targetTransform;\n        datas.prevDist = [1, 1];\n        datas.direction = direction;\n        datas.width = width;\n        datas.height = height;\n        datas.startValue = [1, 1];\n        datas.fixedDirection = direction.map((dir: number) => -dir);\n        datas.fixedPosition = getAbsoluteFixedPosition(moveable, direction);\n\n        const params = fillParams<OnScaleStart>(moveable, e, {\n            direction,\n            set: (scale: number[]) => {\n                datas.startValue = scale;\n            },\n            ...fillTransformStartEvent(e),\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ) as OnDragStart,\n        });\n        const result = triggerEvent<ScalableProps, \"onScaleStart\">(moveable, \"onScaleStart\", params);\n\n        if (result !== false) {\n            datas.isScale = true;\n            moveable.state.snapRenderInfo = {\n                request: e.isRequest,\n                direction,\n            };\n\n        }\n        return datas.isScale ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<ScalableProps & DraggableProps & GroupableProps, SnappableState>,\n        e: any) {\n        resolveTransformEvent(e, \"scale\");\n        const {\n            datas, distX, distY,\n            parentScale,\n            parentDistance,\n            parentKeepRatio,\n            parentFlag, isPinch,\n            dragClient,\n            parentDist,\n            isRequest,\n        } = e;\n        const {\n            prevDist,\n            direction,\n            width,\n            height,\n            isScale,\n            startValue,\n        } = datas;\n\n        if (!isScale) {\n            return false;\n        }\n\n        const {\n            throttleScale,\n            parentMoveable,\n        } = moveable.props;\n        let sizeDirection = direction;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = moveable.props.keepRatio || parentKeepRatio;\n        const state = moveable.state;\n        const isWidth = sizeDirection[0] || !sizeDirection[1];\n        const startWidth = width * startValue[0];\n        const startHeight = height * startValue[1];\n        const ratio = isWidth ? startHeight / startWidth : startWidth / startHeight;\n        let scaleX: number = 1;\n        let scaleY: number = 1;\n        let fixedPosition = dragClient;\n\n        if (!dragClient) {\n            if (!parentFlag && isPinch) {\n                fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n            } else {\n                fixedPosition = datas.fixedPosition;\n            }\n        }\n\n        if (parentDist) {\n            scaleX = (width + parentDist[0]) / width;\n            scaleY = (height + parentDist[1]) / height;\n        } else if (parentScale) {\n            scaleX = parentScale[0];\n            scaleY = parentScale[1];\n        } else if (isPinch) {\n            if (parentDistance) {\n                scaleX = (width + parentDistance) / width;\n                scaleY = (height + parentDistance * height / width) / height;\n            }\n        } else {\n            const dragDist = getDragDist({ datas, distX, distY });\n\n            let distWidth = sizeDirection[0] * dragDist[0];\n            let distHeight = sizeDirection[1] * dragDist[1];\n\n            if (keepRatio && width && height) {\n                const rad = getRad([0, 0], dragDist);\n                const standardRad = getRad([0, 0], sizeDirection);\n                const ratioRad = getRad([0, 0], [startWidth, startHeight]);\n                const size = getDistSize([distWidth, distHeight]);\n                const signSize = Math.cos(rad - standardRad) * size;\n\n                if (!sizeDirection[0]) {\n                    // top, bottom\n                    distHeight = signSize;\n                    distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n                } else if (!sizeDirection[1]) {\n                    // left, right\n                    distWidth = signSize;\n                    distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n                } else {\n                    // two-way\n                    distWidth = Math.cos(ratioRad) * signSize;\n                    distHeight = Math.sin(ratioRad) * signSize;\n                }\n            }\n            scaleX = (width + distWidth) / width;\n            scaleY = (height + distHeight) / height;\n        }\n\n        scaleX = sizeDirection[0] || keepRatio ? scaleX * startValue[0] : startValue[0];\n        scaleY = sizeDirection[1] || keepRatio ? scaleY * startValue[1] : startValue[1];\n\n        if (scaleX === 0) {\n            scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        if (scaleY === 0) {\n            scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n\n        const dist = [scaleX / startValue[0], scaleY / startValue[1]];\n        let scale = [scaleX, scaleY];\n\n        if (!isPinch && moveable.props.groupable) {\n            const snapRenderInfo = state.snapRenderInfo || {};\n            const stateDirection = snapRenderInfo.direction;\n\n            if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n                state.snapRenderInfo = { direction, request: e.isRequest, };\n            }\n        }\n        let snapDist = [0, 0];\n\n        if (!isPinch) {\n            snapDist = checkSnapScale(\n                moveable,\n                dist,\n                direction,\n                datas.fixedPosition,\n                isRequest,\n                datas,\n            );\n        }\n\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n                if (isWidth) {\n                    dist[0] = throttle(dist[0] * startValue[0], throttleScale!) / startValue[0];\n                } else {\n                    dist[1] = throttle(dist[1] * startValue[1], throttleScale!) / startValue[1];\n                }\n            }\n\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                dist[0] += snapDist[0];\n                const snapHeight = getKeepRatioHeight(width * dist[0] * startValue[0], isWidth, ratio);\n\n                dist[1] = snapHeight / height / startValue[1];\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                dist[1] += snapDist[1];\n                const snapWidth = getKeepRatioWidth(height * dist[1] * startValue[1], isWidth, ratio);\n\n                dist[0] = snapWidth / width / startValue[0];\n            }\n        } else {\n            dist[0] += snapDist[0];\n            dist[1] += snapDist[1];\n            if (!snapDist[0]) {\n                dist[0] = throttle(dist[0] * startValue[0], throttleScale!) / startValue[0];\n            }\n            if (!snapDist[1]) {\n                dist[1] = throttle(dist[1] * startValue[1], throttleScale!) / startValue[1];\n            }\n        }\n        if (dist[0] === 0) {\n            dist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        if (dist[1] === 0) {\n            dist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        const delta = [dist[0] / prevDist[0], dist[1] / prevDist[1]];\n        scale = multiply2(dist, startValue);\n\n        const inverseDist = getScaleDist(moveable, dist, direction, fixedPosition, datas);\n        const inverseDelta = minus(inverseDist, datas.prevInverseDist || [0, 0]);\n\n        datas.prevDist = dist;\n        datas.prevInverseDist = inverseDist;\n        if (\n            scaleX === prevDist[0] && scaleY === prevDist[1]\n            && inverseDelta.every(num => !num)\n            && !parentMoveable\n        ) {\n            return false;\n        }\n\n        const nextTransform = convertTransformFormat(\n            datas, `scale(${scale.join(\", \")})`, `scale(${dist.join(\", \")})`);\n        const params = fillParams<OnScale>(moveable, e, {\n            offsetWidth: width,\n            offsetHeight: height,\n            direction,\n\n            // beforeScale,\n            // beforeDist,\n            // beforeDelta,\n\n            scale,\n            dist,\n            delta,\n\n            isPinch: !!isPinch,\n            ...fillTransformEvent(\n                moveable,\n                nextTransform,\n                inverseDelta,\n                isPinch,\n                e,\n            ),\n        });\n        triggerEvent(moveable, \"onScale\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ScalableProps>, e: any) {\n        const { datas, isDrag } = e;\n        if (!datas.isScale) {\n            return false;\n        }\n\n        datas.isScale = false;\n\n        triggerEvent(moveable, \"onScaleEnd\", fillEndParams<OnScaleEnd>(moveable, e, {}));\n        return isDrag;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const direction = params.direction;\n        const fixedPosition = datas.fixedPosition;\n\n        datas.moveableScale = moveable.scale;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                const pos = getAbsoluteFixedPosition(child, direction);\n\n                const [originalX, originalY] = caculate(\n                    createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3),\n                    [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1],\n                    3,\n                );\n                ev.datas.originalX = originalX;\n                ev.datas.originalY = originalY;\n\n                return ev;\n            },\n        );\n\n        const nextParams: OnScaleGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n\n        datas.isScale = result !== false;\n        return datas.isScale ? nextParams : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        if (!datas.isScale) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n        if (!params) {\n            return;\n        }\n\n        const moveableScale = datas.moveableScale;\n        moveable.scale = [\n            params.scale[0] * moveableScale[0],\n            params.scale[1] * moveableScale[1],\n        ];\n        const keepRatio = moveable.props.keepRatio;\n        const { dist, scale } = params;\n\n        // const fixedDirection = datas.fixedDirection;\n        const fixedPosition = datas.fixedPosition;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const [clientX, clientY] = caculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        ev.datas.originalX * dist[0],\n                        ev.datas.originalY * dist[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...ev,\n                    parentDist: null,\n                    parentScale: scale,\n                    parentKeepRatio: keepRatio,\n                    dragClient: plus(fixedPosition, [clientX, clientY]),\n                };\n            },\n        );\n        const nextParams: OnScaleGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onScaleGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isScale) {\n            return;\n        }\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams = fillEndParams<OnScaleGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n        });\n\n        triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Scalable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.direction=[1, 1]] - Direction to scale\n     * @param {number} [e.deltaWidth] - delta number of width\n     * @param {number} [e.deltaHeight] - delta number of height\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"scalable\");\n     *\n     * // request\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request() {\n        const datas = {};\n        let distWidth = 0;\n        let distHeight = 0;\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas, parentDirection: e.direction || [1, 1] };\n            },\n            request(e: IObject<any>) {\n                distWidth += e.deltaWidth;\n                distHeight += e.deltaHeight;\n\n                return { datas, parentDist: [distWidth, distHeight] };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n\n/**\n * Whether or not target can scaled. (default: false)\n * @name Moveable.Scalable#scalable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.scalable = true;\n */\n\n/**\n * throttle of scaleX, scaleY when scale.\n * @name Moveable.Scalable#throttleScale\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleScale = 0.1;\n */\n/**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Scalable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n/**\n * When resize or scale, keeps a ratio of the width, height. (default: false)\n * @name Moveable.Scalable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable.Scalable\n * @event scaleStart\n * @param {Moveable.Scalable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable.Scalable\n * @event scale\n * @param {Moveable.Scalable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable.Scalable\n * @event scaleEnd\n * @param {Moveable.Scalable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group scale starts, the `scaleGroupStart` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroupStart\n* @param {Moveable.Scalable.OnScaleGroupStart} - Parameters for the `scaleGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroupStart\", ({ targets }) => {\n*     console.log(\"onScaleGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group scale, the `scaleGroup` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroup\n* @param {Moveable.Scalable.OnScaleGroup} - Parameters for the `scaleGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroup\", ({ targets, events }) => {\n*     console.log(\"onScaleGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group scale.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const scaleX = ev.scale[0];\n*         const scaleY = ev.scale[1];\n*     });\n* });\n*/\n\n/**\n * When the group scale finishes, the `scaleGroupEnd` event is called.\n * @memberof Moveable.Scalable\n * @event scaleGroupEnd\n * @param {Moveable.Scalable.OnScaleGroupEnd} - Parameters for the `scaleGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     scalable: true\n * });\n * moveable.on(\"scaleGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onScaleGroupEnd\", targets, isDrag);\n * });\n */\n","import {\n    prefix, getLineStyle, getDirection, getAbsolutePosesByState,\n    triggerEvent, fillParams, fillEndParams,\n } from \"../utils\";\nimport {\n    convertDimension, invert, multiply,\n    caculate,\n    createIdentityMatrix,\n    ignoreDimension,\n    minus,\n    createWarpMatrix,\n    getRad,\n    plus,\n} from \"../matrix\";\nimport { NEARBY_POS } from \"../consts\";\nimport {\n    setDragStart, getDragDist, getPosIndexesByDirection, setDefaultTransformIndex,\n    fillTransformStartEvent, resolveTransformEvent, convertTransformFormat, fillOriginalTransform, getTransfromMatrix\n} from \"../gesto/GestoUtils\";\nimport {\n    WarpableProps, ScalableProps, ResizableProps,\n    Renderer, SnappableProps, SnappableState,\n    OnWarpStart, OnWarp, OnWarpEnd, MoveableManagerInterface,\n} from \"../types\";\nimport { hasClass, dot } from \"@daybrush/utils\";\nimport { renderAllDirections } from \"../renderDirection\";\nimport { hasGuidelines, checkMoveableSnapBounds } from \"./Snappable\";\n\nfunction getMiddleLinePos(pos1: number[], pos2: number[]) {\n    return pos1.map((pos, i) => dot(pos, pos2[i], 1, 2));\n}\n\nfunction getTriangleRad(pos1: number[], pos2: number[], pos3: number[]) {\n    // pos1 Rad\n    const rad1 = getRad(pos1, pos2);\n    const rad2 = getRad(pos1, pos3);\n\n    const rad = rad2 - rad1;\n\n    return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1: number[][], poses2: number[][]) {\n    const rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n    const rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n    const pi = Math.PI;\n\n    if ((rad1 >= pi && rad2 <= pi) || (rad1 <= pi && rad2 >= pi)) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * @namespace Moveable.Warpable\n * @description Warpable indicates whether the target can be warped(distorted, bented).\n */\nexport default {\n    name: \"warpable\",\n    ableGroup: \"size\",\n    props: {\n        warpable: Boolean,\n        renderDirections: Array,\n    } as const,\n    events: {\n        onWarpStart: \"warpStart\",\n        onWarp: \"warp\",\n        onWarpEnd: \"warpEnd\",\n    } as const,\n    render(moveable: MoveableManagerInterface<ResizableProps & ScalableProps & WarpableProps>, React: Renderer): any[] {\n        const { resizable, scalable, warpable } = moveable.props;\n\n        if (resizable || scalable || !warpable) {\n            return [];\n        }\n        const { pos1, pos2, pos3, pos4 } = moveable.state;\n\n        const linePosFrom1 = getMiddleLinePos(pos1, pos2);\n        const linePosFrom2 = getMiddleLinePos(pos2, pos1);\n        const linePosFrom3 = getMiddleLinePos(pos1, pos3);\n        const linePosFrom4 = getMiddleLinePos(pos3, pos1);\n        const linePosTo1 = getMiddleLinePos(pos3, pos4);\n        const linePosTo2 = getMiddleLinePos(pos4, pos3);\n        const linePosTo3 = getMiddleLinePos(pos2, pos4);\n        const linePosTo4 = getMiddleLinePos(pos4, pos2);\n\n        return [\n            <div className={prefix(\"line\")} key=\"middeLine1\" style={getLineStyle(linePosFrom1, linePosTo1)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine2\" style={getLineStyle(linePosFrom2, linePosTo2)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine3\" style={getLineStyle(linePosFrom3, linePosTo3)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine4\" style={getLineStyle(linePosFrom4, linePosTo4)}></div>,\n            ...renderAllDirections(moveable, React),\n        ];\n    },\n    dragControlCondition(e: any) {\n        if (e.isRequest) {\n            return false;\n        }\n        return hasClass(e.inputEvent.target, prefix(\"direction\"));\n    },\n    dragControlStart(\n        moveable: MoveableManagerInterface<WarpableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, inputEvent } = e;\n        const { target } = moveable.props;\n        const { target: inputTarget } = inputEvent;\n        const direction = getDirection(inputTarget);\n\n        if (!direction || !target) {\n            return false;\n        }\n        const state = moveable.state;\n        const {\n            transformOrigin, is3d,\n            targetTransform, targetMatrix,\n            width, height,\n            left, top,\n        } = state;\n\n        datas.datas = {};\n        datas.targetTransform = targetTransform;\n        datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n        datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n        datas.direction = direction;\n        datas.left = left;\n        datas.top = top;\n\n        setDragStart(moveable, e);\n        setDefaultTransformIndex(e);\n\n        datas.poses = [\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n        ].map(p => minus(p, transformOrigin));\n\n        datas.nextPoses = datas.poses.map(([x, y]: number[]) => caculate(datas.warpTargetMatrix, [x, y, 0, 1], 4));\n        datas.startValue = createIdentityMatrix(4);\n        datas.prevMatrix = createIdentityMatrix(4);\n        datas.absolutePoses = getAbsolutePosesByState(state);\n        datas.posIndexes = getPosIndexesByDirection(direction);\n\n        state.snapRenderInfo = {\n            request: e.isRequest,\n            direction,\n        };\n\n        const params = fillParams<OnWarpStart>(moveable, e, {\n            set: (matrix: number[]) => {\n                datas.startValue = matrix;\n            },\n            ...fillTransformStartEvent(e),\n        });\n        const result = triggerEvent(moveable, \"onWarpStart\", params);\n        if (result !== false) {\n            datas.isWarp = true;\n        }\n        return datas.isWarp;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<WarpableProps & SnappableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, isRequest } = e;\n        let { distX, distY } = e;\n        const {\n            targetInverseMatrix, prevMatrix, isWarp, startValue,\n            poses,\n            posIndexes,\n            absolutePoses,\n        } = datas;\n\n        if (!isWarp) {\n            return false;\n        }\n        resolveTransformEvent(e, \"matrix3d\");\n        if (hasGuidelines(moveable, \"warpable\")) {\n            const selectedPoses: number[][] = posIndexes.map((index: number) => absolutePoses[index]);\n\n            if (selectedPoses.length > 1) {\n                selectedPoses.push([\n                    (selectedPoses[0][0] + selectedPoses[1][0]) / 2,\n                    (selectedPoses[0][1] + selectedPoses[1][1]) / 2,\n                ]);\n            }\n\n            const {\n                horizontal: horizontalSnapInfo,\n                vertical: verticalSnapInfo,\n            } = checkMoveableSnapBounds(\n                moveable,\n                isRequest,\n                selectedPoses.map(pos => [pos[0] + distX, pos[1] + distY]),\n            );\n\n            distY -= horizontalSnapInfo.offset;\n            distX -= verticalSnapInfo.offset;\n        }\n\n        const dist = getDragDist({ datas, distX, distY }, true);\n        const nextPoses = datas.nextPoses.slice();\n\n        posIndexes.forEach((index: number) => {\n            nextPoses[index] = plus(nextPoses[index], dist);\n        });\n\n        if (!NEARBY_POS.every(\n            nearByPoses => isValidPos(nearByPoses.map(i => poses[i]), nearByPoses.map(i => nextPoses[i])),\n        )) {\n            return false;\n        }\n        const h = createWarpMatrix(\n            poses[0],\n            poses[2],\n            poses[1],\n            poses[3],\n            nextPoses[0],\n            nextPoses[2],\n            nextPoses[1],\n            nextPoses[3],\n        );\n\n        if (!h.length) {\n            return false;\n        }\n        // B * A * M\n        const afterMatrix = multiply(targetInverseMatrix, h, 4);\n\n        // B * M * A\n        const matrix = getTransfromMatrix(datas, afterMatrix, true);\n\n        const delta = multiply(invert(prevMatrix, 4), matrix, 4);\n\n        datas.prevMatrix = matrix;\n        const totalMatrix = multiply(startValue, matrix, 4);\n        const nextTransform = convertTransformFormat(\n            datas, `matrix3d(${totalMatrix.join(\", \")})`, `matrix3d(${matrix.join(\", \")})`);\n\n        fillOriginalTransform(e, nextTransform);\n        triggerEvent(moveable, \"onWarp\", fillParams<OnWarp>(moveable, e, {\n            delta,\n            matrix: totalMatrix,\n            dist: matrix,\n            multiply,\n            transform: nextTransform,\n        }));\n        return true;\n    },\n    dragControlEnd(\n        moveable: MoveableManagerInterface<WarpableProps>,\n        e: any,\n    ) {\n        const { datas, isDrag } = e;\n        if (!datas.isWarp) {\n            return false;\n        }\n        datas.isWarp = false;\n\n        triggerEvent(moveable, \"onWarpEnd\", fillEndParams<OnWarpEnd>(moveable, e, {}));\n        return isDrag;\n    },\n};\n\n/**\n * Whether or not target can be warped. (default: false)\n * @name Moveable.Warpable#warpable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.warpable = true;\n */\n\n /**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Warpable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     warpable: true,\n *     renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable.Warpable\n* @event warpStart\n* @param {Moveable.Warpable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n/**\n * When warping, the warp event is called.\n * @memberof Moveable.Warpable\n * @event warp\n * @param {Moveable.Warpable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable.Warpable\n * @event warpEnd\n * @param {Moveable.Warpable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n","import { prefix } from \"./utils\";\n\nexport const AREA_PIECES = prefix(\"area-pieces\");\nexport const AREA_PIECE = prefix(\"area-piece\");\nexport const AVOID = prefix(\"avoid\");\n","import {\n    createWarpMatrix,\n} from \"../matrix\";\nimport { ref } from \"framework-utils\";\nimport { getRect, caculateInversePosition, makeMatrixCSS, prefix } from \"../utils\";\nimport {\n    Renderer, GroupableProps, DragAreaProps, MoveableManagerInterface, MoveableGroupInterface\n} from \"../types\";\nimport { AREA_PIECE, AVOID, AREA_PIECES } from \"../classNames\";\nimport { addClass, removeClass } from \"@daybrush/utils\";\n\nfunction restoreStyle(moveable: MoveableManagerInterface) {\n    const el = moveable.areaElement;\n    const { width, height } = moveable.state;\n\n    removeClass(el, AVOID);\n\n    el.style.cssText += `left: 0px; top: 0px; width: ${width}px; height: ${height}px`;\n}\n\nfunction renderPieces(React: Renderer): any {\n    return (<div key=\"area_pieces\" className={AREA_PIECES}>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n    </div>);\n}\nexport default {\n    name: \"dragArea\",\n    props: {\n        dragArea: Boolean,\n        passDragArea: Boolean,\n    } as const,\n    events: {\n        onClick: \"click\",\n        onClickGroup: \"clickGroup\",\n    } as const,\n    render(moveable: MoveableManagerInterface<GroupableProps>, React: Renderer): any[] {\n        const { target, dragArea, groupable, passDragArea } = moveable.props;\n        const { width, height, renderPoses } = moveable.state;\n\n        const className = passDragArea ? prefix(\"area\", \"pass\") : prefix(\"area\");\n        if (groupable) {\n            return [\n                <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={className}></div>,\n                renderPieces(React),\n            ];\n        }\n        if (!target || !dragArea) {\n            return [];\n        }\n        const h = createWarpMatrix(\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n            renderPoses[0],\n            renderPoses[1],\n            renderPoses[2],\n            renderPoses[3],\n        );\n        const transform = h.length ? makeMatrixCSS(h, true) : \"none\";\n\n        return [\n            <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={className} style={{\n                top: \"0px\",\n                left: \"0px\",\n                width: `${width}px`,\n                height: `${height}px`,\n                transformOrigin: \"0 0\",\n                transform,\n            }}></div>,\n            renderPieces(React),\n        ];\n    },\n    dragStart(moveable: MoveableManagerInterface, { datas, clientX, clientY, inputEvent }: any) {\n        if (!inputEvent) {\n            return false;\n        }\n        datas.isDragArea = false;\n        const areaElement = moveable.areaElement;\n        const {\n            moveableClientRect,\n            renderPoses,\n            rootMatrix,\n            is3d,\n        } = moveable.state;\n        const { left, top } = moveableClientRect;\n        const {\n            left: relativeLeft,\n            top: relativeTop,\n            width,\n            height,\n        } = getRect(renderPoses);\n        const n = is3d ? 4 : 3;\n        let [posX, posY] = caculateInversePosition(rootMatrix, [clientX - left, clientY - top], n);\n\n        posX -= relativeLeft;\n        posY -= relativeTop;\n        const rects = [\n            { left: relativeLeft, top: relativeTop, width, height: posY - 10 },\n            { left: relativeLeft, top: relativeTop, width: posX - 10, height },\n            { left: relativeLeft, top: relativeTop + posY + 10, width, height: height - posY - 10 },\n            { left: relativeLeft + posX + 10, top: relativeTop, width: width - posX - 10, height },\n        ];\n\n        const children = [].slice.call(areaElement.nextElementSibling!.children) as HTMLElement[];\n        rects.forEach((rect, i) => {\n            children[i].style.cssText\n                = `left: ${rect.left}px;top: ${rect.top}px; width: ${rect.width}px; height: ${rect.height}px;`;\n        });\n        addClass(areaElement, AVOID);\n        return;\n    },\n    drag(moveable: MoveableManagerInterface, { datas, inputEvent }: any) {\n        if (!inputEvent) {\n            return false;\n        }\n        if (!datas.isDragArea) {\n            datas.isDragArea = true;\n            restoreStyle(moveable);\n        }\n    },\n    dragEnd(moveable: MoveableManagerInterface<DragAreaProps>, e: any) {\n        const { inputEvent, datas } = e;\n        if (!inputEvent) {\n            return false;\n        }\n        if (!datas.isDragArea) {\n            restoreStyle(moveable);\n        }\n    },\n    dragGroupStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragGroupEnd(\n        moveable: MoveableGroupInterface<DragAreaProps>,\n        e: any,\n    ) {\n       return this.dragEnd(moveable, e);\n    },\n    unset(moveable: MoveableManagerInterface<DragAreaProps>) {\n        restoreStyle(moveable);\n    },\n};\n\n/**\n * Add an event to the moveable area instead of the target for stopPropagation. (default: false, true in group)\n * @name Moveable#dragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n/**\n * Set `pointerEvents: none;` css to pass events in dragArea. (default: false)\n * @name Moveable#passDragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n","import { prefix, getControlTransform } from \"../utils\";\nimport { Renderer, OriginOptions, MoveableManagerInterface } from \"../types\";\n\nexport default {\n    name: \"origin\",\n    props: {\n        origin: Boolean,\n    } as const,\n    events: {} as const,\n    render(moveable: MoveableManagerInterface<OriginOptions>, React: Renderer): any[] {\n        const { beforeOrigin, rotation } = moveable.state;\n\n        return [\n            <div className={prefix(\"control\", \"origin\")}\n                style={getControlTransform(rotation, beforeOrigin)} key=\"beforeOrigin\"></div>,\n        ];\n    },\n};\n\n/**\n * Whether or not the origin controlbox will be visible or not (default: true)\n * @name Moveable#origin\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.origin = true;\n */\n","\nimport { ScrollableProps, OnScroll, MoveableManagerInterface, MoveableGroupInterface } from \"../types\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport DragScroll from \"@scena/dragscroll\";\n\nfunction getDefaultScrollPosition(e: { scrollContainer: HTMLElement, direction: number[] }) {\n    const scrollContainer = e.scrollContainer;\n\n    return [\n        scrollContainer.scrollLeft,\n        scrollContainer.scrollTop,\n    ];\n}\n/**\n * @namespace Moveable.Scrollable\n * @description Whether or not target can be scrolled to the scroll container (default: false)\n */\nexport default {\n    name: \"scrollable\",\n    canPinch: true,\n    props: {\n        scrollable: Boolean,\n        scrollContainer: Object,\n        scrollThreshold: Number,\n        getScrollPosition: Function,\n    } as const,\n    events: {\n        onScroll: \"scroll\",\n        onScrollGroup: \"scrollGroup\",\n    } as const,\n    dragStart(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        const props = moveable.props;\n        const {\n            scrollContainer = moveable.getContainer(),\n        } = props;\n\n        const dragScroll = new DragScroll();\n\n        e.datas.dragScroll = dragScroll;\n\n        const gestoName = e.isControl ? \"controlGesto\" : \"targetGesto\";\n        const targets = e.targets;\n\n        dragScroll.on(\"scroll\", ({ container, direction }) => {\n            const params = fillParams<OnScroll>(moveable, e, {\n                scrollContainer: container,\n                direction,\n            }) as any;\n\n            const eventName = targets ? \"onScrollGroup\" : \"onScroll\" as any;\n            if (targets) {\n                params.targets = targets;\n            }\n            triggerEvent(moveable, eventName, params);\n        }).on(\"move\", ({ offsetX, offsetY }) => {\n            moveable[gestoName].scrollBy(offsetX, offsetY, e.inputEvent, false);\n        });\n        dragScroll.dragStart(e, {\n            container: scrollContainer as HTMLElement,\n        });\n    },\n    checkScroll(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        const {\n            dragScroll,\n        } = e.datas;\n        if (!dragScroll) {\n            return;\n        }\n        const {\n            scrollContainer = moveable.getContainer(),\n            scrollThreshold = 0,\n            getScrollPosition = getDefaultScrollPosition,\n        } = moveable.props;\n\n        dragScroll.drag(e, {\n            container: scrollContainer,\n            threshold: scrollThreshold,\n            getScrollPosition: (ev: any) => {\n                return getScrollPosition({ scrollContainer: ev.container, direction: ev.direction });\n            },\n        });\n\n        return true;\n    },\n    drag(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.checkScroll(moveable, e);\n    },\n    dragEnd(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        e.datas.dragScroll.dragEnd();\n        e.datas.dragScroll = null;\n    },\n    dragControlStart(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.dragStart(moveable, { ...e, isControl: true });\n    },\n    dragControl(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets, isControl: true });\n    },\n    dragGroupContro(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n};\n\n/**\n * Whether or not target can be scrolled to the scroll container (default: false)\n * @name Moveable.Scrollable#scrollable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n *\n * moveable.scrollable = true;\n */\n\n/**\n * The container to which scroll is applied (default: container)\n * @name Moveable.Scrollable#scrollContainer\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n */\n/**\n * Expand the range of the scroll check area. (default: 0)\n * @name Moveable.Scrollable#scrollThreshold\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n */\n\n/**\n * Sets a function to get the scroll position. (default: Function)\n * @name Moveable.Scrollable#getScrollPosition\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   scrollable: true,\n *   scrollContainer: document.body,\n *   scrollThreshold: 0,\n *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),\n * });\n *\n */\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scroll` event occur to scroll.\n * @memberof Moveable.Scrollable\n * @event scroll\n * @param {Moveable.Scrollable.OnScroll} - Parameters for the `scroll` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scrollGroup` event occur to scroll in group.\n * @memberof Moveable.Scrollable\n * @event scrollGroup\n * @param {Moveable.Scrollable.OnScrollGroup} - Parameters for the `scrollGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n","export default {\n    name: \"\",\n    props: {\n        target: Object,\n        dragTarget: Object,\n        container: Object,\n        rootContainer: Object,\n        zoom: Number,\n        transformOrigin: Array,\n        edge: Boolean,\n        ables: Array,\n        className: String,\n        pinchThreshold: Number,\n        pinchOutside: Boolean,\n        triggerAblesSimultaneously: Boolean,\n        checkInput: Boolean,\n        cspNonce: String,\n        translateZ: Number,\n    } as const,\n    events: {} as const,\n};\n","import { prefix, makeMatrixCSS } from \"../utils\";\nimport { Renderer, MoveableManagerInterface } from \"../types\";\nimport { createWarpMatrix } from \"../matrix\";\n\nexport default {\n    name: \"padding\",\n    props: {\n        padding: Object,\n    } as const,\n    events: {} as const,\n    render(moveable: MoveableManagerInterface, React: Renderer): any[] {\n        const props = moveable.props;\n        if (props.dragArea) {\n            return [];\n        }\n        const padding = props.padding || {};\n        const {\n            left = 0,\n            top = 0,\n            right = 0,\n            bottom = 0,\n        } = padding;\n        const {\n            renderPoses,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n        } = moveable.state;\n\n        const poses = [pos1, pos2, pos3, pos4];\n        const paddingDirections: number[][] = [];\n\n        if (left > 0) {\n            paddingDirections.push([0, 2]);\n        }\n        if (top > 0) {\n            paddingDirections.push([0, 1]);\n        }\n        if (right > 0) {\n            paddingDirections.push([1, 3]);\n        }\n        if (bottom > 0) {\n            paddingDirections.push([2, 3]);\n        }\n        return paddingDirections.map(([dir1, dir2], i) => {\n            const paddingPos1 = poses[dir1];\n            const paddingPos2 = poses[dir2];\n            const paddingPos3 = renderPoses[dir1];\n            const paddingPos4 = renderPoses[dir2];\n\n            const h = createWarpMatrix(\n                [0, 0],\n                [100, 0],\n                [0, 100],\n                [100, 100],\n                paddingPos1,\n                paddingPos2,\n                paddingPos3,\n                paddingPos4,\n            );\n            if (!h.length) {\n                return undefined;\n            }\n            return (<div key={`padding${i}`} className={prefix(\"padding\")} style={{\n                transform: makeMatrixCSS(h, true),\n            }}></div>);\n        });\n    },\n};\n\n/**\n * Add padding around the target to increase the drag area. (default: null)\n * @name Moveable#padding\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  target: document.querySelector(\".target\"),\n *  padding: { left: 0, top: 0, right: 0, bottom: 0 },\n * });\n * moveable.padding = { left: 10, top: 10, right: 10, bottom: 10 },\n * moveable.updateRect();\n */\n","import { convertCSSSize } from \"../../utils\";\nimport { ControlPose } from \"../../types\";\nimport { convertUnitSize } from \"@daybrush/utils\";\n\nconst RADIUS_DIRECTIONS = [\"nw\", \"ne\", \"se\", \"sw\"] as const;\n\nfunction caculateRatio(values: number[], size: number) {\n    const sumSize = values[0] + values[1];\n    const sumRatio = sumSize > size ? size / sumSize : 1;\n\n    values[0] *= sumRatio;\n    values[1] = size - values[1] * sumRatio;\n\n    return values;\n}\nexport const HORIZONTAL_RADIUS_ORDER = [1, 2, 5, 6];\nexport const VERTICAL_RADIUS_ORDER = [0, 3, 4, 7];\nexport const HORIZONTAL_RADIUS_DIRECTIONS = [1, -1, -1, 1] as const;\nexport const VERTICAL_RADIUS_DIRECTIONS = [1, 1, -1, -1] as const;\n\nexport function getRadiusStyles(\n    poses: number[][], controlPoses: ControlPose[],\n    isRelative: boolean,\n    width: number,\n    height: number,\n    left: number = 0,\n    top: number = 0,\n    right: number = width,\n    bottom: number = height,\n) {\n    const clipStyles: string[] = [];\n    let isVertical = false;\n\n    const raws = poses.map((pos, i) => {\n        const { horizontal, vertical } = controlPoses[i];\n        if (vertical && !isVertical) {\n            isVertical = true;\n            clipStyles.push(\"/\");\n        }\n\n        if (isVertical) {\n            const rawPos = Math.max(0, vertical === 1 ? pos[1] - top : bottom - pos[1]);\n            clipStyles.push(convertCSSSize(rawPos, height, isRelative));\n\n            return rawPos;\n        } else {\n            const rawPos = Math.max(0, horizontal === 1 ? pos[0] - left : right - pos[0]);\n            clipStyles.push(convertCSSSize(rawPos, width, isRelative));\n\n            return rawPos;\n        }\n    });\n\n    return {\n        styles: clipStyles,\n        raws,\n    };\n}\nexport function getRadiusRange(controlPoses: ControlPose[]) {\n    // [start, length]\n    const horizontalRange = [0, 0];\n    const verticalRange = [0, 0];\n    const length =  controlPoses.length;\n\n    for (let i = 0; i < length; ++i) {\n        const clipPose = controlPoses[i];\n\n        if (!clipPose.sub) {\n            continue;\n        }\n        if (clipPose.horizontal) {\n            if (horizontalRange[1] === 0) {\n                horizontalRange[0] = i;\n            }\n            horizontalRange[1] = i - horizontalRange[0] + 1;\n            verticalRange[0] = i + 1;\n        }\n        if (clipPose.vertical) {\n            if (verticalRange[1] === 0) {\n                verticalRange[0] = i;\n            }\n            verticalRange[1] = i - verticalRange[0] + 1;\n        }\n    }\n\n    return {\n        horizontalRange,\n        verticalRange,\n    };\n}\nexport function getRadiusValues(\n    values: string[],\n    width: number,\n    height: number,\n    left: number,\n    top: number,\n): ControlPose[] {\n    const splitIndex = values.indexOf(\"/\");\n    const splitLength = (splitIndex > -1 ? values.slice(0, splitIndex) : values).length;\n    const horizontalValues = values.slice(0, splitLength);\n    const verticalValues = values.slice(splitLength + 1);\n    const [\n        nwValue = \"0\",\n        neValue = nwValue,\n        seValue = nwValue,\n        swValue = neValue,\n    ] = horizontalValues;\n    const [\n        wnValue = nwValue,\n        enValue = wnValue,\n        esValue = wnValue,\n        wsValue = enValue,\n    ] = verticalValues;\n\n    const horizontalRawPoses = [nwValue, neValue, seValue, swValue].map(pos => convertUnitSize(pos, width));\n    const verticalRawPoses = [wnValue, enValue, esValue, wsValue].map(pos => convertUnitSize(pos, height));\n    const horizontalPoses = horizontalRawPoses.slice();\n    const verticalPoses = verticalRawPoses.slice();\n\n    [horizontalPoses[0], horizontalPoses[1]] = caculateRatio([horizontalPoses[0], horizontalPoses[1]], width);\n    [horizontalPoses[3], horizontalPoses[2]] = caculateRatio([horizontalPoses[3], horizontalPoses[2]], width);\n    [verticalPoses[0], verticalPoses[3]] = caculateRatio([verticalPoses[0], verticalPoses[3]], height);\n    [verticalPoses[1], verticalPoses[2]] = caculateRatio([verticalPoses[1], verticalPoses[2]], height);\n\n    const nextHorizontalPoses = horizontalPoses.slice(0, horizontalValues.length);\n    const nextVerticalPoses = verticalPoses.slice(0, verticalValues.length);\n    return [\n        ...nextHorizontalPoses.map((pos, i) => {\n            const direction = RADIUS_DIRECTIONS[i];\n\n            return {\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n                vertical: 0,\n                pos: [left + pos, top + (VERTICAL_RADIUS_DIRECTIONS[i] === -1 ? height : 0)],\n                sub: true,\n                raw: horizontalRawPoses[i],\n                direction,\n            };\n        }),\n        ...nextVerticalPoses.map((pos, i) => {\n            const direction = RADIUS_DIRECTIONS[i];\n\n            return {\n                horizontal: 0,\n                vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n                pos: [left + (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1 ? width : 0), top + pos],\n                sub: true,\n                raw: verticalRawPoses[i],\n                direction,\n            };\n        }),\n    ];\n}\nexport function removeRadiusPos(\n    controlPoses: ControlPose[],\n    poses: number[][],\n    index: number,\n    startIndex: number,\n    length: number = poses.length,\n) {\n    const {\n        horizontalRange,\n        verticalRange,\n    } = getRadiusRange(controlPoses.slice(startIndex));\n    const radiuslIndex = index - startIndex;\n    let deleteCount = 0;\n\n    if (radiuslIndex === 0) {\n        deleteCount = length;\n    } else if (radiuslIndex > 0 && radiuslIndex < horizontalRange[1]) {\n        deleteCount = horizontalRange[1] - radiuslIndex;\n    } else if (radiuslIndex >= verticalRange[0]) {\n        deleteCount = verticalRange[0] + verticalRange[1] - radiuslIndex;\n    } else {\n        return;\n    }\n    controlPoses.splice(index, deleteCount);\n    poses.splice(index, deleteCount);\n}\nexport function addRadiusPos(\n    controlPoses: ControlPose[],\n    poses: number[][],\n    startIndex: number,\n    horizontalIndex: number,\n    verticalIndex: number,\n    distX: number,\n    distY: number,\n    right: number,\n    bottom: number,\n    left: number = 0,\n    top: number = 0,\n) {\n    const {\n        horizontalRange,\n        verticalRange,\n    } = getRadiusRange(controlPoses.slice(startIndex));\n    if (horizontalIndex > -1) {\n        const radiusX = HORIZONTAL_RADIUS_DIRECTIONS[horizontalIndex] === 1\n            ? distX - left\n            : right - distX;\n        for (let i = horizontalRange[1]; i <= horizontalIndex; ++i) {\n            const y = VERTICAL_RADIUS_DIRECTIONS[i] === 1 ? top : bottom;\n            let x = 0;\n            if (horizontalIndex === i) {\n                x = distX;\n            } else if (i === 0) {\n                x = left + radiusX;\n            } else if (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1) {\n                x = right - (poses[startIndex][0] - left);\n            }\n            controlPoses.splice(startIndex + i, 0, {\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n                vertical: 0,\n                pos: [x, y],\n            });\n            poses.splice(startIndex + i, 0, [x, y]);\n\n            if (i === 0) {\n                break;\n            }\n        }\n    } else if (verticalIndex > - 1) {\n        const radiusY = VERTICAL_RADIUS_DIRECTIONS[verticalIndex] === 1\n            ? distY - top\n            : bottom - distY;\n        if (horizontalRange[1] === 0 && verticalRange[1] === 0) {\n            const pos = [\n                left + radiusY,\n                top,\n            ];\n            controlPoses.push({\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[0],\n                vertical: 0,\n                pos,\n            });\n            poses.push(pos);\n        }\n\n        const startVerticalIndex = verticalRange[0];\n        for (let i = verticalRange[1]; i <= verticalIndex; ++i) {\n            const x = HORIZONTAL_RADIUS_DIRECTIONS[i] === 1 ? left : right;\n            let y = 0;\n            if (verticalIndex === i) {\n                y = distY;\n            } else if (i === 0) {\n                y = top + radiusY;\n            } else if (VERTICAL_RADIUS_DIRECTIONS[i] === 1) {\n                y = poses[startIndex + startVerticalIndex][1];\n            } else if (VERTICAL_RADIUS_DIRECTIONS[i] === -1) {\n                y = bottom - (poses[startIndex + startVerticalIndex][1] - top);\n            }\n            controlPoses.push({\n                horizontal: 0,\n                vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n                pos: [x, y],\n            });\n            poses.push([x, y]);\n            if (i === 0) {\n                break;\n            }\n        }\n    }\n}\nexport function splitRadiusPoses(\n    controlPoses: ControlPose[],\n    raws: number[] = controlPoses.map(pos => pos.raw!),\n) {\n    const horizontals = controlPoses\n    .map((pos , i) => pos.horizontal ? raws[i] : null).filter(pos => pos != null) as number[];\n    const verticals = controlPoses\n        .map((pos , i) => pos.vertical ? raws[i] : null).filter(pos => pos != null) as number[];\n\n    return {\n        horizontals,\n        verticals,\n    };\n}\n","import {\n    Renderer, ClippableProps, OnClip,\n    ClippableState, OnClipEnd, OnClipStart,\n    ControlPose, MoveableManagerInterface\n} from \"../types\";\nimport { splitBracket, splitComma, splitUnit, splitSpace, convertUnitSize } from \"@daybrush/utils\";\nimport {\n    prefix, caculatePosition, getDiagonalSize,\n    fillParams, triggerEvent,\n    makeMatrixCSS, getRect, fillEndParams,\n    convertCSSSize, moveControlPos,\n} from \"../utils\";\nimport { getRad, plus, minus } from \"../matrix\";\nimport { setDragStart, getDragDist, caculatePointerDist } from \"../gesto/GestoUtils\";\nimport {\n    getRadiusValues,\n    HORIZONTAL_RADIUS_ORDER, VERTICAL_RADIUS_ORDER, getRadiusStyles, addRadiusPos, removeRadiusPos\n} from \"./roundable/borderRadius\";\nimport { renderLine } from \"../renderDirection\";\nimport { addGuidelines, checkSnapBoundPriority } from \"./snappable/snap\";\nimport { checkSnapBounds } from \"./Snappable\";\n\nconst CLIP_DIRECTIONS = [\n    [0, -1, \"n\"],\n    [1, 0, \"e\"],\n] as const;\nconst CLIP_RECT_DIRECTIONS = [\n    [-1, -1, \"nw\"],\n    [0, -1, \"n\"],\n    [1, -1, \"ne\"],\n    [1, 0, \"e\"],\n    [1, 1, \"se\"],\n    [0, 1, \"s\"],\n    [-1, 1, \"sw\"],\n    [-1, 0, \"w\"],\n] as const;\n\n// 1 2 5 6 0 3 4 7\n// 0 1 2 3 4 5 6 7\n\nfunction getClipStyles(\n    moveable: MoveableManagerInterface<ClippableProps>,\n    clipPath: ReturnType<typeof getClipPath>,\n    poses: number[][],\n) {\n    const {\n        clipRelative,\n    } = moveable.props;\n    const {\n        width,\n        height,\n    } = moveable.state;\n    const {\n        type: clipType,\n        poses: clipPoses,\n    } = clipPath!;\n\n    const isRect = clipType === \"rect\";\n    const isCircle = clipType === \"circle\";\n    if (clipType === \"polygon\") {\n        return poses.map(pos => `${\n            convertCSSSize(pos[0], width, clipRelative)\n            } ${\n            convertCSSSize(pos[1], height, clipRelative)\n            }`);\n    } else if (isRect || clipType === \"inset\") {\n        const top = poses[1][1];\n        const right = poses[3][0];\n        const left = poses[7][0];\n        const bottom = poses[5][1];\n\n        if (isRect) {\n            return [\n                top,\n                right,\n                bottom,\n                left,\n            ].map(pos => `${pos}px`);\n        }\n        const clipStyles\n            = [top, width - right, height - bottom, left]\n                .map((pos, i) => convertCSSSize(pos, i % 2 ? width : height, clipRelative));\n\n        if (poses.length > 8) {\n            const [subWidth, subHeight] = minus(poses[4], poses[0]);\n\n            clipStyles.push(\"round\", ...getRadiusStyles(\n                poses.slice(8),\n                clipPoses.slice(8),\n                clipRelative!,\n                subWidth,\n                subHeight,\n                left, top, right, bottom,\n            ).styles);\n        }\n        return clipStyles;\n    } else if (isCircle || clipType === \"ellipse\") {\n        const center = poses[0];\n        const ry = convertCSSSize(\n            Math.abs(poses[1][1] - center[1]),\n            isCircle ? Math.sqrt((width * width + height * height) / 2) : height,\n            clipRelative,\n        );\n\n        const clipStyles = isCircle ? [ry]\n            : [convertCSSSize(Math.abs(poses[2][0] - center[0]), width, clipRelative), ry];\n\n        clipStyles.push(\n            \"at\", convertCSSSize(center[0], width, clipRelative),\n            convertCSSSize(center[1], height, clipRelative));\n\n        return clipStyles;\n    }\n}\nfunction getRectPoses(top: number, right: number, bottom: number, left: number): ControlPose[] {\n    const xs = [left, (left + right) / 2, right];\n    const ys = [top, (top + bottom) / 2, bottom];\n\n    return CLIP_RECT_DIRECTIONS.map(([dirx, diry, dir]) => {\n        const x = xs[dirx + 1];\n        const y = ys[diry + 1];\n        return {\n            vertical: Math.abs(diry),\n            horizontal: Math.abs(dirx),\n            direction: dir,\n            pos: [x, y],\n        };\n    });\n}\nfunction getClipPath(\n    target: HTMLElement | SVGElement,\n    width: number,\n    height: number,\n    defaultClip?: string,\n    customClip?: string,\n) {\n    let clipText: string | undefined = customClip;\n\n    if (!clipText) {\n        const style = getComputedStyle(target!);\n        const clipPath = style.clipPath!;\n\n        clipText = clipPath !== \"none\" ? clipPath : style.clip!;\n    }\n    if (!clipText || clipText === \"none\" || clipText === \"auto\") {\n        clipText = defaultClip;\n\n        if (!clipText) {\n            return;\n        }\n    }\n    const {\n        prefix: clipPrefix = clipText,\n        value = \"\",\n    } = splitBracket(clipText);\n    const isCircle = clipPrefix === \"circle\";\n    let splitter = \" \";\n\n    if (clipPrefix === \"polygon\") {\n        const values = splitComma(value! || `0% 0%, 100% 0%, 100% 100%, 0% 100%`);\n        splitter = \",\";\n\n        const poses: ControlPose[] = values.map(pos => {\n            const [xPos, yPos] = pos.split(\" \");\n\n            return {\n                vertical: 1,\n                horizontal: 1,\n                pos: [\n                    convertUnitSize(xPos, width),\n                    convertUnitSize(yPos, height),\n                ],\n            };\n        });\n\n        return {\n            type: clipPrefix,\n            clipText,\n            poses,\n            splitter,\n        } as const;\n    } else if (isCircle || clipPrefix === \"ellipse\") {\n        let xPos: string = \"\";\n        let yPos: string = \"\";\n        let radiusX = 0;\n        let radiusY = 0;\n        const values = splitSpace(value!);\n\n        if (isCircle) {\n            let radius = \"\";\n            [radius = \"50%\", , xPos = \"50%\", yPos = \"50%\"] = values;\n\n            radiusX = convertUnitSize(radius, Math.sqrt((width * width + height * height) / 2));\n            radiusY = radiusX;\n        } else {\n            let xRadius = \"\";\n            let yRadius = \"\";\n            [xRadius = \"50%\", yRadius = \"50%\", , xPos = \"50%\", yPos = \"50%\"] = values;\n\n            radiusX = convertUnitSize(xRadius, width);\n            radiusY = convertUnitSize(yRadius, height);\n        }\n        const centerPos = [\n            convertUnitSize(xPos, width),\n            convertUnitSize(yPos, height),\n        ];\n        const poses: ControlPose[] = [\n            {\n                vertical: 1,\n                horizontal: 1,\n                pos: centerPos,\n                direction: \"nesw\",\n            },\n            ...CLIP_DIRECTIONS.slice(0, isCircle ? 1 : 2).map(dir => ({\n                vertical: Math.abs(dir[1]),\n                horizontal: dir[0],\n                direction: dir[2],\n                sub: true,\n                pos: [\n                    centerPos[0] + dir[0] * radiusX,\n                    centerPos[1] + dir[1] * radiusY,\n                ],\n            })),\n        ];\n        return {\n            type: clipPrefix as \"circle\" | \"ellipse\",\n            clipText,\n            radiusX,\n            radiusY,\n            left: centerPos[0] - radiusX,\n            top: centerPos[1] - radiusY,\n            poses,\n            splitter,\n        } as const;\n    } else if (clipPrefix === \"inset\") {\n        const values = splitSpace(value! || \"0 0 0 0\");\n        const roundIndex = values.indexOf(\"round\");\n\n        const rectLength = (roundIndex > -1 ? values.slice(0, roundIndex) : values).length;\n        const radiusValues = values.slice(rectLength + 1);\n        const [\n            topValue,\n            rightValue = topValue,\n            bottomValue = topValue,\n            leftValue = rightValue,\n        ] = values.slice(0, rectLength);\n        const [top, bottom] = [topValue, bottomValue].map(pos => convertUnitSize(pos, height));\n        const [left, right] = [leftValue, rightValue].map(pos => convertUnitSize(pos, width));\n        const nextRight = width - right;\n        const nextBottom = height - bottom;\n        const radiusPoses = getRadiusValues(\n            radiusValues,\n            nextRight - left,\n            nextBottom - top,\n            left,\n            top,\n        );\n        const poses: ControlPose[] = [\n            ...getRectPoses(top, nextRight, nextBottom, left),\n            ...radiusPoses,\n        ];\n\n        return {\n            type: \"inset\",\n            clipText,\n            poses,\n            top,\n            left,\n            right: nextRight,\n            bottom: nextBottom,\n            radius: radiusValues,\n            splitter,\n        } as const;\n    } else if (clipPrefix === \"rect\") {\n        // top right bottom left\n        const values = splitComma(value! || `0px, ${width}px, ${height}px, 0px`);\n\n        splitter = \",\";\n        const [top, right, bottom, left] = values.map(pos => {\n            const { value: posValue } = splitUnit(pos);\n\n            return posValue;\n        });\n        const poses = getRectPoses(top, right, bottom, left);\n\n        return {\n            type: \"rect\",\n            clipText,\n            poses,\n            top,\n            right,\n            bottom,\n            left,\n            values,\n            splitter,\n        } as const;\n    }\n    return;\n}\nfunction addClipPath(moveable: MoveableManagerInterface<ClippableProps>, e: any) {\n    const [distX, distY] = caculatePointerDist(moveable, e);\n    const { clipPath, index } = e.datas;\n    const {\n        type: clipType,\n        poses: clipPoses,\n        splitter,\n    } = (clipPath as ReturnType<typeof getClipPath>)!;\n    const poses = clipPoses.map(pos => pos.pos);\n    if (clipType === \"polygon\") {\n        poses.splice(index, 0, [distX, distY]);\n    } else if (clipType === \"inset\") {\n        const horizontalIndex = HORIZONTAL_RADIUS_ORDER.indexOf(index);\n        const verticalIndex = VERTICAL_RADIUS_ORDER.indexOf(index);\n        const length = clipPoses.length;\n\n        addRadiusPos(\n            clipPoses,\n            poses,\n            8,\n            horizontalIndex,\n            verticalIndex,\n            distX,\n            distY,\n            poses[4][0],\n            poses[4][1],\n            poses[0][0],\n            poses[0][1],\n        );\n\n        if (length === clipPoses.length) {\n            return;\n        }\n    } else {\n        return;\n    }\n    const clipStyles = getClipStyles(moveable, clipPath, poses)!;\n    triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n        clipEventType: \"added\",\n        clipType,\n        poses,\n        clipStyles,\n        clipStyle: `${clipType}(${clipStyles.join(splitter)})`,\n        distX: 0,\n        distY: 0,\n    }));\n}\nfunction removeClipPath(moveable: MoveableManagerInterface<ClippableProps>, e: any) {\n    const { clipPath, index } = e.datas;\n    const {\n        type: clipType,\n        poses: clipPoses,\n        splitter,\n    } = (clipPath as ReturnType<typeof getClipPath>)!;\n    const poses = clipPoses.map(pos => pos.pos);\n    const length = poses.length;\n    if (clipType === \"polygon\") {\n        clipPoses.splice(index, 1);\n        poses.splice(index, 1);\n    } else if (clipType === \"inset\") {\n        if (index < 8) {\n            return;\n        }\n        removeRadiusPos(clipPoses, poses, index, 8, length);\n\n        if (length === clipPoses.length) {\n            return;\n        }\n    } else {\n        return;\n    }\n    const clipStyles = getClipStyles(moveable, clipPath, poses)!;\n    triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n        clipEventType: \"removed\",\n        clipType,\n        poses,\n        clipStyles,\n        clipStyle: `${clipType}(${clipStyles.join(splitter)})`,\n        distX: 0,\n        distY: 0,\n    }));\n}\n/**\n * @namespace Moveable.Clippable\n * @description Whether to clip the target.\n */\n\nexport default {\n    name: \"clippable\",\n    props: {\n        clippable: Boolean,\n        defaultClipPath: String,\n        customClipPath: String,\n        clipRelative: Boolean,\n        clipArea: Boolean,\n        dragWithClip: Boolean,\n        clipTargetBounds: Boolean,\n        clipVerticalGuidelines: Array,\n        clipHorizontalGuidelines: Array,\n        clipSnapThreshold: Boolean,\n    } as const,\n    events: {\n        onClipStart: \"clipStart\",\n        onClip: \"clip\",\n        onClipEnd: \"clipEnd\",\n    } as const,\n    css: [\n        `.control.clip-control {\n    background: #6d6;\n    cursor: pointer;\n}\n.control.clip-control.clip-radius {\n    background: #d66;\n}\n.line.clip-line {\n    background: #6e6;\n    cursor: move;\n    z-index: 1;\n}\n.clip-area {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n.clip-ellipse {\n    position: absolute;\n    cursor: move;\n    border: 1px solid #6d6;\n    border: var(--zoompx) solid #6d6;\n    border-radius: 50%;\n    transform-origin: 0px 0px;\n}`,\n        `:host {\n    --bounds-color: #d66;\n}`,\n        `.guideline {\n    pointer-events: none;\n    z-index: 2;\n}`,\n        `.line.guideline.bounds {\n    background: #d66;\n    background: var(--bounds-color);\n}`,\n    ],\n    render(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, React: Renderer): any[] {\n        const {\n            customClipPath, defaultClipPath,\n            clipArea, zoom,\n        } = moveable.props;\n        const {\n            target, width, height, allMatrix, is3d, left, top,\n            pos1, pos2, pos3, pos4,\n            clipPathState,\n            snapBoundInfos,\n        } = moveable.state;\n\n        if (!target) {\n            return [];\n        }\n\n        const clipPath = getClipPath(\n            target, width, height, defaultClipPath || \"inset\", clipPathState || customClipPath);\n\n        if (!clipPath) {\n            return [];\n        }\n        const n = is3d ? 4 : 3;\n        const type = clipPath.type;\n        const clipPoses = clipPath.poses;\n        const poses = clipPoses.map(pos => {\n            // return [x, y];\n            const caculatedPos = caculatePosition(allMatrix, pos.pos, n);\n\n            return [\n                caculatedPos[0] - left,\n                caculatedPos[1] - top,\n            ];\n        });\n\n        let controls: any[] = [];\n        let lines: any[] = [];\n\n        const isRect = type === \"rect\";\n        const isInset = type === \"inset\";\n        const isPolygon = type === \"polygon\";\n\n        if (isRect || isInset || isPolygon) {\n            const linePoses = isInset ? poses.slice(0, 8) : poses;\n\n            lines = linePoses.map((to, i) => {\n                const from = i === 0 ? linePoses[linePoses.length - 1] : linePoses[i - 1];\n\n                const rad = getRad(from, to);\n                const dist = getDiagonalSize(from, to);\n                return <div key={`clipLine${i}`} className={prefix(\"line\", \"clip-line\", \"snap-control\")}\n                    data-clip-index={i}\n                    style={{\n                        width: `${dist}px`,\n                        transform: `translate(${from[0]}px, ${from[1]}px) rotate(${rad}rad)`,\n                    }}></div>;\n            });\n        }\n        controls = poses.map((pos, i) => {\n            return <div key={`clipControl${i}`}\n                className={prefix(\"control\", \"clip-control\", \"snap-control\")}\n                data-clip-index={i}\n                style={{\n                    transform: `translate(${pos[0]}px, ${pos[1]}px)`,\n                }}></div>;\n        });\n\n        if (isInset) {\n            controls.push(...poses.slice(8).map((pos, i) => {\n                return <div key={`clipRadiusControl${i}`}\n                    className={prefix(\"control\", \"clip-control\", \"clip-radius\", \"snap-control\")}\n                    data-clip-index={8 + i}\n                    style={{\n                        transform: `translate(${pos[0]}px, ${pos[1]}px)`,\n                    }}></div>;\n            }));\n        }\n        if (type === \"circle\" || type === \"ellipse\") {\n            const {\n                left: clipLeft,\n                top: clipTop,\n                radiusX,\n                radiusY,\n            } = clipPath;\n\n            const [distLeft, distTop] = minus(\n                caculatePosition(allMatrix, [clipLeft!, clipTop!], n),\n                caculatePosition(allMatrix, [0, 0], n),\n            );\n            let ellipseClipPath = \"none\";\n\n            if (!clipArea) {\n                const piece = Math.max(10, radiusX! / 5, radiusY! / 5);\n                const areaPoses: number[][] = [];\n\n                for (let i = 0; i <= piece; ++i) {\n                    const rad = Math.PI * 2 / piece * i;\n                    areaPoses.push([\n                        radiusX! + (radiusX! - zoom!) * Math.cos(rad),\n                        radiusY! + (radiusY! - zoom!) * Math.sin(rad),\n                    ]);\n                }\n                areaPoses.push([radiusX!, -2]);\n                areaPoses.push([-2, -2]);\n                areaPoses.push([-2, radiusY! * 2 + 2]);\n                areaPoses.push([radiusX! * 2 + 2, radiusY! * 2 + 2]);\n                areaPoses.push([radiusX! * 2 + 2, -2]);\n                areaPoses.push([radiusX!, -2]);\n\n                ellipseClipPath = `polygon(${areaPoses.map(pos => `${pos[0]}px ${pos[1]}px`).join(\", \")})`;\n            }\n            controls.push(<div key=\"clipEllipse\" className={prefix(\"clip-ellipse\", \"snap-control\")} style={{\n                width: `${radiusX! * 2}px`,\n                height: `${radiusY! * 2}px`,\n                clipPath: ellipseClipPath,\n                transform: `translate(${-left + distLeft}px, ${-top + distTop}px) ${makeMatrixCSS(allMatrix)}`,\n            }}></div>);\n        }\n        if (clipArea) {\n            const {\n                width: allWidth,\n                height: allHeight,\n                left: allLeft,\n                top: allTop,\n            } = getRect([pos1, pos2, pos3, pos4, ...poses]);\n            if (isPolygon || isRect || isInset) {\n                const areaPoses = isInset ? poses.slice(0, 8) : poses;\n                controls.push(<div key=\"clipArea\" className={prefix(\"clip-area\", \"snap-control\")} style={{\n                    width: `${allWidth}px`,\n                    height: `${allHeight}px`,\n                    transform: `translate(${allLeft}px, ${allTop}px)`,\n                    clipPath: `polygon(${\n                        areaPoses.map(pos => `${pos[0] - allLeft}px ${pos[1] - allTop}px`).join(\", \")\n                        })`,\n                }}></div>);\n            }\n        }\n        if (snapBoundInfos) {\n            ([\"vertical\", \"horizontal\"] as const).forEach(directionType => {\n                const info = snapBoundInfos[directionType];\n                const isHorizontal = directionType === \"horizontal\";\n                if (info.isSnap) {\n                    lines.push(...info.snap.posInfos.map(({ pos }, i) => {\n                        const snapPos1 = minus(caculatePosition(\n                            allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n                        const snapPos2 = minus(caculatePosition(\n                            allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n\n                        return renderLine(\n                            React, \"\", snapPos1, snapPos2,\n                            `clip${directionType}snap${i}`, \"guideline\");\n                    }));\n                }\n                if (info.isBound) {\n                    lines.push(...info.bounds.map(({ pos }, i) => {\n                        const snapPos1 = minus(caculatePosition(\n                            allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n                        const snapPos2 = minus(caculatePosition(\n                            allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n\n                        return renderLine(\n                            React, \"\", snapPos1, snapPos2,\n                            `clip${directionType}bounds${i}`, \"guideline\", \"bounds\", \"bold\");\n                    }));\n                }\n            });\n        }\n        return [\n            ...controls,\n            ...lines,\n        ];\n    },\n    dragControlCondition(e: any) {\n        return e.inputEvent && (e.inputEvent.target.className || \"\").indexOf(\"clip\") > -1;\n    },\n    dragStart(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        const props = moveable.props;\n        const {\n            dragWithClip = true,\n        } = props;\n\n        if (dragWithClip) {\n            return false;\n        }\n\n        return this.dragControlStart(moveable, e);\n    },\n    drag(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        return this.dragControl(moveable, e);\n    },\n    dragEnd(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        return this.dragControlEnd(moveable, e);\n    },\n    dragControlStart(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        const state = moveable.state;\n        const { defaultClipPath, customClipPath } = moveable.props;\n        const { target, width, height } = state;\n        const inputTarget = e.inputEvent ? e.inputEvent.target : null;\n        const className = inputTarget ? inputTarget.className : \"\";\n        const datas = e.datas;\n        const clipPath = getClipPath(target!, width, height, defaultClipPath || \"inset\", customClipPath);\n\n        if (!clipPath) {\n            return false;\n        }\n        const { clipText, type, poses } = clipPath;\n        const result = triggerEvent(moveable, \"onClipStart\", fillParams<OnClipStart>(moveable, e, {\n            clipType: type,\n            clipStyle: clipText,\n            poses: poses.map(pos => pos.pos),\n        }));\n\n        if (result === false) {\n            datas.isClipStart = false;\n            return false;\n        }\n        datas.isControl = className.indexOf(\"clip-control\") > -1;\n        datas.isLine = className.indexOf(\"clip-line\") > -1;\n        datas.isArea = className.indexOf(\"clip-area\") > -1 || className.indexOf(\"clip-ellipse\") > -1;\n        datas.index = inputTarget ? parseInt(inputTarget.getAttribute(\"data-clip-index\"), 10) : -1;\n        datas.clipPath = clipPath;\n        datas.isClipStart = true;\n        state.clipPathState = clipText;\n        setDragStart(moveable, e);\n\n        return true;\n    },\n    dragControl(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        const { datas, originalDatas } = e;\n\n        if (!datas.isClipStart) {\n            return false;\n        }\n        const draggableData = (originalDatas && originalDatas.draggable) || {};\n        const { isControl, isLine, isArea, index, clipPath } = datas as {\n            clipPath: ReturnType<typeof getClipPath>,\n            [key: string]: any,\n        };\n        if (!clipPath) {\n            return false;\n        }\n        let [distX, distY] = draggableData.isDrag ? draggableData.prevDist : getDragDist(e);\n        const props = moveable.props;\n        const state = moveable.state;\n        const { width, height } = state;\n        const isDragWithTarget = !isArea && !isControl && !isLine;\n        const {\n            type: clipType,\n            poses: clipPoses,\n            splitter,\n        } = clipPath;\n        const poses = clipPoses.map(pos => pos.pos);\n\n        if (isDragWithTarget) {\n            distX = -distX;\n            distY = -distY;\n        }\n        const isAll = !isControl || clipPoses[index].direction === \"nesw\";\n        const isRect = clipType === \"inset\" || clipType === \"rect\";\n        let dists = clipPoses.map(() => [0, 0]);\n\n        if (isControl && !isAll) {\n            const { horizontal, vertical } = clipPoses[index];\n            const dist = [\n                distX * Math.abs(horizontal),\n                distY * Math.abs(vertical),\n            ];\n            dists = moveControlPos(clipPoses, index, dist, isRect);\n        } else if (isAll) {\n            dists = poses.map(() => [distX, distY]);\n        }\n        const nextPoses: number[][] = poses.map((pos, i) => plus(pos, dists[i]));\n        const guidePoses = [...nextPoses];\n\n        state.snapBoundInfos = null;\n        const isCircle = clipPath.type === \"circle\";\n        const isEllipse = clipPath.type === \"ellipse\";\n\n        if (isCircle || isEllipse) {\n            const guideRect = getRect(nextPoses);\n            const ry = Math.abs(guideRect.bottom - guideRect.top);\n            const rx = Math.abs(isEllipse ? guideRect.right - guideRect.left : ry);\n            const bottom = nextPoses[0][1] + ry;\n            const left = nextPoses[0][0] - rx;\n            const right = nextPoses[0][0] + rx;\n\n            // right\n            if (isCircle) {\n                guidePoses.push([right, guideRect.bottom]);\n                dists.push([1, 0]);\n            }\n            // bottom\n            guidePoses.push([guideRect.left, bottom]);\n            dists.push([0, 1]);\n            // left\n            guidePoses.push([left, guideRect.bottom]);\n            dists.push([1, 0]);\n        }\n\n        const guidelines = addGuidelines(\n            [],\n            width!, height!,\n            (props.clipHorizontalGuidelines || []).map(v => convertUnitSize(`${v}`, height)),\n            (props.clipVerticalGuidelines || []).map(v => convertUnitSize(`${v}`, width)),\n        );\n        let guideXPoses: number[] = [];\n        let guideYPoses: number[] = [];\n\n        if (isCircle || isEllipse) {\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n        } else if (isRect) {\n            const rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n            const rectDists = [dists[0], dists[2], dists[4], dists[6]];\n\n            guideXPoses = rectPoses.filter((_, i) => rectDists[i][0]).map(pos => pos[0]);\n            guideYPoses = rectPoses.filter((_, i) => rectDists[i][1]).map(pos => pos[1]);\n        } else {\n            guideXPoses = guidePoses.filter((_, i) => dists[i][0]).map(pos => pos[0]);\n            guideYPoses = guidePoses.filter((_, i) => dists[i][1]).map(pos => pos[1]);\n        }\n        for (let i = 0; i < 2; ++i) {\n            const {\n                horizontal: horizontalSnapInfo,\n                vertical: verticalSnapInfo,\n            } = checkSnapBounds(\n                guidelines,\n                props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height },\n                guideXPoses,\n                guideYPoses,\n                {\n                    snapThreshold: 5,\n                },\n            );\n            const snapOffsetY = horizontalSnapInfo.offset;\n            const snapOffsetX = verticalSnapInfo.offset;\n\n            if ((isEllipse || isCircle) && dists[0][0] === 0 && dists[0][1] === 0) {\n                const guideRect = getRect(nextPoses);\n                let cy = guideRect.bottom - guideRect.top;\n                let cx = isEllipse ? guideRect.right - guideRect.left : cy;\n                const distSnapX = verticalSnapInfo.isBound\n                    ? Math.abs(snapOffsetX)\n                    : (verticalSnapInfo.snapIndex === 0 ? -snapOffsetX : snapOffsetX);\n                const distSnapY = horizontalSnapInfo.isBound\n                    ? Math.abs(snapOffsetY)\n                    : (horizontalSnapInfo.snapIndex === 0 ? -snapOffsetY : snapOffsetY);\n                cx -= distSnapX;\n                cy -= distSnapY;\n\n                if (isCircle) {\n                    cy = checkSnapBoundPriority(verticalSnapInfo, horizontalSnapInfo) > 0 ? cy : cx;\n                    cx = cy;\n                }\n                const center = guidePoses[0];\n\n                guidePoses[1][1] = center[1] - cy;\n                guidePoses[2][0] = center[0] + cx;\n                guidePoses[3][1] = center[1] + cy;\n                guidePoses[4][0] = center[0] - cx;\n            } else {\n                guidePoses.forEach((pos, j) => {\n                    const dist = dists[j];\n\n                    if (dist[0]) {\n                        pos[0] -= snapOffsetX;\n                    }\n                    if (dist[1]) {\n                        pos[1] -= snapOffsetY;\n                    }\n                });\n                break;\n            }\n        }\n        const nextClipStyles = getClipStyles(moveable, clipPath, nextPoses)!;\n        const clipStyle = `${clipType}(${nextClipStyles.join(splitter)})`;\n\n        state.clipPathState = clipStyle;\n\n        if (isCircle || isEllipse) {\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n        } else if (isRect) {\n            const rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n\n            guideXPoses = rectPoses.map(pos => pos[0]);\n            guideYPoses = rectPoses.map(pos => pos[1]);\n        } else {\n            guideXPoses = guidePoses.map(pos => pos[0]);\n            guideYPoses = guidePoses.map(pos => pos[1]);\n        }\n        state.snapBoundInfos = checkSnapBounds(\n            guidelines,\n            props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height },\n            guideXPoses,\n            guideYPoses,\n            {\n                snapThreshold: 1,\n            },\n        );\n\n        triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n            clipEventType: \"changed\",\n            clipType,\n            poses: nextPoses,\n            clipStyle,\n            clipStyles: nextClipStyles,\n            distX,\n            distY,\n        }));\n\n        return true;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        this.unset(moveable);\n        const { isDrag, datas, isDouble } = e;\n        const { isLine, isClipStart, isControl } = datas;\n\n        if (!isClipStart) {\n            return false;\n        }\n        triggerEvent(moveable, \"onClipEnd\", fillEndParams<OnClipEnd>(moveable, e, {}));\n        if (isDouble) {\n            if (isControl) {\n                removeClipPath(moveable, e);\n            } else if (isLine) {\n                // add\n                addClipPath(moveable, e);\n            }\n        }\n        return isDouble || isDrag;\n    },\n    unset(moveable: MoveableManagerInterface<ClippableProps, ClippableState>) {\n        moveable.state.clipPathState = \"\";\n        moveable.state.snapBoundInfos = null;\n    },\n};\n\n/**\n * Whether to clip the target. (default: false)\n * @name Moveable.Clippable#clippable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n *  If clippath is not set, the default value can be set. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#defaultClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (`rect` not possible) (default: false)\n * @name Moveable.Clippable#clipRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can force the custom clipPath. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#customClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When dragging the target, the clip also moves. (default: true)\n * @name Moveable.Clippable#dragWithClip\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can drag the clip by setting clipArea. (default: false)\n * @name Moveable.Clippable#clipArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n* Whether the clip is bound to the target. (default: false)\n* @name Moveable.Clippable#clipTargetBounds\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipTargetBounds: true,\n* });\n* moveable.on(\"clipStart\", e => {\n*     console.log(e);\n* }).on(\"clip\", e => {\n*     if (e.clipType === \"rect\") {\n*         e.target.style.clip = e.clipStyle;\n*     } else {\n*         e.target.style.clipPath = e.clipStyle;\n*     }\n* }).on(\"clipEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* Add clip guidelines in the vertical direction. (default: [])\n* @name Moveable.Clippable#clipVerticalGuidelines\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n\n/**\n* Add clip guidelines in the horizontal direction. (default: [])\n* @name Moveable.Clippable#clipHorizontalGuidelines\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n/**\n* istance value that can snap to clip guidelines. (default: 5)\n* @name Moveable.Clippable#clipSnapThreshold\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n/**\n * When drag start the clip area or controls, the `clipStart` event is called.\n * @memberof Moveable.Clippable\n * @event clipStart\n * @param {Moveable.Clippable.OnClipStart} - Parameters for the `clipStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag the clip area or controls, the `clip` event is called.\n * @memberof Moveable.Clippable\n * @event clip\n * @param {Moveable.Clippable.OnClip} - Parameters for the `clip` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag end the clip area or controls, the `clipEnd` event is called.\n * @memberof Moveable.Clippable\n * @event clipEnd\n * @param {Moveable.Clippable.OnClipEnd} - Parameters for the `clipEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n","import {\n    prefix, triggerEvent,\n    fillParams, caculatePoses, getRect, fillEndParams, convertCSSSize\n} from \"../utils\";\nimport {\n    OnDragOriginStart, OnDragOrigin,\n    OnDragOriginEnd, MoveableManagerInterface, DraggableProps, OriginDraggableProps, MoveableGroupInterface\n} from \"../types\";\nimport { hasClass, IObject } from \"@daybrush/utils\";\nimport { setDragStart, getDragDist, getNextMatrix } from \"../gesto/GestoUtils\";\nimport { minus, plus } from \"../matrix\";\nimport Draggable from \"./Draggable\";\nimport CustomGesto, { setCustomDrag } from \"../gesto/CustomGesto\";\n\n/**\n * @namespace OriginDraggable\n * @memberof Moveable\n * @description Whether to drag origin (default: false)\n */\nexport default {\n    name: \"originDraggable\",\n    props: {\n        originDraggable: Boolean,\n        originRelative: Boolean,\n    } as const,\n    events: {\n        onDragOriginStart: \"dragOriginStart\",\n        onDragOrigin: \"dragOrigin\",\n        onDragOriginEnd: \"dragOriginEnd\",\n    } as const,\n    css: [\n        `:host[data-able-origindraggable] .control.origin {\n    pointer-events: auto;\n}`,\n    ],\n    dragControlCondition(e: any) {\n        if (e.isRequest) {\n            return e.requestAble === \"originDraggable\";\n        }\n        return hasClass(e.inputEvent.target, prefix(\"origin\"));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<OriginDraggableProps & DraggableProps>, e: any) {\n        const { datas } = e;\n\n        setDragStart(moveable, e);\n\n        const params = fillParams<OnDragOriginStart>(moveable, e, {\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ),\n        });\n        const result = triggerEvent<OriginDraggableProps>(\n            moveable, \"onDragOriginStart\", params);\n\n        datas.startOrigin = moveable.state.transformOrigin;\n        datas.startTargetOrigin = moveable.state.targetOrigin;\n        datas.prevOrigin = [0, 0];\n        datas.isDragOrigin = true;\n\n        if (result === false) {\n            datas.isDragOrigin = false;\n            return false;\n        }\n\n        return params;\n    },\n    dragControl(moveable: MoveableManagerInterface<OriginDraggableProps & DraggableProps>, e: any) {\n        const { datas, isPinch, isRequest } = e;\n\n        if (!datas.isDragOrigin) {\n            return false;\n        }\n        const [distX, distY] = getDragDist(e);\n        const state = moveable.state;\n        const {\n            width,\n            height,\n            offsetMatrix,\n            targetMatrix,\n            is3d,\n        } = state;\n        const {\n            originRelative = true,\n        } = moveable.props;\n        const n = is3d ? 4 : 3;\n        let dist = [distX, distY];\n\n        if (isRequest) {\n            const distOrigin = e.distOrigin;\n            if (distOrigin[0] || distOrigin[1]) {\n                dist = distOrigin;\n            }\n        }\n        const origin = plus(datas.startOrigin, dist);\n        const targetOrigin = plus(datas.startTargetOrigin, dist);\n        const delta = minus(dist, datas.prevOrigin);\n\n        const nextMatrix = getNextMatrix(\n            offsetMatrix,\n            targetMatrix,\n            origin,\n            n,\n        );\n\n        const rect = moveable.getRect();\n        const nextRect = getRect(caculatePoses(nextMatrix, width, height, n));\n\n        const dragDelta = [\n            rect.left - nextRect.left,\n            rect.top - nextRect.top,\n        ];\n\n        datas.prevOrigin = dist;\n        const transformOrigin = [\n            convertCSSSize(targetOrigin[0], width, originRelative),\n            convertCSSSize(targetOrigin[1], height, originRelative),\n        ].join(\" \");\n        const params = fillParams<OnDragOrigin>(moveable, e, {\n            width,\n            height,\n            origin,\n            dist,\n            delta,\n            transformOrigin,\n            drag: Draggable.drag(\n                moveable,\n                setCustomDrag(e, moveable.state, dragDelta, !!isPinch, false),\n            )!,\n        });\n        triggerEvent<OriginDraggableProps>(moveable, \"onDragOrigin\", params);\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<OriginDraggableProps>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isDragOrigin) {\n            return false;\n        }\n        triggerEvent<OriginDraggableProps>(moveable, \"onDragOriginEnd\",\n            fillEndParams<OnDragOriginEnd>(moveable, e, {}));\n        return true;\n    },\n    dragGroupControlCondition(e: any) {\n        return this.dragControlCondition(e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<OriginDraggableProps>, e: any) {\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n\n        return true;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<OriginDraggableProps>, e: any) {\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        moveable.transformOrigin = params.transformOrigin;\n\n        return true;\n    },\n    /**\n    * @method Moveable.OriginDraggable#request\n    * @param {object} e - the OriginDraggable's request parameter\n    * @param {number} [e.x] - x position\n    * @param {number} [e.y] - y position\n    * @param {number} [e.deltaX] - x number to move\n    * @param {number} [e.deltaY] - y number to move\n    * @param {array} [e.deltaOrigin] - left, top number to move transform-origin\n    * @param {array} [e.origin] - transform-origin position\n    * @param {number} [e.isInstant] - Whether to execute the request instantly\n    * @return {Moveable.Requester} Moveable Requester\n    * @example\n\n    * // Instantly Request (requestStart - request - requestEnd)\n    * // Use Relative Value\n    * moveable.request(\"originDraggable\", { deltaX: 10, deltaY: 10 }, true);\n    * // Use Absolute Value\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 }, true);\n    * // Use Transform Value\n    * moveable.request(\"originDraggable\", { deltaOrigin: [10, 0] }, true);\n    * moveable.request(\"originDraggable\", { origin: [100, 0] }, true);\n    * // requestStart\n    * const requester = moveable.request(\"originDraggable\");\n    *\n    * // request\n    * // Use Relative Value\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * // Use Absolute Value\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 });\n    * moveable.request(\"originDraggable\", { x: 220, y: 100 });\n    * moveable.request(\"originDraggable\", { x: 240, y: 100 });\n    *\n    * // requestEnd\n    * requester.requestEnd();\n    */\n    request(moveable: MoveableManagerInterface<any, any>) {\n        const datas = {};\n        const rect = moveable.getRect();\n        let distX = 0;\n        let distY = 0;\n\n        const transformOrigin = rect.transformOrigin;\n        const distOrigin = [0, 0];\n\n        return {\n            isControl: true,\n            requestStart() {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"deltaOrigin\" in e) {\n                    distOrigin[0] += e.deltaOrigin[0];\n                    distOrigin[1] += e.deltaOrigin[1];\n                } else if (\"origin\" in e) {\n                    distOrigin[0] = e.origin[0] - transformOrigin[0];\n                    distOrigin[1] = e.origin[1] - transformOrigin[1];\n                } else {\n                    if (\"x\" in e) {\n                        distX = e.x - rect.left;\n                    } else if (\"deltaX\" in e) {\n                        distX += e.deltaX;\n                    }\n                    if (\"y\" in e) {\n                        distY = e.y - rect.top;\n                    } else if (\"deltaY\" in e) {\n                        distY += e.deltaY;\n                    }\n                }\n\n                return { datas, distX, distY, distOrigin };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n/**\n * Whether to drag origin (default: false)\n * @name Moveable.OriginDraggable#originDraggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n * });\n * let translate = [0, 0];\n * moveable.on(\"dragOriginStart\", e => {\n *     e.dragStart && e.dragStart.set(translate);\n * }).on(\"dragOrigin\", e => {\n *     translate = e.drag.beforeTranslate;\n *     e.target.style.cssText\n *         = `transform-origin: ${e.transformOrigin};`\n *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n * }).on(\"dragOriginEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (default: true)\n * @name Moveable.OriginDraggable#originRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n *     originRelative: false,\n * });\n * moveable.originRelative = true;\n */\n\n/**\n* When drag start the origin, the `dragOriginStart` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginStart\n* @param {Moveable.OriginDraggable.OnDragOriginStart} - Parameters for the `dragOriginStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag the origin, the `dragOrigin` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOrigin\n* @param {Moveable.OriginDraggable.OnDragOrigin} - Parameters for the `dragOrigin` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag end the origin, the `dragOriginEnd` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginEnd\n* @param {Moveable.OriginDraggable.OnDragOriginEnd} - Parameters for the `dragOriginEnd` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n","import {\n    prefix, triggerEvent,\n    fillParams, fillEndParams, caculatePosition, moveControlPos\n} from \"../utils\";\nimport {\n    Renderer, RoundableProps, OnRoundStart, RoundableState, OnRound, ControlPose, OnRoundEnd, MoveableManagerInterface,\n} from \"../types\";\nimport { splitSpace } from \"@daybrush/utils\";\nimport { setDragStart, getDragDist, caculatePointerDist } from \"../gesto/GestoUtils\";\nimport { minus, plus } from \"../matrix\";\nimport {\n    getRadiusValues, getRadiusStyles, removeRadiusPos,\n    addRadiusPos, splitRadiusPoses,\n} from \"./roundable/borderRadius\";\n\nfunction addBorderRadius(\n    controlPoses: ControlPose[],\n    poses: number[][],\n    lineIndex: number,\n    distX: number,\n    distY: number,\n    width: number,\n    height: number,\n) {\n    const {\n        horizontals,\n        verticals,\n    } = splitRadiusPoses(controlPoses);\n    const horizontalsLength = horizontals.length;\n    const verticalsLength = verticals.length;\n    // lineIndex\n    // 0 top\n    // 1 right\n    // 2 left\n    // 3 bottom\n\n    // 0 top - left\n    // 1 top - right\n    // 2 bottom - right\n    // 3 bottom - left\n    // 0 left - top\n    // 1 right - top\n    // 2 right - bottom\n    // 3 left - bottom\n    let horizontalIndex = -1;\n    let verticalIndex = -1;\n\n    if (lineIndex === 0) {\n        if (horizontalsLength === 0) {\n            horizontalIndex = 0;\n        } else if (horizontalsLength === 1) {\n            horizontalIndex = 1;\n        }\n    } else if (lineIndex === 3) {\n        if (horizontalsLength <= 2) {\n            horizontalIndex = 2;\n        } else if (horizontalsLength <= 3) {\n            horizontalIndex = 3;\n        }\n    }\n    if (lineIndex === 2) {\n        if (verticalsLength === 0) {\n            verticalIndex = 0;\n        } else if (verticalsLength < 4) {\n            verticalIndex = 3;\n        }\n    } else if (lineIndex === 1) {\n        if (verticalsLength <= 1) {\n            verticalIndex = 1;\n        } else if (verticalsLength <= 2) {\n            verticalIndex = 2;\n        }\n    }\n\n    addRadiusPos(\n        controlPoses, poses, 0,\n        horizontalIndex, verticalIndex,\n        distX, distY, width, height,\n    );\n}\nfunction getBorderRadius(\n    target: HTMLElement | SVGElement, width: number, height: number, state?: string,\n) {\n    let borderRadius: string;\n\n    if (!state) {\n        const style = window.getComputedStyle(target);\n\n        if (!style) {\n            return null;\n        }\n        borderRadius = style.borderRadius || \"\";\n    } else {\n        borderRadius = state;\n    }\n    if (!borderRadius || (!state && borderRadius === \"0px\")) {\n        return null;\n    }\n    const values = splitSpace(borderRadius);\n\n    return getRadiusValues(values, width, height, 0, 0);\n}\n\nfunction triggerRoundEvent(\n    moveable: MoveableManagerInterface<RoundableProps, RoundableState>,\n    e: any,\n    dist: number[],\n    delta: number[],\n    controlPoses: ControlPose[],\n    nextPoses: number[][],\n) {\n    const state = moveable.state;\n    const {\n        width,\n        height,\n    } = state;\n    const {\n        raws,\n        styles,\n    } = getRadiusStyles(\n        nextPoses,\n        controlPoses,\n        moveable.props.roundRelative!,\n        width,\n        height,\n    );\n    const {\n        horizontals,\n        verticals,\n    } = splitRadiusPoses(controlPoses, raws);\n    const borderRadius = styles.join(\" \");\n\n    state.borderRadiusState = borderRadius;\n    triggerEvent<RoundableProps>(moveable, \"onRound\", fillParams<OnRound>(moveable, e, {\n        horizontals,\n        verticals,\n        borderRadius,\n        width,\n        height,\n        delta,\n        dist,\n    }));\n}\n\n/**\n * @namespace Moveable.Roundable\n * @description Whether to show and drag or double click border-radius\n */\n\nexport default {\n    name: \"roundable\",\n    props: {\n        roundable: Boolean,\n        roundRelative: Boolean,\n    } as const,\n    events: {\n        onRoundStart: \"roundStart\",\n        onRound: \"round\",\n        onRoundEnd: \"roundEnd\",\n    } as const,\n    css: [\n        `.control.border-radius {\n    background: #d66;\n    cursor: pointer;\n}`,\n        `:host[data-able-roundable] .line.direction {\n    cursor: pointer;\n}`,\n    ],\n    render(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, React: Renderer): any {\n        const {\n            target,\n            width,\n            height,\n            allMatrix,\n            is3d,\n            left,\n            top,\n            borderRadiusState,\n        } = moveable.state;\n\n        if (!target) {\n            return null;\n        }\n\n        const n = is3d ? 4 : 3;\n        const radiusValues = getBorderRadius(target, width, height, borderRadiusState);\n\n        if (!radiusValues) {\n            return null;\n        }\n        return radiusValues.map((v, i) => {\n            const pos = minus(caculatePosition(allMatrix, v.pos, n), [left, top]);\n\n            return <div key={`borderRadiusControl${i}`}\n                className={prefix(\"control\", \"border-radius\")}\n                data-radius-index={i}\n                style={{\n                    transform: `translate(${pos[0]}px, ${pos[1]}px)`,\n                }}></div>;\n        });\n    },\n    dragControlCondition(e: any) {\n        if (!e.inputEvent || e.isRequest) {\n            return false;\n        }\n        const className = (e.inputEvent.target.className || \"\");\n\n        return className.indexOf(\"border-radius\") > -1\n            || (className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1);\n    },\n    dragControlStart(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const { inputEvent, datas, } = e;\n        const inputTarget = inputEvent.target;\n        const className = (inputTarget.className || \"\");\n        const isControl = className.indexOf(\"border-radius\") > -1;\n        const isLine = className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1;\n        const controlIndex = isControl ? parseInt(inputTarget.getAttribute(\"data-radius-index\"), 10) : -1;\n        const lineIndex = isLine ? parseInt(inputTarget.getAttribute(\"data-line-index\"), 10) : -1;\n\n        if (!isControl && !isLine) {\n            return false;\n        }\n\n        const result = triggerEvent<RoundableProps>(\n            moveable, \"onRoundStart\", fillParams<OnRoundStart>(moveable, e, {}));\n\n        if (result === false) {\n            return false;\n        }\n\n        datas.lineIndex = lineIndex;\n        datas.controlIndex = controlIndex;\n        datas.isControl = isControl;\n        datas.isLine = isLine;\n\n        setDragStart(moveable, e);\n\n        const {\n            roundRelative,\n        } = moveable.props;\n        const state = moveable.state;\n        const {\n            target,\n            width,\n            height,\n        } = state;\n\n        datas.isRound = true;\n        datas.prevDist = [0, 0];\n        const controlPoses = getBorderRadius(target!, width, height) || [];\n\n        datas.controlPoses = controlPoses;\n\n        state.borderRadiusState = getRadiusStyles(\n            controlPoses.map(pos => pos.pos), controlPoses, roundRelative!, width, height).styles.join(\" \");\n        return true;\n    },\n    dragControl(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isRound || !datas.isControl || !datas.controlPoses.length) {\n            return false;\n        }\n        const index = datas.controlIndex as number;\n        const controlPoses = datas.controlPoses as ControlPose[];\n        const [distX, distY] = getDragDist(e);\n        const dist = [distX, distY];\n        const delta = minus(dist, datas.prevDist);\n\n        const dists = moveControlPos(controlPoses, index, dist);\n        const nextPoses = controlPoses.map((pos, i) => plus(pos.pos, dists[i]));\n\n        datas.prevDist = [distX, distY];\n\n        triggerRoundEvent(\n            moveable,\n            e,\n            dist,\n            delta,\n            controlPoses,\n            nextPoses,\n        );\n        return true;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const state = moveable.state;\n\n        state.borderRadiusState = \"\";\n        const { datas, isDouble } = e;\n        if (!datas.isRound) {\n            return false;\n        }\n        const {\n            width,\n            height,\n        } = state;\n        const {\n            isControl,\n            controlIndex,\n            isLine,\n            lineIndex,\n        } = datas;\n        const controlPoses = datas.controlPoses as ControlPose[];\n        const poses = controlPoses.map(pos => pos.pos);\n        const length = poses.length;\n\n        if (isDouble) {\n            if (isControl) {\n                removeRadiusPos(controlPoses, poses, controlIndex, 0);\n            } else if (isLine) {\n                const [distX, distY] = caculatePointerDist(moveable, e);\n\n                addBorderRadius(controlPoses, poses, lineIndex, distX, distY, width, height);\n            }\n            if (length !== controlPoses.length) {\n                triggerRoundEvent(\n                    moveable,\n                    e,\n                    [0, 0],\n                    [0, 0],\n                    controlPoses,\n                    poses,\n                );\n            }\n            triggerEvent<RoundableProps>(moveable, \"onRoundEnd\",\n                fillEndParams<OnRoundEnd>(moveable, e, {}));\n        }\n        state.borderRadiusState = \"\";\n        return true;\n    },\n    unset(moveable: MoveableManagerInterface<RoundableProps, RoundableState>) {\n        moveable.state.borderRadiusState = \"\";\n    },\n};\n/**\n * Whether to show and drag or double click border-radius, (default: false)\n * @name Moveable.Roundable#roundable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * % Can be used instead of the absolute px\n * @name Moveable.Roundable#roundRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When drag start the clip area or controls, the `roundStart` event is called.\n * @memberof Moveable.Roundable\n * @event roundStart\n * @param {Moveable.Roundable.OnRoundStart} - Parameters for the `roundStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag or double click the border area or controls, the `round` event is called.\n * @memberof Moveable.Roundable\n * @event round\n * @param {Moveable.Roundable.OnRound} - Parameters for the `round` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag end the border area or controls, the `roundEnd` event is called.\n * @memberof Moveable.Roundable\n * @event roundEnd\n * @param {Moveable.Roundable.onRoundEnd} - Parameters for the `roundEnd` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n","import {\n    MoveableManagerInterface, BeforeRenderableProps,\n    OnBeforeRenderStart, OnBeforeRender, OnBeforeRenderEnd,\n    MoveableGroupInterface, OnBeforeRenderGroupStart,\n    OnBeforeRenderGroup, OnBeforeRenderGroupEnd\n} from \"../types\";\nimport { fillParams, triggerEvent } from \"../utils\";\nimport { convertMatrixtoCSS } from \"../matrix\";\nimport { isArray, splitSpace } from \"@daybrush/utils\";\nimport { fillChildEvents } from \"../groupUtils\";\n\nexport default {\n    isPinch: true,\n    name: \"beforeRenderable\",\n    props: {\n    } as const,\n    events: {\n        onBeforeRenderStart: \"beforeRenderStart\",\n        onBeforeRender: \"beforeRender\",\n        onBeforeRenderEnd: \"beforeRenderEnd\",\n        onBeforeRenderGroupStart: \"beforeRenderGroupStart\",\n        onBeforeRenderGroup: \"beforeRenderGroup\",\n        onBeforeRenderGroupEnd: \"beforeRenderGroupEnd\",\n    } as const,\n    setTransform(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        const {\n            is3d,\n            targetMatrix,\n        } = moveable.state;\n        const cssMatrix = is3d\n            ? `matrix3d(${targetMatrix.join(\",\")})`\n            : `matrix(${convertMatrixtoCSS(targetMatrix, true)})`;\n        e.datas.startTransforms = [cssMatrix];\n    },\n    resetTransform(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        e.datas.nextTransforms = e.datas.startTransforms;\n        e.datas.nextTransformAppendedIndexes = [];\n    },\n    fillDragStartParams(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return fillParams<OnBeforeRenderStart>(moveable, e, {\n            setTransform: (transform: string | string[]) => {\n                e.datas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n            },\n            isPinch: !!e.isPinch,\n        });\n    },\n    fillDragParams(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return fillParams<OnBeforeRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n        });\n    },\n    dragStart(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        this.setTransform(moveable, e);\n\n        triggerEvent(moveable, `onBeforeRenderStart`, this.fillDragStartParams(moveable, e));\n    },\n    drag(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        this.resetTransform(moveable, e);\n\n        triggerEvent(moveable, `onBeforeRender`, fillParams<OnBeforeRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n        }));\n    },\n    dragEnd(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        triggerEvent(moveable, `onBeforeRenderEnd`, fillParams<OnBeforeRenderEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n        }));\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.dragStart(moveable, e);\n\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            this.setTransform(childMoveable, childEvent);\n            return this.fillDragStartParams(childMoveable, childEvent);\n        });\n        triggerEvent(moveable, `onBeforeRenderGroupStart`, fillParams<OnBeforeRenderGroupStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n            setTransform() { },\n            events: params,\n        }));\n    },\n    dragGroup(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.drag(moveable, e);\n\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            this.resetTransform(childMoveable, childEvent);\n            return this.fillDragParams(childMoveable, childEvent);\n        });\n\n        triggerEvent(moveable, `onBeforeRenderGroup`, fillParams<OnBeforeRenderGroup>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n            events: params,\n        }));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.dragEnd(moveable, e);\n\n        triggerEvent(moveable, `onBeforeRenderGroupEnd`, fillParams<OnBeforeRenderGroupEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragControl(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroupStart(moveable, e);\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroup(moveable, e);\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroupEnd(moveable, e);\n    },\n} as const;\n","import {\n    MoveableManagerInterface, RenderableProps, OnRenderStart, OnRender,\n    OnRenderEnd, MoveableGroupInterface, OnRenderGroupStart, OnRenderGroup, OnRenderGroupEnd\n} from \"../types\";\nimport { triggerEvent, fillParams } from \"../utils\";\n\nexport default {\n    name: \"Renderable\",\n    props: {\n    } as const,\n    events: {\n        onRenderStart: \"renderStart\",\n        onRender: \"render\",\n        onRenderEnd: \"renderEnd\",\n        onRenderGroupStart: \"renderGroupStart\",\n        onRenderGroup: \"renderGroup\",\n        onRenderGroupEnd: \"renderGroupEnd\",\n    } as const,\n    dragStart(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderStart`, fillParams<OnRenderStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n        }));\n    },\n    drag(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRender`, fillParams<OnRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n        }));\n    },\n    dragEnd(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderEnd`, fillParams<OnRenderEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n        }));\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderGroupStart`, fillParams<OnRenderGroupStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragGroup(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderGroup`, fillParams<OnRenderGroup>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderGroupEnd`, fillParams<OnRenderGroupEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragControl(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroupStart(moveable, e);\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroup(moveable, e);\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroupEnd(moveable, e);\n    },\n} as const;\n","import { Able, MoveableManagerInterface, MoveableGroupInterface } from \"../types\";\nimport { IObject } from \"@daybrush/utils\";\nimport { convertDragDist } from \"../utils\";\nimport Gesto from \"gesto\";\nimport BeforeRenderable from \"../ables/BeforeRenderable\";\nimport Renderable from \"../ables/Renderable\";\n\nexport function triggerAble(\n    moveable: MoveableManagerInterface,\n    ableType: string,\n    eventOperation: string,\n    eventAffix: string,\n    eventType: any,\n    e: any,\n    requestInstant?: boolean,\n) {\n    const isStart = eventType === \"Start\";\n    const target = moveable.state.target;\n    const isRequest = e.isRequest;\n\n    if (\n        !target\n        || (isStart && eventAffix.indexOf(\"Control\") > -1\n            && !isRequest && moveable.areaElement === e.inputEvent.target)\n    ) {\n        return false;\n    }\n    const eventName = `${eventOperation}${eventAffix}${eventType}`;\n    const conditionName = `${eventOperation}${eventAffix}Condition`;\n    const isEnd = eventType === \"End\";\n    const isAfter = eventType.indexOf(\"After\") > -1;\n    const isFirstStart = isStart && (\n        !moveable.targetGesto || !moveable.controlGesto\n        || (!moveable.targetGesto.isFlag() || !moveable.controlGesto.isFlag())\n    );\n\n    if (isFirstStart) {\n        moveable.updateRect(eventType, true, false);\n    }\n    if (eventType === \"\" && !isAfter) {\n        convertDragDist(moveable.state, e);\n    }\n    const isGroup = eventAffix.indexOf(\"Group\") > -1;\n    const ables: Able[] = [BeforeRenderable, ...(moveable as any)[ableType].slice(), Renderable];\n\n    if (isRequest) {\n        const requestAble = e.requestAble;\n        if (!ables.some(able => able.name === requestAble)) {\n            ables.push(...moveable.props.ables!.filter(able => able.name === requestAble));\n        }\n    }\n\n    if (!ables.length) {\n        return false;\n    }\n    const events = ables.filter((able: any) => able[eventName]);\n    const datas = e.datas;\n\n    if (isFirstStart) {\n        events.forEach(able => {\n            able.unset && able.unset(moveable);\n        });\n    }\n\n    const inputEvent = e.inputEvent;\n    let inputTarget: Element;\n\n    if (isEnd && inputEvent) {\n        inputTarget = document.elementFromPoint(e.clientX, e.clientY) || inputEvent.target;\n    }\n    const results = events.filter((able: any) => {\n        const hasCondition = isStart && able[conditionName];\n        const ableName = able.name;\n        const nextDatas = datas[ableName] || (datas[ableName] = {});\n\n        if (!hasCondition || able[conditionName](e, moveable)) {\n            return able[eventName](moveable, { ...e, datas: nextDatas, originalDatas: datas, inputTarget });\n        }\n        return false;\n    });\n\n    const isUpdate = results.length;\n    const isForceEnd = isStart && events.length && !isUpdate;\n\n    if (isEnd || isForceEnd) {\n        moveable.state.gesto = null;\n\n        if ((moveable as MoveableGroupInterface).moveables) {\n            (moveable as MoveableGroupInterface).moveables.forEach(childMoveable => {\n                childMoveable.state.gesto = null;\n            });\n        }\n    }\n    if (isFirstStart && isForceEnd) {\n        events.forEach(able => {\n            able.unset && able.unset(moveable);\n        });\n    }\n    if (moveable.isUnmounted || isForceEnd) {\n        return false;\n    }\n    if ((!isStart && isUpdate && !requestInstant) || isEnd) {\n        if (results.some(able => able.updateRect) && !isGroup) {\n            moveable.updateRect(eventType, false, false);\n        } else {\n            moveable.updateRect(eventType, true, false);\n        }\n        moveable.forceUpdate();\n    }\n    if (!isStart && !isEnd && !isAfter && isUpdate && !requestInstant) {\n        triggerAble(moveable, ableType, eventOperation, eventAffix, eventType + \"After\", e);\n    }\n    return true;\n}\n\nexport function getTargetAbleGesto(\n    moveable: MoveableManagerInterface,\n    moveableTarget: HTMLElement | SVGElement,\n    eventAffix: string,\n) {\n    const controlBox = moveable.controlBox.getElement();\n    const targets: Array<HTMLElement | SVGElement> = [];\n\n    targets.push(controlBox);\n\n    if (!moveable.props.dragArea) {\n        targets.push(moveableTarget);\n    }\n\n    const startFunc = (e: any) => {\n        const eventTarget = e.inputEvent.target;\n        const areaElement = moveable.areaElement;\n\n        return eventTarget === areaElement\n            || !moveable.isMoveableElement(eventTarget)\n            || eventTarget.className.indexOf(\"moveable-area\") > -1\n            || eventTarget.className.indexOf(\"moveable-padding\") > -1;\n    };\n\n    return getAbleGesto(moveable, targets, \"targetAbles\", eventAffix, {\n        dragStart: startFunc,\n        pinchStart: startFunc,\n    });\n}\nexport function getAbleGesto(\n    moveable: MoveableManagerInterface,\n    target: HTMLElement | SVGElement | Array<HTMLElement | SVGElement>,\n    ableType: string,\n    eventAffix: string,\n    conditionFunctions: IObject<any> = {},\n) {\n    const {\n        pinchOutside,\n        pinchThreshold,\n    } = moveable.props;\n    const options: IObject<any> = {\n        container: window,\n        pinchThreshold,\n        pinchOutside,\n    };\n    const gesto = new Gesto(target!, options);\n\n    [\"drag\", \"pinch\"].forEach(eventOperation => {\n        [\"Start\", \"\", \"End\"].forEach(eventType => {\n            gesto.on(`${eventOperation}${eventType}`, e => {\n                const eventName = e.eventType;\n\n                if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\n                    e.stop();\n                    return;\n                }\n                const result = triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);\n\n                if (!result) {\n                    e.stop();\n                }\n            });\n        });\n    });\n\n    return gesto;\n}\n","import * as React from \"react\";\nimport { PREFIX } from \"./consts\";\nimport {\n    prefix,\n    getTargetInfo,\n    unset,\n    isInside,\n    getAbsolutePosesByState,\n    getRect,\n    filterAbles,\n    equals,\n    flat,\n    groupByMap,\n    caculatePadding,\n} from \"./utils\";\nimport Gesto from \"gesto\";\nimport { ref } from \"framework-utils\";\nimport { MoveableManagerProps, MoveableManagerState, Able, RectInfo, Requester, PaddingBox, HitRect } from \"./types\";\nimport { triggerAble, getTargetAbleGesto, getAbleGesto } from \"./gesto/getAbleGesto\";\nimport { getRad, plus } from \"./matrix\";\nimport { IObject } from \"@daybrush/utils\";\nimport { renderLine } from \"./renderDirection\";\n\nexport default class MoveableManager<T = {}>\n    extends React.PureComponent<MoveableManagerProps<T>, MoveableManagerState> {\n    public static defaultProps: Required<MoveableManagerProps> = {\n        target: null,\n        dragTarget: null,\n        container: null,\n        rootContainer: null,\n        origin: true,\n        edge: false,\n        parentMoveable: null,\n        parentPosition: null,\n        ables: [],\n        pinchThreshold: 20,\n        dragArea: false,\n        passDragArea: false,\n        transformOrigin: \"\",\n        className: \"\",\n        zoom: 1,\n        triggerAblesSimultaneously: false,\n        padding: {},\n        pinchOutside: true,\n        checkInput: false,\n        groupable: false,\n        cspNonce: \"\",\n        translateZ: 50,\n        cssStyled: null,\n    };\n    public state: MoveableManagerState = {\n        container: null,\n        target: null,\n        gesto: null,\n        renderPoses: [[0, 0], [0, 0], [0, 0], [0, 0]],\n        ...getTargetInfo(null),\n    };\n    public targetAbles: Able[] = [];\n    public controlAbles: Able[] = [];\n    public controlBox!: { getElement(): HTMLElement };\n    public areaElement!: HTMLElement;\n    public targetGesto!: Gesto;\n    public controlGesto!: Gesto;\n    public rotation: number = 0;\n    public scale: number[] = [1, 1];\n    public isUnmounted = false;\n\n    public render() {\n        const props = this.props;\n        const state = this.state;\n        const {\n            edge, parentPosition, className,\n            target: propsTarget,\n            zoom, cspNonce,\n            translateZ,\n            cssStyled: ControlBoxElement,\n        } = props;\n\n        this.checkUpdate();\n        this.updateRenderPoses();\n\n        const { left: parentLeft, top: parentTop } = parentPosition! || { left: 0, top: 0 };\n        const { left, top, target: stateTarget, direction, renderPoses } = state;\n        const groupTargets = (props as any).targets;\n        const isDisplay = ((groupTargets && groupTargets.length) || propsTarget) && stateTarget;\n        const isDragging = this.isDragging();\n        const ableAttributes: IObject<boolean> = {};\n        const Renderer = { createElement: React.createElement };\n        this.getEnabledAbles().forEach(able => {\n            ableAttributes[`data-able-${able.name.toLowerCase()}`] = true;\n        });\n        return (\n            <ControlBoxElement\n                cspNonce={cspNonce}\n                ref={ref(this, \"controlBox\")}\n                className={`${prefix(\"control-box\", direction === -1\n                    ? \"reverse\" : \"\", isDragging ? \"dragging\" : \"\")} ${className}`}\n                {...ableAttributes}\n                style={{\n                    \"position\": \"absolute\",\n                    \"display\": isDisplay ? \"block\" : \"none\",\n                    \"transform\": `translate(${left - parentLeft}px, ${top - parentTop}px) translateZ(${translateZ}px)`,\n                    \"--zoom\": zoom,\n                    \"--zoompx\": `${zoom}px`,\n                }}>\n                {this.renderAbles()}\n                {renderLine(Renderer, edge ? \"n\" : \"\", renderPoses[0], renderPoses[1], 0)}\n                {renderLine(Renderer, edge ? \"e\" : \"\", renderPoses[1], renderPoses[3], 1)}\n                {renderLine(Renderer, edge ? \"w\" : \"\", renderPoses[0], renderPoses[2], 2)}\n                {renderLine(Renderer, edge ? \"s\" : \"\", renderPoses[2], renderPoses[3], 3)}\n            </ControlBoxElement>\n        );\n    }\n    public componentDidMount() {\n        this.controlBox.getElement();\n        const props = this.props;\n        const { parentMoveable, container } = props;\n\n        this.updateEvent(props);\n        if (!container && !parentMoveable) {\n            this.updateRect(\"End\", false, true);\n        }\n        this.updateCheckInput();\n    }\n    public componentDidUpdate(prevProps: MoveableManagerProps) {\n        this.updateEvent(prevProps);\n        this.updateCheckInput();\n    }\n    public componentWillUnmount() {\n        this.isUnmounted = true;\n        unset(this, \"targetGesto\");\n        unset(this, \"controlGesto\");\n    }\n    public getContainer(): HTMLElement | SVGElement {\n        const { parentMoveable, container } = this.props;\n\n        return container!\n            || (parentMoveable && parentMoveable.getContainer())\n            || this.controlBox.getElement().parentElement!;\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @method Moveable#isMoveableElement\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: Element) {\n        return target && ((target.getAttribute(\"class\") || \"\").indexOf(PREFIX) > -1);\n    }\n    /**\n     * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n     * @method Moveable#dragStart\n     * @param - external `MouseEvent`or `TouchEvent`\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *          moveable.dragStart(e);\n     *     }\n     * });\n     */\n    public dragStart(e: MouseEvent | TouchEvent) {\n        if (this.targetGesto) {\n            this.targetGesto.triggerDragStart(e);\n        }\n        return this;\n    }\n    /**\n     * Hit test an element or rect on a moveable target.\n     * @method Moveable#hitTest\n     * @param - element or rect to test\n     * @return - Get hit test rate (rate > 0 is hitted)\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (moveable.hitTest(e.target) > 0) {\n     *          console.log(\"hiited\");\n     *     }\n     * });\n     */\n    public hitTest(el: Element | HitRect): number {\n        let rect: Required<HitRect>;\n\n        if (el instanceof Element) {\n            const clientRect = el.getBoundingClientRect();\n\n            rect = {\n                left: clientRect.left,\n                top: clientRect.top,\n                width: clientRect.width,\n                height: clientRect.height,\n            };\n        } else {\n            rect = { width: 0, height: 0, ...el };\n        }\n        const {\n            left: rectLeft,\n            top: rectTop,\n            width: rectWidth,\n            height: rectHeight,\n        } = this.state.targetClientRect;\n        const {\n            left,\n            top,\n            width,\n            height,\n        } = rect;\n        const right = left + width;\n        const bottom = top + height;\n        const rectRight = rectLeft + rectWidth;\n        const rectBottom = rectTop + rectHeight;\n        const testLeft = Math.max(rectLeft, left);\n        const testRight = Math.min(rectRight, right);\n        const testTop = Math.max(rectTop, top);\n        const testBottom = Math.min(rectBottom, bottom);\n\n        if (testRight < testLeft || testBottom < testTop) {\n            return 0;\n        }\n\n        const rectSize = (Math.min(rectRight, right) - Math.max(left, rectLeft))\n            * (Math.min(rectBottom, bottom) - Math.max(rectTop, top));\n\n        return Math.min(100, (testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n    }\n    /**\n     * Whether the coordinates are inside Moveable\n     * @method Moveable#isInside\n     * @param - x coordinate\n     * @param - y coordinate\n     * @return - True if the coordinate is in moveable or false\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (moveable.isInside(e.clientX, e.clientY)) {\n     *          console.log(\"inside\");\n     *     }\n     * });\n     */\n    public isInside(clientX: number, clientY: number) {\n        const { pos1, pos2, pos3, pos4, target, targetClientRect } = this.state;\n\n        if (!target) {\n            return false;\n        }\n        const { left, top } = targetClientRect;\n        const pos = [clientX - left, clientY - top];\n\n        return isInside(pos, pos1, pos2, pos3, pos4);\n    }\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @method Moveable#updateRect\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        const props = this.props;\n        const parentMoveable = props.parentMoveable;\n        const state = this.state;\n        const target = (state.target || this.props.target) as HTMLElement | SVGElement;\n        const container = this.getContainer();\n        const rootContainer = parentMoveable\n            ? parentMoveable.props.rootContainer\n            : props.rootContainer;\n        this.updateState(\n            getTargetInfo(this.controlBox && this.controlBox.getElement(),\n                target, container, container,\n                rootContainer || container, isTarget ? state : undefined),\n            parentMoveable ? false : isSetState,\n        );\n    }\n    public updateEvent(prevProps: MoveableManagerProps) {\n        const controlBoxElement = this.controlBox.getElement();\n        const hasTargetAble = this.targetAbles.length;\n        const hasControlAble = this.controlAbles.length;\n        const props = this.props;\n        const target = props.dragTarget || props.target;\n        const prevTarget = prevProps.dragTarget || prevProps.target;\n        const dragArea = props.dragArea;\n        const prevDragArea = prevProps.dragArea;\n        const isTargetChanged = !dragArea && prevTarget !== target;\n        const isUnset = (!hasTargetAble && this.targetGesto)\n            || isTargetChanged\n            || prevDragArea !== dragArea;\n\n        if (isUnset) {\n            unset(this, \"targetGesto\");\n            this.updateState({ gesto: null });\n        }\n        if (!hasControlAble) {\n            unset(this, \"controlGesto\");\n        }\n\n        if (target && hasTargetAble && !this.targetGesto) {\n            this.targetGesto = getTargetAbleGesto(this, target!, \"\");\n        }\n        if (!this.controlGesto && hasControlAble) {\n            this.controlGesto = getAbleGesto(this, controlBoxElement, \"controlAbles\", \"Control\");\n        }\n        if (isUnset) {\n            this.unsetAbles();\n        }\n    }\n    /**\n     * Check if the moveable state is being dragged.\n     * @method Moveable#isDragging\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // false\n     * console.log(moveable.isDragging());\n     *\n     * moveable.on(\"drag\", () => {\n     *   // true\n     *   console.log(moveable.isDragging());\n     * });\n     */\n    public isDragging() {\n        return (this.targetGesto ? this.targetGesto.isFlag() : false)\n            || (this.controlGesto ? this.controlGesto.isFlag() : false);\n    }\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * @method Moveable#updateTarget\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(type?: \"Start\" | \"\" | \"End\") {\n        this.updateRect(type, true);\n    }\n    /**\n     * You can get the vertex information, position and offset size information of the target based on the container.\n     * @method Moveable#getRect\n     * @return - The Rect Info\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * const rectInfo = moveable.getRect();\n     */\n    public getRect(): RectInfo {\n        const state = this.state;\n        const poses = getAbsolutePosesByState(this.state);\n        const [pos1, pos2, pos3, pos4] = poses;\n        const rect = getRect(poses);\n        const {\n            width: offsetWidth,\n            height: offsetHeight,\n        } = state;\n        const {\n            width,\n            height,\n            left,\n            top,\n        } = rect;\n        const statePos = [state.left, state.top];\n        const origin = plus(statePos, state.origin);\n        const beforeOrigin = plus(statePos, state.beforeOrigin);\n        const transformOrigin = state.transformOrigin;\n\n        return {\n            width,\n            height,\n            left,\n            top,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            offsetWidth,\n            offsetHeight,\n            beforeOrigin,\n            origin,\n            transformOrigin,\n            rotation: this.getRotation(),\n        };\n    }\n    public getRotation() {\n        const {\n            pos1,\n            pos2,\n            direction,\n        } = this.state;\n\n        let deg = getRad(pos1, pos2) / Math.PI * 180;\n\n        deg = direction >= 0 ? deg : 180 - deg;\n        deg = deg >= 0 ? deg : 360 + deg;\n\n        return deg;\n    }\n    /**\n     * Request able through a method rather than an event.\n     * At the moment of execution, requestStart is executed,\n     * and then request and requestEnd can be executed through Requester.\n     * @method Moveable#request\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}\n     * @param - ableName\n     * @param - request to be able params.\n     * @param - If isInstant is true, request and requestEnd are executed immediately.\n     * @return - Able Requester. If there is no request in able, nothing will work.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n     *\n     * // Start move\n     * const requester = moveable.request(\"draggable\");\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.requestEnd();\n     */\n    public request(ableName: string, param: IObject<any> = {}, isInstant?: boolean): Requester {\n        const { ables, groupable } = this.props as any;\n        const requsetAble: Able = ables!.filter((able: Able) => able.name === ableName)[0];\n\n        if (this.isDragging() || !requsetAble || !requsetAble.request) {\n            return {\n                request() {\n                    return this;\n                },\n                requestEnd() {\n                    return this;\n                },\n            };\n        }\n        const self = this;\n        const ableRequester = requsetAble.request(this);\n\n        const requestInstant = isInstant || param.isInstant;\n        const ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\n        const eventAffix = `${(groupable ? \"Group\" : \"\")}${ableRequester.isControl ? \"Control\" : \"\"}`;\n\n        const requester = {\n            request(ableParam: IObject<any>) {\n                triggerAble(self, ableType, \"drag\", eventAffix, \"\", {\n                    ...ableRequester.request(ableParam),\n                    requestAble: ableName,\n                    isRequest: true,\n                }, requestInstant);\n                return this;\n            },\n            requestEnd() {\n                triggerAble(self, ableType, \"drag\", eventAffix, \"End\", {\n                    ...ableRequester.requestEnd(),\n                    requestAble: ableName,\n                    isRequest: true,\n                }, requestInstant);\n                return this;\n            },\n        };\n\n        triggerAble(self, ableType, \"drag\", eventAffix, \"Start\", {\n            ...ableRequester.requestStart(param),\n            requestAble: ableName,\n            isRequest: true,\n        }, requestInstant);\n\n        return requestInstant ? requester.request(param).requestEnd() : requester;\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @method Moveable#destroy\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy(): void {\n        this.componentWillUnmount();\n    }\n    public updateRenderPoses() {\n        const state = this.state;\n        const props = this.props;\n        const {\n            beforeOrigin, transformOrigin,\n            allMatrix, is3d, pos1, pos2, pos3, pos4,\n            left: stateLeft, top: stateTop,\n        } = state;\n        const {\n            left = 0,\n            top = 0,\n            bottom = 0,\n            right = 0,\n        } = (props.padding || {}) as PaddingBox;\n        const n = is3d ? 4 : 3;\n        const absoluteOrigin = (props as any).groupable ? beforeOrigin : plus(beforeOrigin, [stateLeft, stateTop]);\n\n        state.renderPoses = [\n            plus(pos1, caculatePadding(allMatrix, [-left, -top], transformOrigin, absoluteOrigin, n)),\n            plus(pos2, caculatePadding(allMatrix, [right, -top], transformOrigin, absoluteOrigin, n)),\n            plus(pos3, caculatePadding(allMatrix, [-left, bottom], transformOrigin, absoluteOrigin, n)),\n            plus(pos4, caculatePadding(allMatrix, [right, bottom], transformOrigin, absoluteOrigin, n)),\n        ];\n    }\n    public checkUpdate() {\n        const { target, container, parentMoveable } = this.props;\n        const {\n            target: stateTarget,\n            container: stateContainer,\n        } = this.state;\n\n        if (!stateTarget && !target) {\n            return;\n        }\n        this.updateAbles();\n\n        const isChanged = !equals(stateTarget, target) || !equals(stateContainer, container);\n\n        if (!isChanged) {\n            return;\n        }\n\n        this.updateState({ target, container });\n\n        if (!parentMoveable && (container || this.controlBox)) {\n            this.updateRect(\"End\", false, false);\n        }\n    }\n    public triggerEvent(name: string, e: any): any {\n        const callback = (this.props as any)[name];\n\n        return callback && callback(e);\n    }\n    protected unsetAbles() {\n        if (this.targetAbles.filter(able => {\n            if (able.unset) {\n                able.unset(this);\n                return true;\n            }\n            return false;\n        }).length) {\n            this.forceUpdate();\n        }\n    }\n    protected updateAbles(\n        ables: Able[] = this.props.ables!,\n        eventAffix: string = \"\",\n    ) {\n        const props = this.props as any;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const enabledAbles = ables!.filter(able => able && (able.always || props[able.name]));\n\n        const dragStart = `drag${eventAffix}Start` as \"dragStart\";\n        const pinchStart = `pinch${eventAffix}Start` as \"pinchStart\";\n        const dragControlStart = `drag${eventAffix}ControlStart` as \"dragControlStart\";\n\n        const targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\n        const controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\n\n        this.targetAbles = targetAbles;\n        this.controlAbles = controlAbles;\n    }\n    protected updateState(nextState: any, isSetState?: boolean) {\n        if (isSetState) {\n            this.setState(nextState);\n        } else {\n            const state = this.state;\n\n            for (const name in nextState) {\n                (state as any)[name] = nextState[name];\n            }\n        }\n    }\n    protected getEnabledAbles() {\n        const props = this.props as any;\n        const ables: Able[] = props.ables!;\n        return ables.filter(able => able && props[able.name]);\n    }\n    protected renderAbles() {\n        const props = this.props as any;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const Renderer = { createElement: React.createElement };\n\n        return groupByMap(flat<any>(\n            filterAbles(this.getEnabledAbles(), [\"render\"], triggerAblesSimultaneously).map(({ render }) => {\n                return render!(this, Renderer) || [];\n            })).filter(el => el), ({ key }) => key).map(group => group[0]);\n    }\n    protected updateCheckInput() {\n        this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);\n    }\n}\n\n/**\n * The target to indicate Moveable Control Box.\n * @name Moveable#target\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n */\n/**\n * Zooms in the elements of a moveable. (default: 1)\n * @name Moveable#zoom\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.zoom = 2;\n */\n\n/**\n * Resize, Scale Events at edges\n * @name Moveable#edge\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.edge = true;\n */\n\n/**\n * You can specify the className of the moveable controlbox. (default: \"\")\n * @name Moveable#className\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   className: \"\",\n * });\n *\n * moveable.className = \"moveable1\";\n */\n\n/**\n * The target(s) to drag Moveable target(s) (default: target)\n * @name Moveable#dragTarget\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n * moveable.dragTarget = document.querySelector(\".dragTarget\");\n */\n\n/**\n * `renderStart` event occurs at the first start of all events.\n * @memberof Moveable\n * @event renderStart\n * @param {Moveable.OnRenderStart} - Parameters for the `renderStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderStart\", ({ target }) => {\n *     console.log(\"onRenderStart\", target);\n * });\n */\n\n/**\n * `render` event occurs before the target is drawn on the screen.\n * @memberof Moveable\n * @event render\n * @param {Moveable.OnRender} - Parameters for the `render` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"render\", ({ target }) => {\n *     console.log(\"onRender\", target);\n * });\n */\n\n/**\n * `renderEnd` event occurs at the end of all events.\n * @memberof Moveable\n * @event renderEnd\n * @param {Moveable.OnRenderEnd} - Parameters for the `renderEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderEnd\", ({ target }) => {\n *     console.log(\"onRenderEnd\", target);\n * });\n */\n\n/**\n * `renderGroupStart` event occurs at the first start of all events in group.\n * @memberof Moveable\n * @event renderGroupStart\n * @param {Moveable.OnRenderGroupStart} - Parameters for the `renderGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupStart\", ({ targets }) => {\n *     console.log(\"onRenderGroupStart\", targets);\n * });\n */\n\n/**\n * `renderGroup` event occurs before the target is drawn on the screen in group.\n * @memberof Moveable\n * @event renderGroup\n * @param {Moveable.OnRenderGroup} - Parameters for the `renderGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroup\", ({ targets }) => {\n *     console.log(\"onRenderGroup\", targets);\n * });\n */\n\n/**\n * `renderGroupEnd` event occurs at the end of all events in group.\n * @memberof Moveable\n * @event renderGroupEnd\n * @param {Moveable.OnRenderGroupEnd} - Parameters for the `renderGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupEnd\", ({ targets }) => {\n *     console.log(\"onRenderGroupEnd\", targets);\n * });\n */\n","import { refs } from \"framework-utils\";\nimport MoveableManager from \"../MoveableManager\";\nimport { Renderer, MoveableGroupInterface } from \"../types\";\n\nexport default {\n    name: \"groupable\",\n    props: {\n        defaultGroupRotate: Number,\n        defaultGroupOrigin: String,\n        groupable: Boolean,\n    } as const,\n    events: {} as const,\n    render(moveable: MoveableGroupInterface, React: Renderer): any[] {\n        const targets = moveable.props.targets || [];\n\n        moveable.moveables = [];\n        const { left, top } = moveable.state;\n        const position = { left, top };\n\n        return targets.map((target, i) => {\n            return <MoveableManager\n                key={\"moveable\" + i}\n                ref={refs(moveable, \"moveables\", i)}\n                target={target}\n                origin={false}\n                cssStyled={moveable.props.cssStyled}\n                parentMoveable={moveable}\n                parentPosition={position}\n            />;\n        });\n    },\n};\n","import {\n    MoveableManagerInterface, MoveableGroupInterface,\n    ClickableProps, OnClick, OnClickGroup\n} from \"../types\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport { findIndex } from \"@daybrush/utils\";\n\nexport default {\n    name: \"clickable\",\n    props: {} as const,\n    events: {\n        onClick: \"click\",\n        onClickGroup: \"clickGroup\",\n    } as const,\n    always: true,\n    dragStart() {},\n    dragGroupStart(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        e.datas.inputTarget = e.inputEvent && e.inputEvent.target;\n    },\n    dragEnd(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        const target = moveable.state.target!;\n        const inputEvent = e.inputEvent;\n        const inputTarget = e.inputTarget;\n\n        if (\n            !inputEvent || !inputTarget || e.isDrag\n            || moveable.isMoveableElement(inputTarget)\n            // External event duplicate target or dragAreaElement\n        ) {\n            return;\n        }\n        const containsTarget = target.contains(inputTarget);\n\n        triggerEvent<ClickableProps>(moveable, \"onClick\", fillParams<OnClick>(moveable, e, {\n            isDouble: e.isDouble,\n            inputTarget,\n            isTarget: target === inputTarget,\n            containsTarget,\n        }));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<ClickableProps>, e: any) {\n        const inputEvent = e.inputEvent;\n        const inputTarget = e.inputTarget;\n\n        if (\n            !inputEvent || !inputTarget || e.isDrag\n            || moveable.isMoveableElement(inputTarget)\n            // External event duplicate target or dragAreaElement\n            || e.datas.inputTarget === inputTarget\n        ) {\n            return;\n        }\n        const targets = moveable.props.targets!;\n        let targetIndex = targets.indexOf(inputTarget);\n        const isTarget = targetIndex > -1;\n        let containsTarget = false;\n\n        if (targetIndex === -1) {\n            targetIndex = findIndex(targets, parentTarget => parentTarget.contains(inputTarget));\n            containsTarget = targetIndex > -1;\n        }\n\n        triggerEvent<ClickableProps>(moveable, \"onClickGroup\", fillParams<OnClickGroup>(moveable, e, {\n            isDouble: e.isDouble,\n            targets,\n            inputTarget,\n            targetIndex,\n            isTarget,\n            containsTarget,\n        }));\n    },\n} as const;\n\n/**\n * When you click on the element, the `click` event is called.\n * @memberof Moveable\n * @event click\n * @param {Moveable.OnClick} - Parameters for the `click` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"click\", ({ hasTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", target, hasTarget, containsTarget, targetIndex);\n * });\n */\n\n/**\n * When you click on the element inside the group, the `clickGroup` event is called.\n * @memberof Moveable\n * @event clickGroup\n * @param {Moveable.OnClickGroup} - Parameters for the `clickGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"clickGroup\", ({ inputTarget, isTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", inputTarget, isTarget, containsTarget, targetIndex);\n * });\n */\n","import Pinchable from \"./Pinchable\";\nimport Rotatable from \"./Rotatable\";\nimport Draggable from \"./Draggable\";\nimport Resizable from \"./Resizable\";\nimport Scalable from \"./Scalable\";\nimport Warpable from \"./Warpable\";\nimport Snappable from \"./Snappable\";\nimport DragArea from \"./DragArea\";\nimport Origin from \"./Origin\";\nimport Scrollable from \"./Scrollable\";\nimport Default from \"./Default\";\nimport Padding from \"./Padding\";\nimport Clippable from \"./Clippable\";\nimport OriginDraggable from \"./OriginDraggable\";\nimport Roundable from \"./Roundable\";\nimport { UnionToIntersection } from \"../types\";\nimport { invertObject } from \"../utils\";\nimport Groupable from \"./Groupable\";\nimport BeforeRenderable from \"./BeforeRenderable\";\nimport Renderable from \"./Renderable\";\nimport Clickable from \"./Clickable\";\n\nexport const MOVEABLE_ABLES = /*#__PURE__*/[\n    BeforeRenderable,\n    Default, Snappable, Pinchable, Draggable, Rotatable,\n    Resizable, Scalable, Warpable, Scrollable, Padding, Origin, OriginDraggable,\n    Clippable, Roundable, Groupable,\n    Clickable,\n    DragArea,\n    Renderable,\n] as const;\n\nexport const MOVEABLE_EVENTS_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce((current, able) => {\n    return {...current, ...able.events};\n}, {}) as UnionToIntersection<typeof MOVEABLE_ABLES[number][\"events\"]>;\nexport const MOVEABLE_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce((current, able) => {\n    return {...current, ...able.props};\n}, {}) as UnionToIntersection<typeof MOVEABLE_ABLES[number][\"props\"]>;\n\nexport const MOVEABLE_EVENTS_MAP = /*#__PURE__*/invertObject(MOVEABLE_EVENTS_PROPS_MAP);\nexport const MOVEABLE_EVENTS: string[] = /*#__PURE__*/Object.keys(MOVEABLE_EVENTS_MAP);\nexport const MOVEABLE_PROPS: string[] = /*#__PURE__*/Object.keys(MOVEABLE_PROPS_MAP);\n","import MoveableManager from \"./MoveableManager\";\nimport { GroupableProps, MoveableManagerProps, RectInfo } from \"./types\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\nimport { getAbleGesto, getTargetAbleGesto } from \"./gesto/getAbleGesto\";\nimport Groupable from \"./ables/Groupable\";\nimport { MIN_NUM, MAX_NUM, TINY_NUM } from \"./consts\";\nimport { getTargetInfo, throttle, getAbsolutePosesByState, equals } from \"./utils\";\nimport { plus, rotate } from \"./matrix\";\n\nfunction getMaxPos(poses: number[][][], index: number) {\n    return Math.max(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\nfunction getMinPos(poses: number[][][], index: number) {\n    return Math.min(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\nfunction getGroupRect(moveables: MoveableManager[], rotation: number) {\n    if (!moveables.length) {\n        return [0, 0, 0, 0];\n    }\n\n    const moveablePoses = moveables.map(({ state }) => getAbsolutePosesByState(state));\n    let minX = MAX_NUM;\n    let minY = MAX_NUM;\n    let groupWidth = 0;\n    let groupHeight = 0;\n    const fixedRotation = throttle(rotation, TINY_NUM);\n\n    if (fixedRotation % 90) {\n        const rad = rotation / 180 * Math.PI;\n        const a1 = Math.tan(rad);\n        const a2 = -1 / a1;\n        const b1s = [MIN_NUM, MAX_NUM];\n        const b2s = [MIN_NUM, MAX_NUM];\n\n        moveablePoses.forEach(poses => {\n            poses.forEach(pos => {\n                // ax + b = y\n                // ㅠ = y - ax\n                const b1 = pos[1] - a1 * pos[0];\n                const b2 = pos[1] - a2 * pos[0];\n\n                b1s[0] = Math.max(b1s[0], b1);\n                b1s[1] = Math.min(b1s[1], b1);\n                b2s[0] = Math.max(b2s[0], b2);\n                b2s[1] = Math.min(b2s[1], b2);\n            });\n        });\n\n        b1s.forEach(b1 => {\n            // a1x + b1 = a2x + b2\n            b2s.forEach(b2 => {\n                // (a1 - a2)x = b2 - b1\n                const x = (b2 - b1) / (a1 - a2);\n                const y = a1 * x + b1;\n\n                minX = Math.min(minX, x);\n                minY = Math.min(minY, y);\n            });\n        });\n        const rotatePoses = moveablePoses.map(([pos1, pos2, pos3, pos4]) => {\n\n            return [\n                rotate(pos1, -rad),\n                rotate(pos2, -rad),\n                rotate(pos3, -rad),\n                rotate(pos4, -rad),\n            ];\n        });\n        groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);\n        groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);\n\n    } else {\n        minX = getMinPos(moveablePoses, 0);\n        minY = getMinPos(moveablePoses, 1);\n        groupWidth = getMaxPos(moveablePoses, 0) - minX;\n        groupHeight = getMaxPos(moveablePoses, 1) - minY;\n\n        if (fixedRotation % 180) {\n            const changedWidth = groupWidth;\n\n            groupWidth = groupHeight;\n            groupHeight = changedWidth;\n        }\n    }\n    return [minX, minY, groupWidth, groupHeight];\n}\n/**\n * @namespace Moveable.Group\n * @description You can make targets moveable.\n */\nclass MoveableGroup extends MoveableManager<GroupableProps> {\n    public static defaultProps = {\n        ...MoveableManager.defaultProps,\n        transformOrigin: [\"50%\", \"50%\"],\n        groupable: true,\n        dragArea: true,\n        keepRatio: true,\n        targets: [],\n        defaultGroupRotate: 0,\n        defaultGroupOrigin: \"50% 50%\",\n    };\n    public differ: ChildrenDiffer<HTMLElement | SVGElement> = new ChildrenDiffer();\n    public moveables: MoveableManager[] = [];\n    public transformOrigin = \"50% 50%\";\n\n    public updateEvent(prevProps: MoveableManagerProps<GroupableProps>) {\n        const state = this.state;\n        const props = this.props;\n\n        if (!state.target) {\n            state.target = this.areaElement;\n\n            this.controlBox.getElement().style.display = \"block\";\n            this.targetGesto = getTargetAbleGesto(this, state.target, \"Group\");\n            this.controlGesto = getAbleGesto(this, this.controlBox.getElement(), \"controlAbles\", \"GroupControl\");\n        }\n        const isContainerChanged = !equals(prevProps.container, props.container);\n\n        if (isContainerChanged) {\n            state.container = props.container;\n        }\n        const { added, changed, removed } = this.differ.update(props.targets!);\n\n        if (isContainerChanged || added.length || changed.length || removed.length) {\n            this.updateRect();\n        }\n    }\n    public checkUpdate() {\n        this.updateAbles();\n    }\n\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        if (!this.controlBox) {\n            return;\n        }\n        this.moveables.forEach(moveable => {\n            moveable.updateRect(type, false, false);\n        });\n\n        const state = this.state;\n        const props = this.props;\n        const target = state.target! || props.target!;\n\n        if (!isTarget || (type !== \"\" && props.updateGroup)) {\n            // reset rotataion\n            this.rotation = props.defaultGroupRotate!;\n            this.transformOrigin = props.defaultGroupOrigin || \"50% 50%\";\n            this.scale = [1, 1];\n\n        }\n        const rotation = this.rotation;\n        const scale = this.scale;\n        const [left, top, width, height] = getGroupRect(this.moveables, rotation);\n\n        // tslint:disable-next-line: max-line-length\n        target.style.cssText += `left:0px;top:0px; transform-origin: ${this.transformOrigin}; width:${width}px; height:${height}px;transform:rotate(${rotation}deg)`\n            + ` scale(${scale[0] >= 0 ? 1 : -1}, ${scale[1] >= 0 ? 1 : -1})`;\n        state.width = width;\n        state.height = height;\n\n        const container = this.getContainer();\n        const info = getTargetInfo(\n            this.controlBox.getElement(),\n            target,\n            this.controlBox.getElement(),\n            this.getContainer(),\n            this.props.rootContainer || container,\n            state,\n        );\n        const pos = [info.left!, info.top!];\n        [\n            info.pos1,\n            info.pos2,\n            info.pos3,\n            info.pos4,\n        ] = getAbsolutePosesByState(info as Required<typeof info>);\n        info.origin = plus(pos, info.origin!);\n        info.beforeOrigin = plus(pos, info.beforeOrigin!);\n\n        const clientRect = info.targetClientRect!;\n\n        clientRect.top += (top - info.top!) - state.top;\n        clientRect.left += (left - info.left!) - state.left;\n\n        const direction = scale[0] * scale[1] > 0 ? 1 : -1;\n        this.updateState(\n            {\n                ...info,\n                direction,\n                beforeDirection: direction,\n                left: left - info.left!,\n                top: top - info.top!,\n            },\n            isSetState,\n        );\n    }\n    public getRect(): RectInfo {\n        return {\n            ...super.getRect(),\n            children: this.moveables.map(child => child.getRect()),\n        };\n    }\n    public triggerEvent(name: string, e: any, isManager?: boolean): any {\n        if (isManager || name.indexOf(\"Group\") > -1) {\n            return super.triggerEvent(name as any, e);\n        }\n    }\n    protected updateAbles() {\n        super.updateAbles([...this.props.ables!, Groupable], \"Group\");\n    }\n}\n\n/**\n * Sets the initial rotation of the group. (default 0)\n * @name Moveable.Group#defaultGroupRotate\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   defaultGroupRotate: 0,\n * });\n *\n * moveable.defaultGroupRotate = 40;\n */\n\n/**\n * Sets the initial origin of the group. (default 0)\n * @name Moveable.Group#defaultGroupOrigin\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   defaultGroupOrigin: \"50% 50%\",\n * });\n *\n * moveable.defaultGroupOrigin = \"20% 40%\";\n */\nexport default MoveableGroup;\n","import * as React from \"react\";\nimport { Able, MoveableInterface, GroupableProps, MoveableDefaultProps } from \"./types\";\nimport MoveableManager from \"./MoveableManager\";\nimport MoveableGroup from \"./MoveableGroup\";\nimport { ref, withMethods, prefixCSS } from \"framework-utils\";\nimport { getKeys, IObject, isString } from \"@daybrush/utils\";\nimport { MOVEABLE_METHODS, PREFIX, MOVEABLE_CSS } from \"./consts\";\nimport Default from \"./ables/Default\";\nimport Groupable from \"./ables/Groupable\";\nimport DragArea from \"./ables/DragArea\";\nimport styled from \"react-css-styled\";\nimport { getRefTargets, getElementTargets } from \"./utils\";\n\nexport class InitialMoveable<T = {}>\n    extends React.PureComponent<MoveableDefaultProps & GroupableProps & T> {\n    public static defaultAbles: Able[] = [];\n    public static defaultStyled: any = null;\n    public static makeStyled() {\n        const cssMap: IObject<boolean> = {};\n\n        const ables = this.getTotalAbles();\n        ables.forEach(({ css }: Able) => {\n            if (!css) {\n                return;\n            }\n            css.forEach(text => {\n                cssMap[text] = true;\n            });\n        });\n        const style = getKeys(cssMap).join(\"\\n\");\n\n        this.defaultStyled = styled(\"div\", prefixCSS(PREFIX, MOVEABLE_CSS + style));\n    }\n    public static getTotalAbles(): Able[] {\n\n        return [Default, Groupable, DragArea, ...this.defaultAbles];\n    }\n    @withMethods(MOVEABLE_METHODS)\n    public moveable!: MoveableManager | MoveableGroup;\n    public refTargets: Array<HTMLElement | SVGElement | string | undefined | null> = [];\n    public selectorMap: IObject<Array<HTMLElement | SVGElement>> = {};\n    public render() {\n        const moveableContructor = (this.constructor as typeof InitialMoveable);\n\n        if (!moveableContructor.defaultStyled) {\n            moveableContructor.makeStyled();\n        }\n        const refTargets = getRefTargets((this.props.target || this.props.targets) as any);\n        const elementTargets = getElementTargets(refTargets, this.selectorMap);\n\n        this.refTargets = refTargets;\n\n        const isGroup = elementTargets.length > 1;\n        const totalAbles = moveableContructor.getTotalAbles();\n        const userAbles = this.props.ables! || [];\n        const ables = [\n            ...totalAbles,\n            ...userAbles,\n        ];\n\n        if (isGroup) {\n            return <MoveableGroup key=\"group\" ref={ref(this, \"moveable\")}\n                cssStyled={moveableContructor.defaultStyled}\n                {...this.props}\n                target={null}\n                targets={elementTargets}\n                ables={ables} />;\n        } else {\n            return <MoveableManager<any> key=\"single\" ref={ref(this, \"moveable\")}\n                cssStyled={moveableContructor.defaultStyled}\n                {...this.props}\n                target={elementTargets[0]}\n                ables={ables} />;\n        }\n    }\n    public componentDidMount() {\n        this.updateRefs();\n    }\n    public componentDidUpdate() {\n        this.updateRefs();\n    }\n    public updateRefs(isReset?: boolean) {\n        const refTargets = getRefTargets((this.props.target || this.props.targets) as any);\n        let isUpdate = this.refTargets.some((target, i) => {\n            const nextTarget = refTargets[i];\n\n            if (!target && !nextTarget) {\n                return false;\n            } else if (target !== nextTarget) {\n                return true;\n            }\n            return false;\n        });\n        const selectorMap = isReset ? {} : this.selectorMap;\n        const nextSelectorMap: IObject<Array<HTMLElement | SVGElement>> = {};\n        this.refTargets.forEach(target => {\n            if (isString(target)) {\n                if (!selectorMap[target]) {\n                    isUpdate = true;\n                    nextSelectorMap[target] = [].slice.call(document.querySelectorAll(target));\n                } else {\n                    nextSelectorMap[target] = selectorMap[target];\n                }\n            }\n        });\n\n        this.selectorMap = nextSelectorMap;\n\n        if (isUpdate) {\n            this.forceUpdate();\n        }\n    }\n}\nexport interface InitialMoveable<T = {}>\n    extends React.PureComponent<MoveableDefaultProps & GroupableProps & T>, MoveableInterface {\n    setState(state: any, callback?: () => any): any;\n}\n","import { MoveableProps, Able } from \"./types\";\nimport { MOVEABLE_ABLES } from \"./ables/consts\";\nimport { InitialMoveable } from \"./InitialMoveable\";\n\nexport default class Moveable<T = {}> extends InitialMoveable<MoveableProps & T> {\n    public static defaultAbles: Able[] = MOVEABLE_ABLES as any;\n}\n","import { Able } from \"./types\";\nimport { InitialMoveable } from \"./InitialMoveable\";\n\nexport function makeMoveable<T = {}>(\n    ables: Array<Able<T>>): typeof InitialMoveable & (new (...args: any[]) => InitialMoveable<T>) {\n    return class Moveable extends InitialMoveable<T> {\n        public static defaultAbles = ables;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}