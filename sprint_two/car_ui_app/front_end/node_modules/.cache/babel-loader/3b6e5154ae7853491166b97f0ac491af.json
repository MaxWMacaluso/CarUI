{"ast":null,"code":"/*\nCopyright (c) 2015 NAVER Corp.\nname: @egjs/agent\nlicense: MIT\nauthor: NAVER Corp.\nrepository: git+https://github.com/naver/agent.git\nversion: 2.2.1\n*/\nfunction some(arr, callback) {\n  var length = arr.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction find(arr, callback) {\n  var length = arr.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return arr[i];\n    }\n  }\n\n  return null;\n}\n\nfunction getUserAgent(agent) {\n  var userAgent = agent;\n\n  if (typeof userAgent === \"undefined\") {\n    if (typeof navigator === \"undefined\" || !navigator) {\n      return \"\";\n    }\n\n    userAgent = navigator.userAgent || \"\";\n  }\n\n  return userAgent.toLowerCase();\n}\n\nfunction execRegExp(pattern, text) {\n  try {\n    return new RegExp(pattern, \"g\").exec(text);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction hasUserAgentData() {\n  if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n    return false;\n  }\n\n  var userAgentData = navigator.userAgentData;\n  var brands = userAgentData.brands || userAgentData.uaList;\n  return !!(brands && brands.length);\n}\n\nfunction findVersion(versionTest, userAgent) {\n  var result = execRegExp(\"(\" + versionTest + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", userAgent);\n  return result ? result[3] : \"\";\n}\n\nfunction convertVersion(text) {\n  return text.replace(/_/g, \".\");\n}\n\nfunction findPreset(presets, userAgent) {\n  var userPreset = null;\n  var version = \"-1\";\n  some(presets, function (preset) {\n    var result = execRegExp(\"(\" + preset.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", userAgent);\n\n    if (!result || preset.brand) {\n      return false;\n    }\n\n    userPreset = preset;\n    version = result[3] || \"-1\";\n\n    if (preset.versionAlias) {\n      version = preset.versionAlias;\n    } else if (preset.versionTest) {\n      version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n    }\n\n    version = convertVersion(version);\n    return true;\n  });\n  return {\n    preset: userPreset,\n    version: version\n  };\n}\n\nfunction findBrand(brands, preset) {\n  return find(brands, function (_a) {\n    var brand = _a.brand;\n    return execRegExp(\"\" + preset.test, brand.toLowerCase());\n  });\n}\n\nvar BROWSER_PRESETS = [{\n  test: \"phantomjs\",\n  id: \"phantomjs\"\n}, {\n  test: \"whale\",\n  id: \"whale\"\n}, {\n  test: \"edgios|edge|edg\",\n  id: \"edge\"\n}, {\n  test: \"msie|trident|windows phone\",\n  id: \"ie\",\n  versionTest: \"iemobile|msie|rv\"\n}, {\n  test: \"miuibrowser\",\n  id: \"miui browser\"\n}, {\n  test: \"samsungbrowser\",\n  id: \"samsung internet\"\n}, {\n  test: \"samsung\",\n  id: \"samsung internet\",\n  versionTest: \"version\"\n}, {\n  test: \"chrome|crios\",\n  id: \"chrome\"\n}, {\n  test: \"firefox|fxios\",\n  id: \"firefox\"\n}, {\n  test: \"android\",\n  id: \"android browser\",\n  versionTest: \"version\"\n}, {\n  test: \"safari|iphone|ipad|ipod\",\n  id: \"safari\",\n  versionTest: \"version\"\n}]; // chromium's engine(blink) is based on applewebkit 537.36.\n\nvar CHROMIUM_PRESETS = [{\n  test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n  id: \"chrome\"\n}, {\n  test: \"chromium\",\n  id: \"chrome\"\n}, {\n  test: \"whale\",\n  id: \"chrome\",\n  brand: true\n}];\nvar WEBKIT_PRESETS = [{\n  test: \"applewebkit\",\n  id: \"webkit\"\n}];\nvar WEBVIEW_PRESETS = [{\n  test: \"(?=(iphone|ipad))(?!(.*version))\",\n  id: \"webview\"\n}, {\n  test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n  id: \"webview\"\n}, {\n  // test webview\n  test: \"webview\",\n  id: \"webview\"\n}];\nvar OS_PRESETS = [{\n  test: \"windows phone\",\n  id: \"windows phone\"\n}, {\n  test: \"windows 2000\",\n  id: \"window\",\n  versionAlias: \"5.0\"\n}, {\n  test: \"windows nt\",\n  id: \"window\"\n}, {\n  test: \"iphone|ipad|ipod\",\n  id: \"ios\",\n  versionTest: \"iphone os|cpu os\"\n}, {\n  test: \"mac os x\",\n  id: \"mac\"\n}, {\n  test: \"android\",\n  id: \"android\"\n}, {\n  test: \"tizen\",\n  id: \"tizen\"\n}, {\n  test: \"webos|web0s\",\n  id: \"webos\"\n}];\n\nfunction parseUserAgentData(osData) {\n  var userAgentData = navigator.userAgentData;\n  var brands = (userAgentData.uaList || userAgentData.brands).slice();\n  var isMobile = userAgentData.mobile || false;\n  var firstBrand = brands[0];\n  var browser = {\n    name: firstBrand.brand,\n    version: firstBrand.version,\n    majorVersion: -1,\n    webkit: false,\n    webview: some(WEBVIEW_PRESETS, function (preset) {\n      return findBrand(brands, preset);\n    }),\n    chromium: some(CHROMIUM_PRESETS, function (preset) {\n      return findBrand(brands, preset);\n    })\n  };\n  var os = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n  browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, function (preset) {\n    return findBrand(brands, preset);\n  });\n\n  if (osData) {\n    var platform_1 = osData.platform.toLowerCase();\n    var result = find(OS_PRESETS, function (preset) {\n      return new RegExp(\"\" + preset.test, \"g\").exec(platform_1);\n    });\n    os.name = result ? result.id : platform_1;\n    os.version = osData.platformVersion;\n  }\n\n  some(BROWSER_PRESETS, function (preset) {\n    var result = findBrand(brands, preset);\n\n    if (!result) {\n      return false;\n    }\n\n    browser.name = preset.id;\n    browser.version = osData ? osData.uaFullVersion : result.version;\n    return true;\n  });\n\n  if (navigator.platform === \"Linux armv8l\") {\n    os.name = \"android\";\n  } else if (browser.webkit) {\n    os.name = isMobile ? \"ios\" : \"mac\";\n  }\n\n  if (os.name === \"ios\" && browser.webview) {\n    browser.version = \"-1\";\n  }\n\n  os.version = convertVersion(os.version);\n  browser.version = convertVersion(browser.version);\n  os.majorVersion = parseInt(os.version, 10);\n  browser.majorVersion = parseInt(browser.version, 10);\n  return {\n    browser: browser,\n    os: os,\n    isMobile: isMobile,\n    isHints: true\n  };\n}\n\nfunction parseUserAgent(userAgent) {\n  var nextAgent = getUserAgent(userAgent);\n  var isMobile = !!/mobi/g.exec(nextAgent);\n  var browser = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1,\n    webview: !!findPreset(WEBVIEW_PRESETS, nextAgent).preset,\n    chromium: !!findPreset(CHROMIUM_PRESETS, nextAgent).preset,\n    webkit: false\n  };\n  var os = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n\n  var _a = findPreset(BROWSER_PRESETS, nextAgent),\n      browserPreset = _a.preset,\n      browserVersion = _a.version;\n\n  var _b = findPreset(OS_PRESETS, nextAgent),\n      osPreset = _b.preset,\n      osVersion = _b.version;\n\n  browser.webkit = !browser.chromium && !!findPreset(WEBKIT_PRESETS, nextAgent).preset;\n\n  if (osPreset) {\n    os.name = osPreset.id;\n    os.version = osVersion;\n    os.majorVersion = parseInt(osVersion, 10);\n  }\n\n  if (browserPreset) {\n    browser.name = browserPreset.id;\n    browser.version = browserVersion;\n\n    if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n      browser.webview = false;\n    }\n  }\n\n  browser.majorVersion = parseInt(browser.version, 10);\n  return {\n    browser: browser,\n    os: os,\n    isMobile: isMobile,\n    isHints: false\n  };\n}\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\n\n\nfunction getAccurateAgent(callback) {\n  if (hasUserAgentData()) {\n    return navigator.userAgentData.getHighEntropyValues([\"architecture\", \"model\", \"platform\", \"platformVersion\", \"uaFullVersion\"]).then(function (info) {\n      var agentInfo = parseUserAgentData(info);\n      callback && callback(agentInfo);\n      return agentInfo;\n    });\n  }\n\n  callback && callback(agent());\n\n  if (typeof Promise === \"undefined\" || !Promise) {\n    return null;\n  }\n\n  return Promise.resolve(agent());\n}\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\n\n\nfunction agent(userAgent) {\n  if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n    return parseUserAgentData();\n  } else {\n    return parseUserAgent(userAgent);\n  }\n}\n\nexport default agent;\nexport { getAccurateAgent };","map":{"version":3,"sources":["../src/utils.ts","../src/presets.ts","../src/userAgentData.ts","../src/userAgent.ts","../src/agent.ts"],"names":["some","arr","callback","length","i","find","getUserAgent","agent","userAgent","navigator","execRegExp","pattern","text","hasUserAgentData","userAgentData","brands","findVersion","versionTest","result","convertVersion","findPreset","presets","userPreset","version","preset","findBrand","brand","BROWSER_PRESETS","test","id","CHROMIUM_PRESETS","WEBKIT_PRESETS","WEBVIEW_PRESETS","OS_PRESETS","versionAlias","parseUserAgentData","osData","isMobile","firstBrand","browser","name","majorVersion","webkit","webview","chromium","os","platform_1","parseInt","isHints","parseUserAgent","nextAgent","browserPreset","browserVersion","osPreset","osVersion","getAccurateAgent","agentInfo","Promise"],"mappings":"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","sourcesContent":["import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgent(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\n\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n","import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n    },\n];\nexport const PLATFORM_PRESETS: PresetInfo[] = [\n    {\n        test: \"win\",\n        id: \"window\",\n    },\n    {\n        test: \"linux\",\n        id: \"linux\",\n    },\n    {\n        test: \"ipad|ipod|iphone\",\n        id: \"ios\",\n    },\n    {\n        test: \"android\",\n        id: \"android\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n","import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\n\nexport function parseUserAgentData(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webview: some(WEBVIEW_PRESETS, preset => findBrand(brands, preset)),\n        chromium: some(CHROMIUM_PRESETS, preset => findBrand(brands, preset)),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    if (osData) {\n        const platform = osData.platform.toLowerCase();\n\n        const result = find(OS_PRESETS, preset => {\n            return new RegExp(`${preset.test}`, \"g\").exec(platform);\n        });\n        os.name = result ? result.id : platform;\n        os.version = osData.platformVersion;\n    }\n    some(BROWSER_PRESETS, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n        browser.name = preset.id;\n        browser.version = osData ? osData.uaFullVersion : result.version;\n\n        return true;\n    });\n    if (navigator.platform === \"Linux armv8l\") {\n        os.name = \"android\";\n    } else if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { getUserAgent, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function parseUserAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgent(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: !!findPreset(WEBVIEW_PRESETS, nextAgent).preset,\n        chromium: !!findPreset(CHROMIUM_PRESETS, nextAgent).preset,\n        webkit: false,\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    browser.webkit = !browser.chromium && !!findPreset(WEBKIT_PRESETS, nextAgent).preset;\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n","import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { parseUserAgentData } from \"./userAgentData\";\nimport { parseUserAgent } from \"./userAgent\";\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n        ]).then(info => {\n            const agentInfo = parseUserAgentData(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return parseUserAgentData();\n    } else {\n        return parseUserAgent(userAgent);\n    }\n}\n\nexport default agent;\n"]},"metadata":{},"sourceType":"module"}