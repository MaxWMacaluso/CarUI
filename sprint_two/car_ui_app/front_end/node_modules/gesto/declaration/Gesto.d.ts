import { Client, OnDrag, GestoOptions, GestoEvents, ComponentTriggerType } from "./types";
import Component from "@egjs/component";
declare class Gesto extends Component {
    options: GestoOptions;
    private flag;
    private pinchFlag;
    private datas;
    private isDrag;
    private isPinch;
    private isMouse;
    private isTouch;
    private clientStores;
    private targets;
    private prevTime;
    private isDouble;
    constructor(targets: Array<Element | Window> | Element | Window, options?: GestoOptions);
    getMovement(clients?: Client[]): number;
    isDragging(): boolean;
    isFlag(): boolean;
    isPinchFlag(): boolean;
    isPinching(): boolean;
    scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag?: boolean): void;
    move([deltaX, deltaY]: number[], inputEvent: any): ComponentTriggerType<OnDrag>;
    triggerDragStart(e: any): void;
    unset(): void;
    onDragStart: (e: any, isTrusted?: boolean) => false | undefined;
    onDrag: (e: any, isScroll?: boolean | undefined) => void;
    onDragEnd: (e: any) => void;
    onPinchStart(e: TouchEvent): void;
    onPinch(e: TouchEvent, clients: Client[]): void;
    onPinchEnd(e: TouchEvent): void;
    private initDrag;
    private getCurrentStore;
    private moveClients;
}
interface Gesto {
    on<T extends keyof GestoEvents>(eventName: T, handlerToAttach: (event: GestoEvents[T]) => any): this;
    on(eventName: string, handlerToAttach: (event: {
        [key: string]: any;
    }) => any): this;
    on(events: {
        [key: string]: (event: {
            [key: string]: any;
        }) => any;
    }): this;
    trigger<T extends keyof GestoEvents>(eventName: T, param: ComponentTriggerType<GestoEvents[T]>): boolean;
    trigger(eventName: string, param: {
        [key: string]: any;
    }): boolean;
}
export default Gesto;
